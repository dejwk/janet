/* -*-Java-*- */

/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Java Language Extensions (JANET) package.
 *
 * The Initial Developer of the Original Code is Dawid Kurzyniec.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Dawid Kurzyniec <dawidk@icsr.agh.edu.pl>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * Main Janet grammar file.
 */

%{
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Java Language Extensions (JANET) package.
 *
 * The Initial Developer of the Original Code is Dawid Kurzyniec.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Dawid Kurzyniec <dawidk@icsr.agh.edu.pl>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/* Important information:
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED by the public domain JB tool
 * (see README.html for details).
 */

import pl.edu.agh.icsr.janet.yytree.*;
import java.lang.reflect.Modifier; // for Modifiers productions

import pl.edu.agh.icsr.janet.reflect.ClassManager;
import pl.edu.agh.icsr.janet.ILocationContext;
import pl.edu.agh.icsr.janet.natives.YYNativeCode;
%}

%union {
  YYNode;

  YYType;
  YYTypeList;
  YYDims;
  YYCompilationUnit;
  YYPackage;
  YYClass;
  //YYMember;
  //YYMemberList;
  YYField;
  YYMethod;
  //YYConstructor;
  YYImportDeclaration;
  YYImportDeclarationList;
  YYName;
  YYNameNode;
  YYModifier;
  YYNativeModifier;
  YYModifierList;
  YYExpression;
  YYStatement;
  YYVariableDeclarator;
  YYVariableDeclaratorList;

  YYNativeMethod;
  YYNativeCode;
  YYNativeStatement;
  YYStaticNativeStatement;
  YYNativeMethodImplementation;

  default Object;
}

%token LEX_ERROR 
%token EPSILON

%token INTEGER_LITERAL
%token LONG_LITERAL
%token FLOAT_LITERAL
%token DOUBLE_LITERAL
%token BOOLEAN_LITERAL
%token<String> STRING_LITERAL
%token CHARACTER_LITERAL
%token NULL_LITERAL

%token<String> IDENTIFIER

%token ABSTRACT ANDAND
%token BOOLEAN BREAK BYTE
%token CASE CATCH CHAR CLASS CONST CONTINUE
%token DEFAULT DO DOUBLE
%token ELSE EQADD EQAND EQDIV EQEQ EQLOGRSHIFT EQLSHIFT EQMOD
%token EQMUL EQOR EQRSHIFT EQSUB EQXOR EXTENDS
%token FINAL FINALLY FLOAT FOR
%token GE GOTO
%token IF IMPLEMENTS IMPORT INSTANCEOF INT INTERFACE
%token LE LOGRSHIFT LONG LSHIFT
%token MINUSMINUS
%token NATIVE NE NEW
%token OROR
%token PACKAGE PLUSPLUS PRIVATE PROTECTED PUBLIC
%token RETURN RSHIFT
%token SHORT STATIC SUPER SWITCH SYNCHRONIZED STRICTFP
%token THIS THROW THROWS TRANSIENT TRY
%token VOID VOLATILE
%token WHILE

%token NH_EXPRESSION NH_STRING NH_UNICODE_STRING NH_ARRAY_PTR

%token <YYNativeCode> NATIVE_STATEMENTS NATIVE_STATEMENTS_WITH_JAVA_TAIL NATIVE_BLOCK
                      NATIVE_EXPRESSION NATIVE_STRING NATIVE_UNICODE_STRING

%type<YYCompilationUnit> Goal CompilationUnit
%type<YYPackage> PackageDeclaration
    //%type<YYImportDeclaration> ImportDeclaration
    //                           SingleTypeImportDeclaration TypeImportOnDemandDeclaration
    //%type<YYNode> ImportDeclaration
%type<YYImportDeclarationList> ImportDeclarations
%type<YYNameNode> SimpleName
%type<YYName> Name SingleTypeImportDeclaration TypeImportOnDemandDeclaration

%type<YYType> Type 
              ReferenceType ClassType InterfaceType ClassOrInterfaceType
              ArrayType PrimitiveType Super Void

%type<YYTypeList> Interfaces InterfaceTypeList Throws_opt ClassTypeList ExtendsInterfaces

%type<YYDims> Dims

%type<YYClass> TypeDeclaration ClassDeclaration InterfaceDeclaration
               ClassHeader ClassHeaderHead
               InterfaceHeader InterfaceHeaderHead

    //ype<YYMember> ClassBodyeclaration
    //ype<YYMemberList> ClassBody ClassBodyDeclarations

%type<YYNode> ClassBodyDeclaration ClassBody ClassBodyDeclarations InterfaceBody InterfaceMemberDeclaration
              ClassMemberDeclaration InterfaceMemberDeclaration InterfaceMemberDeclarations

%type<YYModifier> Modifier
%type<YYNativeModifier> NativeModifier
%type<YYModifierList> Modifiers ModifiersWithNative
%type<YYExpression> VariableInitializers VariableInitializer ArrayInitializer 
                       ExplicitConstructorInvocation MethodInvocation
                       Expression ForExpression_opt ConstantExpression ArgumentList Arguments
                       LeftHandSide Assignment PrimaryNoNewArray ClassLiteral
                       FieldAccess ArrayAccess PostfixExpression
                       StatementExpression StatementExpressionList
                       PreIncrementExpression
                       PreDecrementExpression
                       PostIncrementExpression
                       PostDecrementExpression
                       ClassInstanceCreationExpression
                       ArrayCreationExpression
                       BracedExpression
                       Primary
                       UnaryExpression
                       UnaryExpressionNotPlusMinus
                       CastExpression
                       MultiplicativeExpression
                       AdditiveExpression
                       ShiftExpression
                       RelationalExpression
                       EqualityExpression
                       AndExpression
                       ExclusiveOrExpression
                       InclusiveOrExpression
                       ConditionalAndExpression
                       ConditionalOrExpression
                       ConditionalExpression
                       AssignmentExpression

                       Literal
                       INTEGER_LITERAL
                       LONG_LITERAL
                       FLOAT_LITERAL
                       DOUBLE_LITERAL
                       BOOLEAN_LITERAL
                       CHARACTER_LITERAL
                       NULL_LITERAL

%type<YYStatement>     Block
                       BlockStatements_opt
                       BlockStatements
                       SwitchBlock
                       SwitchBlockStatementGroups
                       SwitchBlockStatementGroup

                       StaticInitializer

                       MethodBody
                       ConstructorBody
                       ConstructorBodyStatements

%type<YYExpression> NativeExpression NativeString


%type<YYStatement> Statement 
                   StatementWithoutTrailingSubstatement
                   LabeledStatement
                   IfThenStatement
                   IfThenElseStatement
                   WhileStatement
                   ForStatement ForHeader ForUpdate_opt
                   BlockStatement
                   StatementNoShortIf
                   LabeledStatementNoShortIf
                   IfThenElseStatementNoShortIf
                   ForStatementNoShortIf
                   ForInit_opt
                   WhileStatementNoShortIf
                   EmptyStatement
                   SwitchStatement
                   DoStatement
                   BreakStatement
                   ContinueStatement
                   ReturnStatement
                   SynchronizedStatement
                   ThrowStatement
                   TryStatement Catches CatchClause Finally
                   ExpressionStatement

%type<YYNativeMethod> NativeMethodDeclarator
%type<YYNativeStatement> NativeStatement
%type<YYStaticNativeStatement> StaticNativeStatement
%type<YYNativeMethodImplementation> NativeBlock NativeMethodBody
%type<YYNativeCode> NativeStatements_opt

%type<YYVariableDeclarator> VariableDeclarator VariableDeclaratorId FormalParameter
%type<YYVariableDeclaratorList> VariableDeclarators LocalVariableDeclaration LocalVariableDeclarationStatement
                                FormalParameterList FormalParameterList_opt


%type<YYField> FieldDeclaration ConstantDeclaration
%type<YYMethod> MethodDeclaration MethodHeader MethodDeclarator
                NativeMethodDeclaration NativeMethodHeader
                AbstractMethodDeclaration
%type<YYMethod> ConstructorDeclaration ConstructorDeclarator ConstructorHeader

%start Goal

%%

// 19.2: The Syntactic Grammar

Goal 
    : { setNativeLanguage("c"); 
        compUnit = new YYCompilationUnit(cxt, compMgr, doProcessThisFile); 
        pushScope(compUnit); }
          CompilationUnit 
      { popScope(); $$ = compUnit.expand(cxt); }
    ;

// 19.3: Lexical Structure

Literal               /* used only in expressions */
    : INTEGER_LITERAL 
    | LONG_LITERAL
    | FLOAT_LITERAL
    | DOUBLE_LITERAL
    | BOOLEAN_LITERAL
    | STRING_LITERAL { $$ = null; }
    | CHARACTER_LITERAL
    | NULL_LITERAL
    ;

// 19.4: Types, Values and Variables

Void
    : VOID { $$ = new YYType(cxt, void.class); }
    ;

Type
    : PrimitiveType
    | ReferenceType
    | error { $$ = new YYType(cxt, null); }
    ;

PrimitiveType
    : BOOLEAN { $$ = new YYType(cxt, boolean.class); }
    | BYTE  { $$ = new YYType(cxt, byte.class); }
    | SHORT { $$ = new YYType(cxt, short.class); }
    | INT   { $$ = new YYType(cxt, int.class); }
    | LONG  { $$ = new YYType(cxt, long.class); }
    | CHAR  { $$ = new YYType(cxt, char.class); }
    | FLOAT { $$ = new YYType(cxt, float.class); }
    | DOUBLE { $$ = new YYType(cxt, double.class); }
    ;

ReferenceType
    : ClassOrInterfaceType
    | ArrayType
    ;

ClassOrInterfaceType
    : Name { $$ = $1.reclassifyAsType(); }
    ;

ClassType
    : ClassOrInterfaceType { $$ = $1.setClassContext(); }
    | error                { $$ = new YYType(cxt, null); }
    ;

InterfaceType
    : ClassOrInterfaceType { $$ = $1.setInterfaceContext(); }
    | error { $$ = new YYType(cxt, null); }
    ;
/*
ArrayType
    : PrimitiveType '[' ']'
    | Name '[' ']'
    | ArrayType '[' ']'
    ;
*/

ArrayType
    : PrimitiveType Dims { $$ = $1.addDims(cxt, $2.dims()); }
    | Name Dims          { $$ = $1.reclassifyAsType().addDims(cxt, $2.dims()); }
    ;

// 19.5: Names

/* Modified, but language is not affected */

Name
    : SimpleName          { $$ = new YYName(cxt).add($1); }
    | Name '.' SimpleName { $$ = $1.add($3); }
    ;

SimpleName
    : IDENTIFIER { $$ = new YYNameNode(cxt, $1); }
    ;

/*
QualifiedName
    : Name '.' IDENTIFIER
    ;
*/

//  19.6: Packages

CompilationUnit
    : PackageDeclaration ImportDeclarations { compUnit.setPackageDeclaration($1).setImportDeclarations($2); }
    | PackageDeclaration                    { compUnit.setPackageDeclaration($1).setImportDeclarations(new YYImportDeclarationList(cxt)); }
    |                    ImportDeclarations { compUnit                          .setImportDeclarations($1); }

    |                 { compUnit.setImportDeclarations(new YYImportDeclarationList(cxt)); } 
      TypeDeclaration 
                      { compUnit.addTypeDeclaration($2); }

    | CompilationUnit TypeDeclaration { compUnit.addTypeDeclaration($2); }
    ;
//    | error {}

ImportDeclarations
    : SingleTypeImportDeclaration                      { $$ = new YYImportDeclarationList(cxt).addSingle($1); }
    | TypeImportOnDemandDeclaration                    { $$ = new YYImportDeclarationList(cxt).addOnDemand($1); }
    | ImportDeclarations SingleTypeImportDeclaration   { $$ = $1.addSingle($2); }
    | ImportDeclarations TypeImportOnDemandDeclaration { $$ = $1.addOnDemand($2); }
    ;

PackageDeclaration
    : PACKAGE Name ';' { $$ = $2.reclassifyAsPackage().expand(cxt); }
    ;

SingleTypeImportDeclaration
    : IMPORT Name ';'         { $$ = $2; }
    ;

TypeImportOnDemandDeclaration
    : IMPORT Name '.' '*' ';' { $$ = $2; }
    ;

/*
ImportDeclaration
    : SingleTypeImportDeclaration
    | TypeImportOnDemandDeclaration
    ;

SingleTypeImportDeclaration
    : IMPORT Name ';' { $$ = new YYImportDeclaration(cxt, $2.reclassifyAsType()); }
    ;

TypeImportOnDemandDeclaration
    : IMPORT Name '.' '*' ';' { $$ = new YYImportDeclaration(cxt, $2.reclassifyAsPackage()); }
    ;
*/

TypeDeclaration
    : ClassDeclaration
    | InterfaceDeclaration
    | ';' { $$ = null; }
    ;

// 19.7: Productions Used Only in the LALR(1) Grammar

Modifiers
    : Modifier           { $$ = new YYModifierList(cxt).add($1); }
    | Modifiers Modifier { $$ = $1.add($2); }
    ;

Modifier
    : PUBLIC       { $$ = new YYModifier(cxt, Modifier.PUBLIC); }
    | PROTECTED    { $$ = new YYModifier(cxt, Modifier.PROTECTED); }
    | PRIVATE      { $$ = new YYModifier(cxt, Modifier.PRIVATE); }
    | STATIC       { $$ = new YYModifier(cxt, Modifier.STATIC); }
    | ABSTRACT     { $$ = new YYModifier(cxt, Modifier.ABSTRACT); }
    | FINAL        { $$ = new YYModifier(cxt, Modifier.FINAL); }
    //	| NATIVE
    | SYNCHRONIZED { $$ = new YYModifier(cxt, Modifier.SYNCHRONIZED); }
    | STRICTFP     { $$ = new YYModifier(cxt, Modifier.STRICT); }
    | TRANSIENT    { $$ = new YYModifier(cxt, Modifier.PUBLIC); }
    | VOLATILE     { $$ = new YYModifier(cxt, Modifier.VOLATILE); }
    ;

NativeModifier
    : NATIVE                { $$ = new YYNativeModifier(cxt, getNativeLanguage()); }
    | NATIVE STRING_LITERAL { $$ = new YYNativeModifier(cxt, $2); setNativeLanguage($2); }

ModifiersWithNative
    : ModifiersWithNative Modifier { $$ = $1.add($2); }
    | Modifiers NativeModifier     { $$ = $1.add($2); }
    |           NativeModifier     { $$ = new YYModifierList(cxt).add($1); }
    ;

// 19.8: Classes

// 19.8.1. Class Declaration

/* split because of mid-rule */

ClassDeclaration
    : ClassHeader { pushScope($1); } ClassBody { $$ = ((YYClass)popScope()).expand(cxt); }
    ;

ClassHeader
    : ClassHeaderHead Super Interfaces { $$ = $1.setSuperclass($2).setInterfaces($3).expand(cxt); }
//    | ClassHeader error { $$ = $1; }

//    | ClassHeaderHead Super Interfaces { $$ = $1.setSuper($2).setInterfaces($3).expand(cxt); }
//    | ClassHeaderHead Super            { $$ = $1.setSuper($2)                  .expand(cxt); }
//    | ClassHeaderHead       Interfaces { $$ = $1             .setInterfaces($2).expand(cxt); }
//    | ClassHeaderHead                  { $$ = $1; }
    ;

ClassHeaderHead
    : Modifiers CLASS IDENTIFIER { $$ = new YYClass(cxt, $3, YYClass.CLASS, $1); }
    |           CLASS IDENTIFIER { $$ = new YYClass(cxt, $2, YYClass.CLASS, null); }
    ;

/* end of split */

Super
    : EXTENDS ClassType { $$ = $2.expand(cxt); }
    | /* empty */       { $$ = null; }
//    | error { $$ = null; }
    ;

Interfaces
    : IMPLEMENTS InterfaceTypeList { $$ = $2.expand(cxt); }
    | /* empty */                  { $$ = null; }
//| IMPLEMENTS error { $$ = null; }
    ;

InterfaceTypeList
    : InterfaceType                       { $$ = new YYTypeList(cxt).add($1); }
    | InterfaceTypeList ',' InterfaceType { $$ = $1.add($3); }
    ;

ClassBody
    : '{' ClassBodyDeclarations '}' { $$ = null; /*new YYNode(cxt);*/ }
    | '{'                       '}' { $$ = null; /*new YYStatement(cxt);*/ }
//    | '{' error '}'
    ;

ClassBodyDeclarations
    : ClassBodyDeclaration
    | ClassBodyDeclarations ClassBodyDeclaration
    ;

ClassBodyDeclaration
    : ClassMemberDeclaration
    | StaticInitializer      { ((YYClass)peekScope()).addStaticInitializer($1); $$ = null; }
    | ConstructorDeclaration { ((YYClass)peekScope()).addConstructor($1); $$ = null; }
    | Block /* 1.1 */        { ((YYClass)peekScope()).addInstanceInitializer($1); $$ = null; }
    | StaticNativeStatement  { ((YYClass)peekScope()).addStaticNativeStatement($1); $$ = null; }
    ;

StaticNativeStatement
    : NativeModifier '{'                   { lexmode = Lexer.NATIVE_PURE; }
                         NATIVE_STATEMENTS { lexmode = Lexer.JAVA_TOKEN; }
                     '}'                   { $$ = new YYStaticNativeStatement(cxt).setNativeLanguage($1.getLanguage()).
                                                  setImplementation($4); }
    ;

ClassMemberDeclaration
    : FieldDeclaration               { ((YYClass)peekScope()).addField($1); $$ = null; }
    | MethodDeclaration              { ((YYClass)peekScope()).addMethod($1); $$ = null; }
    | NativeMethodDeclaration        { ((YYClass)peekScope()).addMethod($1); $$ = null; }
    | ClassDeclaration /* 1.1 */     { ((YYClass)peekScope()).addClass($1); $$ = null; }
    | InterfaceDeclaration /* 1.1 */ { ((YYClass)peekScope()).addClass($1); $$ = null; }
    ;

// 19.8.2. Field Declarations

FieldDeclaration
    : Modifiers Type VariableDeclarators ';' { $$ = new YYField(cxt, $1, $2, $3); }
    |           Type VariableDeclarators ';' { $$ = new YYField(cxt, null, $1, $2); }
    ;

VariableDeclarators
    : VariableDeclarator                         { $$ = new YYVariableDeclaratorList(cxt).add($1); }
    | VariableDeclarators ',' VariableDeclarator { $$ = $1.add($3); }
    ;

VariableDeclarator
    : VariableDeclaratorId
    | VariableDeclaratorId '=' VariableInitializer { $$ = $1.expand(cxt); }
    ;

VariableDeclaratorId
    : IDENTIFIER      { $$ = new YYVariableDeclarator(cxt, $1); }
    | IDENTIFIER Dims { $$ = new YYVariableDeclarator(cxt, $1).addDims($2.dims()); }
    ;

VariableInitializer
    : Expression
    | ArrayInitializer
    ;

// 19.8.3. Method Declarations

MethodDeclaration
    : MethodHeader MethodBody { $$ = ((YYMethod)popScope()).setBody($2).expand(cxt); }
    ;

MethodHeader
    : Modifiers Type MethodDeclarator Throws_opt      { $$ = $3.setModifiers($1).setReturnType($2).setThrows($4).expand(cxt); }
    |           Type MethodDeclarator Throws_opt      { $$ = $2                 .setReturnType($1).setThrows($3).expand(cxt); }
    | Modifiers Type MethodDeclarator Dims Throws_opt { $$ = $3.setModifiers($1).setReturnType($2, $4.dims()).setThrows($5).expand(cxt); }
    |           Type MethodDeclarator Dims Throws_opt { $$ = $2                 .setReturnType($1, $3.dims()).setThrows($4).expand(cxt); }

    | Modifiers Void MethodDeclarator Throws_opt      { $$ = $3.setModifiers($1).setReturnType($2).setThrows($4).expand(cxt); }
    |           Void MethodDeclarator Throws_opt      { $$ = $2                 .setReturnType($1).setThrows($3).expand(cxt); }
    ;

MethodDeclarator
    : IDENTIFIER '('                         { pushScope(new YYMethod(cxt, $1, YYMethod.METHOD)); }
                     FormalParameterList_opt
		 ')'                         { $$ = ((YYMethod)peekScope()).setParameters($4); addVariables($4); }
    ;

FormalParameterList_opt
    : /* empty */         { $$ = null; }
    | FormalParameterList { $$ = $1.setDeclarationType(YYVariableDeclarator.PARAMETER); }
                                               
    ;

FormalParameterList
    : FormalParameter                         { $$ = new YYVariableDeclaratorList(cxt).add($1); }
    | FormalParameterList ',' FormalParameter { $$ = $1.add($3); }
    ;

FormalParameter
    : Modifiers Type VariableDeclaratorId /* 1.1 */ { $$ = $3.setModifiers($1).setType($2).expand(cxt); }
    |           Type VariableDeclaratorId           { $$ = $2                 .setType($1).expand(cxt); }
    ;

Throws_opt
    : /* empty */          { $$ = null; }
    | THROWS ClassTypeList { $$ = $2.expand(cxt); }
    //    | THROWS error
    ;

ClassTypeList
    : ClassType                   { $$ = new YYTypeList(cxt).add($1); }
    | ClassTypeList ',' ClassType { $$ = $1                 .add($3); }
    ;

MethodBody
    : Block
    | ';'   { $$ = null; /*new YYStatement(cxt);*/ }
    ;

// Native method declaration

NativeMethodDeclaration
    : NativeMethodHeader NativeMethodBody { $$ = ((YYNativeMethod)popScope()).setBody($2).expand(cxt); }
    ;

NativeMethodHeader
    : ModifiersWithNative Type NativeMethodDeclarator Throws_opt      { $$ = $3.setModifiers($1).setReturnType($2).
                                                                             setThrows($4).expand(cxt); }
    | ModifiersWithNative Type NativeMethodDeclarator Dims Throws_opt { $$ = $3.setModifiers($1).setReturnType($2, $4.dims()).
                                                                             setThrows($5).expand(cxt); }
    | ModifiersWithNative Void NativeMethodDeclarator Throws_opt      { $$ = $3.setModifiers($1).setReturnType($2).
                                                                             setThrows($4).expand(cxt); }
    ;

NativeMethodDeclarator
    : IDENTIFIER '('                         { pushScope(new YYNativeMethod(cxt, $1)); }
                     FormalParameterList_opt
		 ')'                         { $$ = ((YYNativeMethod)peekScope()).setParameters($4); addVariables($4); }
    ;

NativeMethodBody
    : NativeBlock
    | ';' { $$ = null; /*new YYStatement(cxt);*/ }
    ;

NativeStatement
    : NativeModifier  { pushScope(new YYNativeStatement(cxt)); }
          NativeBlock { $$ = ((YYNativeStatement)popScope()).addBody($3).setNativeLanguage($1.getLanguage()).expand(cxt); }
    ;

// 19.8.4. Static Initializers

StaticInitializer
    : STATIC Block { $$ = $2.expand(cxt); }
    ;

// 19.8.5. Constructor Declarations

ConstructorDeclaration
    : ConstructorHeader ConstructorBody { $$ = ((YYMethod)popScope()).setBody($2).expand(cxt); }
//    | ConstructorHeader error ConstructorBody
    ;

ConstructorHeader
    : Modifiers ConstructorDeclarator Throws_opt { $$ = $2.setModifiers($1).setThrows($3).expand(cxt); }
//    | Modifiers ConstructorDeclarator        { $$ = $2.setModifiers($1)              .expand(cxt); }
    |           ConstructorDeclarator Throws_opt { $$ = $1                 .setThrows($2).expand(cxt); }
//    |           ConstructorDeclarator
    ;

ConstructorDeclarator
    : IDENTIFIER '('                         { pushScope(new YYMethod(cxt, $1, YYMethod.CONSTRUCTOR)); }
                     FormalParameterList_opt
		 ')'                         { $$ = ((YYMethod)peekScope()).checkName(cxt).setParameters($4); addVariables($4); }
    ;

ConstructorBody
    : '{'                           { pushScope(new YYStatement(cxt, true, true)); } 
          ConstructorBodyStatements
      '}'                           { $$ = ((YYStatement)popScope()).compact(); }
    ;

ConstructorBodyStatements
    : ExplicitConstructorInvocation BlockStatements { $$ = $2.expand(cxt); }
    | ExplicitConstructorInvocation                 { $$ = null; }
    |                               BlockStatements { $$ = $1.expand(cxt); }
    |                                               { $$ = null; }
//    | '{' error '}'
    ;

ExplicitConstructorInvocation
    : THIS Arguments ';'  { $$ = null; /*new YYStatement(cxt);*/ }
    | SUPER Arguments ';' { $$ = null; /*new YYStatement(cxt);*/ }
    | Primary '.' SUPER Arguments ';' /* 1.1 */ { $$ = null; /*new YYStatement(cxt);*/ }
    ;

// 19.9: Interfaces

InterfaceDeclaration
    : InterfaceHeader InterfaceBody { $$ = ((YYClass)popScope()) /*.setBody($2)*/.expand(cxt); }
    ;

InterfaceHeader
    : InterfaceHeaderHead ExtendsInterfaces { $$ = $1.setInterfaces($2).expand(cxt); }
    | InterfaceHeaderHead
    ;

InterfaceHeaderHead
    : Modifiers INTERFACE IDENTIFIER { $$ = new YYClass(cxt, $3, YYClass.INTERFACE, $1); pushScope($$); }
    |           INTERFACE IDENTIFIER { $$ = new YYClass(cxt, $2, YYClass.INTERFACE, null); pushScope($$); }
    ;

ExtendsInterfaces
    : EXTENDS InterfaceType               { $$ = new YYTypeList(cxt).add($2); }
    | ExtendsInterfaces ',' InterfaceType { $$ = $1.add($3); }
    ;

InterfaceBody
    : '{' InterfaceMemberDeclarations '}' { $$ = null; }
    | '{'                             '}' { $$ = null; }
//  | '{' error '}'
    ;

InterfaceMemberDeclarations
    : InterfaceMemberDeclaration
    | InterfaceMemberDeclarations InterfaceMemberDeclaration
    ;

InterfaceMemberDeclaration
    : ConstantDeclaration            { ((YYClass)peekScope()).addField($1); $$ = null; }
    | AbstractMethodDeclaration      { ((YYClass)peekScope()).addMethod($1); $$ = null; }
    | ClassDeclaration /* 1.1 */     { ((YYClass)peekScope()).addClass($1); $$ = null; }
    | InterfaceDeclaration /* 1.1 */ { ((YYClass)peekScope()).addClass($1); $$ = null; }
    ;

ConstantDeclaration
    : FieldDeclaration
    ;

AbstractMethodDeclaration
    : MethodHeader ';' { $$ = ((YYMethod)popScope()).expand(cxt); }
    ;

// 19.10: Arrays

ArrayInitializer
    : '{' VariableInitializers ',' '}' { $$ = null; }
    | '{' VariableInitializers     '}' { $$ = null; }
    | '{'                      ',' '}' { $$ = null; }
    | '{'                          '}' { $$ = null; }
    | '{' error '}'                    { $$ = null; }
    ;

VariableInitializers
    : VariableInitializer
    | VariableInitializers ',' VariableInitializer
    ;

// 19.11: Blocks and Statements

Block
    : '{'                      { pushScope(new YYStatement(cxt, true, true)); } 
          BlockStatements_opt 
      '}'                      { $$ = ((YYStatement)popScope()).compact().expand(cxt); }
    ;

BlockStatements_opt
    : /* empty */     { $$ = peekScope(); }
    | BlockStatements
//    | '{' error '}' {}
    ;

BlockStatements
    : BlockStatement                 { $$ = ((YYStatement)peekScope()).add($1); }
    | BlockStatements BlockStatement { $$ = $1.add($2); }
    ;

BlockStatement
    : LocalVariableDeclarationStatement { $$ = $1; }
    | Statement
    | ClassDeclaration /* 1.1 */ { $$ = $1; }
    ;

LocalVariableDeclarationStatement
    : LocalVariableDeclaration ';' { $$ = $1.expand(cxt); addVariables($1); }
    ;

LocalVariableDeclaration
    : Modifiers Type VariableDeclarators /* 1.1 */ { $$ = $3.setModifiers($1).setType($2)
                                                            .setDeclarationType(YYVariableDeclarator.LOCAL_VARIABLE); }
    |           Type VariableDeclarators           { $$ = $2.setType($1)
                                                            .setDeclarationType(YYVariableDeclarator.LOCAL_VARIABLE); }
    ;

Statement
    : StatementWithoutTrailingSubstatement
    | LabeledStatement
    | IfThenStatement
    | IfThenElseStatement
    | WhileStatement
    | ForStatement
    ;

StatementNoShortIf
    : StatementWithoutTrailingSubstatement
    | LabeledStatementNoShortIf
    | IfThenElseStatementNoShortIf
    | WhileStatementNoShortIf
    | ForStatementNoShortIf
    ;

StatementWithoutTrailingSubstatement
    : Block
    | EmptyStatement
    | ExpressionStatement
    | SwitchStatement
    | DoStatement
    | BreakStatement
    | ContinueStatement
    | ReturnStatement
    | SynchronizedStatement
    | ThrowStatement
    | TryStatement

    | NativeStatement { $$ = $1; }
    ;

EmptyStatement
    : ';' { $$ = new YYStatement(cxt); }
    ;

LabeledStatement
    : IDENTIFIER ':' Statement { $$ = $3.expand(cxt); }
    ;

LabeledStatementNoShortIf
    : IDENTIFIER ':' StatementNoShortIf { $$ = $3.expand(cxt); }
    ;

ExpressionStatement
    : StatementExpression ';' { $$ = new YYStatement(cxt); }
    ;

StatementExpression
    : Assignment
    | PreIncrementExpression
    | PreDecrementExpression
    | PostIncrementExpression
    | PostDecrementExpression
    | MethodInvocation
    | ClassInstanceCreationExpression
    ;

IfThenStatement
    : IF BracedExpression Statement { $$ = $3.expand(cxt); }
    ;

IfThenElseStatement
    : IF BracedExpression StatementNoShortIf ELSE Statement { $$ = new YYStatement(cxt).add($3).add($5).compact(); }
    ;

IfThenElseStatementNoShortIf
    : IF BracedExpression StatementNoShortIf ELSE StatementNoShortIf { $$ = new YYStatement(cxt).add($3).add($5).compact(); }
    ;

SwitchStatement
    : SWITCH BracedExpression SwitchBlock { $$ = $3.expand(cxt); }
    ;

SwitchBlock
    : '{' SwitchBlockStatementGroups SwitchLabels '}' { $$ = $2.expand(cxt); }
    | '{' SwitchBlockStatementGroups              '}' { $$ = $2.expand(cxt); }
    | '{'                            SwitchLabels '}' { $$ = new YYStatement(cxt, true, true); }
    | '{'                                         '}' { $$ = new YYStatement(cxt, true, true); }
//    | '{' error '}'
    ;

SwitchBlockStatementGroups
    : SwitchBlockStatementGroup
    | SwitchBlockStatementGroups SwitchBlockStatementGroup { $$ = $1.absorb($2); }
    ;

SwitchBlockStatementGroup
    : SwitchLabels BlockStatements { $$ = $2.expand(cxt); }
    ;

SwitchLabels
    : SwitchLabel
    | SwitchLabels SwitchLabel
    ;

SwitchLabel
    : CASE ConstantExpression ':'
    | DEFAULT ':'
    ;

WhileStatement
    : WHILE BracedExpression Statement { $$ = $3.expand(cxt); }
    ;

WhileStatementNoShortIf
    : WHILE BracedExpression StatementNoShortIf { $$ = $3.expand(cxt); }
    ;

DoStatement
    : DO Statement WHILE BracedExpression ';' { $$ = $2.expand(cxt); }
    ;

ForStatement
    : ForHeader Statement { $$ = ((YYStatement)popScope()).add($2).compact(); }
    ;

ForStatementNoShortIf
    : ForHeader StatementNoShortIf { $$ = $1.add($2).compact(); }
    ;


ForHeader
    : FOR '(' { pushScope(new YYStatement(cxt)); } ForInit_opt ';' ForExpression_opt ';' ForUpdate_opt ')' 
//    | FOR '(' ForInit ';' ForExpression ';'           ')' { pushScope(new YYStatement(cxt).add($3)); }
//    | FOR '(' ForInit ';'               ';' ForUpdate ')' { pushScope(new YYStatement(cxt).add($3)); }
//    | FOR '(' ForInit ';'               ';'           ')' { pushScope(new YYStatement(cxt).add($3)); }
	//    | FOR '('                          ';' ForExpression_opt ';' ForUpdate_opt ')' { pushScope(new YYStatement(cxt)); }
//    | FOR '('         ';' ForExpression ';'           ')' { pushScope(new YYStatement(cxt)); }
//    | FOR '('         ';'               ';' ForUpdate ')' { pushScope(new YYStatement(cxt)); }
//    | FOR '('         ';'               ';'           ')' { pushScope(new YYStatement(cxt)); }
	//    | FOR '(' LocalVariableDeclaration ';' ForExpression_opt ';' ForUpdate_opt ')' { pushScope(new YYStatement(cxt)); addVariables($3)); }
    ;

ForInit_opt
    : StatementExpressionList  { $$ = new YYStatement(cxt); }
    | LocalVariableDeclaration { addVariables($1); }
    | /* */                    { $$ = null; }
    ;


ForExpression_opt
    : Expression
    | /* */      { $$ = null; }
    ;

ForUpdate_opt
    : StatementExpressionList { $$ = null; }
    | /* */ { $$ = null; }
    //    | error
    ;

StatementExpressionList
    : StatementExpression
    | StatementExpressionList ',' StatementExpression
    ;

BreakStatement
    : BREAK IDENTIFIER ';' { $$ = new YYStatement(cxt); }
    | BREAK            ';' { $$ = new YYStatement(cxt); }
    ;

ContinueStatement
    : CONTINUE IDENTIFIER ';' { $$ = new YYStatement(cxt); }
    | CONTINUE            ';' { $$ = new YYStatement(cxt); }
    ;

ReturnStatement
    : RETURN Expression ';' { $$ = new YYStatement(cxt); }
    | RETURN            ';' { $$ = new YYStatement(cxt); }
    ;

ThrowStatement
    : THROW Expression ';' { $$ = new YYStatement(cxt); }
    ;

SynchronizedStatement
    : SYNCHRONIZED BracedExpression Block { $$ = $3.expand(cxt); }
    ;

TryStatement
    : TRY Block Catches         { $$ = $2.absorb($3).expand(cxt); }
    | TRY Block Catches Finally { $$ = $2.absorb($3).add($4).compact().expand(cxt); }
    | TRY Block         Finally { $$ = $2.add($3).compact().expand(cxt); }
    ;

Catches
    : CatchClause         { $$ = new YYStatement(cxt).add($1); }
    | Catches CatchClause { $$ = $1.add($2); }
    ;

CatchClause
    : CatchClauseHead Block { $$ = ((YYStatement)popScope()).add($2); }
    ;

CatchClauseHead
    : CATCH '('                 { pushScope(new YYStatement(cxt)); }
                FormalParameter 
            ')'                 { addVariable($4.setDeclarationType(YYVariableDeclarator.CATCH_PARAMETER)); }
    ;

Finally
    : FINALLY Block { $$ = $2.expand(cxt); }
    ;

// Native blocks and statements

NativeBlock
    : '{'                      { lexmode = Lexer.NATIVE_STATEMENTS; pushScope(new YYNativeMethodImplementation(cxt)); }
          NativeStatements_opt { lexmode = Lexer.JAVA_TOKEN; }
      '}'                      { $$ = ((YYNativeMethodImplementation)popScope()).compact().expand(cxt); }
    ;

NativeStatements_opt
    : NATIVE_STATEMENTS { $$ = ((YYNativeMethodImplementation)peekScope()).addStatements($1); }
    | /* empty */       { $$ = null; }
    ;

// 19.12: Expressions

Primary
    : PrimaryNoNewArray
    | ArrayCreationExpression
    ;

BracedExpression
    : '(' Expression ')' { $$ = null; }
    | '(' error ')' { $$ = null; }
    ;

PrimaryNoNewArray
    : Literal { $$ = null; }
    | THIS { $$ = null; }
    | BracedExpression
    | ClassInstanceCreationExpression
    | FieldAccess
    | MethodInvocation
    | ArrayAccess
    | Name '.' THIS /* 1.1 */ { $$ = null; }
    | ClassLiteral /* 1.1 */
    | NativeExpression
    | NativeString
    ;

NativeExpression
    : NH_EXPRESSION '('                   { lexmode = Lexer.NATIVE_EXPRESSION; }
                        NATIVE_EXPRESSION { lexmode = Lexer.JAVA_TOKEN; }
                    ')'                   { $$ = new YYEnclosedNativeExpression(cxt, $4); }
    ;

NativeString
    : NH_STRING '('                               { lexmode = Lexer.NATIVE_STRING; }
                    NATIVE_STRING                 { lexmode = Lexer.JAVA_TOKEN; }
                ')'                               { $$ = new YYEnclosedNativeString(cxt, $4); }

    | NH_UNICODE_STRING '('                       { lexmode = Lexer.NATIVE_UNICODE_STRING; }
                            NATIVE_UNICODE_STRING { lexmode = Lexer.JAVA_TOKEN; }
                        ')'                       { $$ = new YYEnclosedNativeString(cxt, $4, true); }
    ;

ClassLiteral
    : PrimitiveType '.' CLASS { $$ = null; }
    | Name '.' CLASS { $$ = null; }
    | ArrayType '.' CLASS { $$ = null; }
    | VOID '.' CLASS { $$ = null; }
    ;

ClassInstanceCreationExpression
    : NEW ClassOrInterfaceType Arguments { pushScope(new YYClass(cxt, $2)); } ClassBody /* 1.1 */ { $$ = null; popScope(); }
    | NEW ClassOrInterfaceType Arguments                                                            { $$ = null; }

//    | NEW ClassType '(' error        ')' ClassBody /* 1.1 */ { $$ = null; }
//    | NEW ClassType '(' error        ')'                     { $$ = null; }

    | Primary '.' NEW IDENTIFIER Arguments { pushScope(new YYClass(cxt, $1, $4)); } ClassBody /* 1.1 */ { $$ = null; popScope(); }
    | Primary '.' NEW IDENTIFIER Arguments                                                      /* 1.1 */ { $$ = null; }

//    | Primary '.' NEW IDENTIFIER '(' error        ')' ClassBody /* 1.1 */ { $$ = null; }
//    | Primary '.' NEW IDENTIFIER '(' error        ')'           /* 1.1 */ { $$ = null; }
    ;

ArgumentList
    : Expression
    | ArgumentList ',' Expression
    ;

Arguments
    : '(' ArgumentList ')' { $$ = null; }
    | '('              ')' { $$ = null; }
	//    | Name '(' error ')' {}
	//    | Primary '.' IDENTIFIER '(' error ')'
	//    | SUPER '.' IDENTIFIER '(' error ')'
    ;

ArrayCreationExpression
    : NEW PrimitiveType DimExprs Dims { $$ = null; }
    | NEW PrimitiveType DimExprs { $$ = null; }
    | NEW PrimitiveType Dims ArrayInitializer /* 1.1 */ { $$ = null; }
    | NEW ClassOrInterfaceType DimExprs Dims { $$ = null; }
    | NEW ClassOrInterfaceType DimExprs { $$ = null; }
    | NEW ClassOrInterfaceType Dims ArrayInitializer /* 1.1 */ { $$ = null; }
    ;

DimExprs
    : DimExpr
    | DimExprs DimExpr
    ;

DimExpr
    : '[' Expression ']'
    | '[' error ']'
    ;

Dims
    : '[' ']'      { $$ = new YYDims(cxt).addDim(cxt); }
    | Dims '[' ']' { $$ = $1.addDim(cxt); }
    ;

FieldAccess
    : Primary '.' IDENTIFIER { $$ = null; }
    | SUPER '.' IDENTIFIER   { $$ = null; }
    ;

MethodInvocation
    : Name Arguments { $$ = null; }
    | Primary '.' IDENTIFIER Arguments { $$ = null; }
    | SUPER '.' IDENTIFIER Arguments { $$ = null; }

//    | Name '(' error ')' { $$ = null; }
//    | Primary '.' IDENTIFIER '(' error ')' { $$ = null; }
//    | SUPER '.' IDENTIFIER '(' error ')' { $$ = null; }
    ;

ArrayAccess
    : Name DimExpr { $$ = null; }
    | PrimaryNoNewArray DimExpr
    ;

PostfixExpression
    : Primary
    | Name { $$ = null; }
    | PostIncrementExpression
    | PostDecrementExpression
    ;

PostIncrementExpression
    : PostfixExpression PLUSPLUS
    ;

PostDecrementExpression
    : PostfixExpression MINUSMINUS
    ;

UnaryExpression
    : PreIncrementExpression
    | PreDecrementExpression
    | '+' UnaryExpression { $$ = null; }
    | '-' UnaryExpression { $$ = null; }
    | UnaryExpressionNotPlusMinus
    ;

PreIncrementExpression
    : PLUSPLUS UnaryExpression { $$ = null; }
    ;

PreDecrementExpression
    : MINUSMINUS UnaryExpression { $$ = null; }
    ;

UnaryExpressionNotPlusMinus
    : PostfixExpression
    | '~' UnaryExpression { $$ = null; }
    | '!' UnaryExpression { $$ = null; }
    | CastExpression
    ;

CastExpression
    : '(' PrimitiveType Dims ')' UnaryExpression { $$ = null; }
    | '(' PrimitiveType      ')' UnaryExpression { $$ = null; }
    | '(' Expression ')' UnaryExpressionNotPlusMinus { $$ = null; }
    | '(' Name Dims ')' UnaryExpressionNotPlusMinus { $$ = null; }

    | '(' error ')' UnaryExpressionNotPlusMinus { $$ = null; }
    ;

MultiplicativeExpression
    : UnaryExpression
    | MultiplicativeExpression '*' UnaryExpression
    | MultiplicativeExpression '/' UnaryExpression
    | MultiplicativeExpression '%' UnaryExpression
    ;

AdditiveExpression
    : MultiplicativeExpression
    | AdditiveExpression '+' MultiplicativeExpression
    | AdditiveExpression '-' MultiplicativeExpression
    ;

ShiftExpression
    : AdditiveExpression
    | ShiftExpression LSHIFT AdditiveExpression
    | ShiftExpression RSHIFT AdditiveExpression
    | ShiftExpression LOGRSHIFT AdditiveExpression
    ;

RelationalExpression
    : ShiftExpression
    | RelationalExpression '<' ShiftExpression
    | RelationalExpression '>' ShiftExpression
    | RelationalExpression LE ShiftExpression
    | RelationalExpression GE ShiftExpression
    | RelationalExpression INSTANCEOF ReferenceType
    ;

EqualityExpression
    : RelationalExpression
    | EqualityExpression EQEQ RelationalExpression
    | EqualityExpression NE RelationalExpression
    ;

AndExpression
    : EqualityExpression
    | AndExpression '&' EqualityExpression
    ;

ExclusiveOrExpression
    : AndExpression
    | ExclusiveOrExpression '^' AndExpression
    ;

InclusiveOrExpression
    : ExclusiveOrExpression
    | InclusiveOrExpression '|' ExclusiveOrExpression
    ;

ConditionalAndExpression
    : InclusiveOrExpression
    | ConditionalAndExpression ANDAND InclusiveOrExpression
    ;

ConditionalOrExpression
    : ConditionalAndExpression
    | ConditionalOrExpression OROR ConditionalAndExpression
    ;

ConditionalExpression
    : ConditionalOrExpression
    | ConditionalOrExpression '?' Expression ':' ConditionalExpression
    ;

AssignmentExpression
    : ConditionalExpression
    | Assignment
    ;

Assignment
    : LeftHandSide AssignmentOperator AssignmentExpression
    ;

LeftHandSide
    : Name { $$ = null; }
    | FieldAccess
    | ArrayAccess
    ;

AssignmentOperator
    : '='
    | EQMUL
    | EQDIV
    | EQMOD
    | EQADD
    | EQSUB
    | EQLSHIFT
    | EQRSHIFT
    | EQLOGRSHIFT
    | EQAND
    | EQXOR
    | EQOR
    ;

Expression
    : AssignmentExpression
    ;

ConstantExpression
    : Expression
    ;


%%

YYCompilationUnit compUnit;

/* Error handling */

public void parseError(String msg) throws ParseException {
    String desc;
    if (yychar == YYEOF) {
	desc = "unexpected end of file";
    } else {
	desc = "parse error: '" + yytext() + "'";
    }
    if (msg != null && msg != "parse error") desc += "; " + msg;
    reportError(tokencxt, desc);
}

public static void reportError(ILocationContext cxt, String msg) throws CompileException {
    reportError(cxt, msg, true);
}

public static void reportError(ILocationContext cxt, String msg, boolean errthrow)
        throws CompileException {
    YYLocation lbeg = cxt.lbeg();
    JanetSourceReader ibuf = cxt.ibuf();
    String orig = ibuf.getOriginAsString();
    String line = ibuf.getLine(lbeg);
    
    System.err.println(orig + ":" + (lbeg.lineno+1) + ": " + msg);
    if (line != null && !line.equals("")) {
	System.err.println(line);

	String marker = "";
	for (int i=0; i<lbeg.charno; i++) {
	    char c = line.charAt(i);
	    marker += (Character.isWhitespace(c) ? c : ' ');
	}
	marker += "^";
	System.err.println(marker);
    }
    if(errthrow) throw new CompileException(msg);
}

public static void reportWarning(ILocationContext cxt, String msg) {
    try {
	reportError(cxt, "warning: " + msg, false);
    } catch (CompileException e) {}
}

/* */

/* Parse context */

public class Context implements IMutableContext {

    IScope currScope;
    VariableStack variables = new VariableStack();

    public final YYLocation lbeg() { return Parser.this.lbeg(); }
    public final YYLocation lend() { return Parser.this.lend(); }
    public final JanetSourceReader ibuf() { return yylex.ibuf(); }

    public final void reportError(String msg) throws CompileException {
	Parser.this.reportError(this, msg, true);
    }

    public final ClassManager getClassManager() { return compMgr.getClassManager(); }
    public final YYCompilationUnit getCompilationUnit() { return compUnit; }
    public final IScope getScope() { return currScope; }
    public final VariableStack getVariables() { return variables; }

    public void pushScope(IScope unit) {
	//System.out.println("pushing " + unit.getClass().getName());
	currScope = unit;
    }
    
    public void addVariable(YYVariableDeclarator var) throws CompileException {
	variables.push(var);
    }

    public void addVariables(YYVariableDeclaratorList vars) throws CompileException {
	if (vars == null) return;
	YYVariableDeclarator var;
        Iterator i = vars.iterator();
        while (i.hasNext()) {
            variables.push((YYVariableDeclarator)i.next());
        }
    }

    public IScope popScope() {
	variables.pop(currScope);	/* popping variables */
	IScope unit = currScope;
	currScope = currScope.getEnclosingScope();
	//System.out.println("popping " + unit.getClass().getName());
	return unit;
    }
    
}

Context cxt = new Context();

ILocationContext tokencxt = new ILocationContext() {
	public final YYLocation lbeg() { return yylex.tokenloc(); }
	public final YYLocation lend() { return Parser.this.lend(); }
	public final JanetSourceReader ibuf() { return yylex.ibuf(); }
	public final void reportError(String msg) throws CompileException {
	    Parser.this.reportError(this, msg, true);
	}
    };

// redirection to cxt
void pushScope(IScope unit) { cxt.pushScope(unit); }
IScope popScope() { return cxt.popScope(); }
IScope peekScope() { return cxt.getScope(); }
void addVariable(YYVariableDeclarator var) throws CompileException { cxt.addVariable(var); }
void addVariables(YYVariableDeclaratorList vars) throws CompileException { cxt.addVariables(vars); }
/* Native language support */

public void setNativeLanguage(String lang) throws LexException {
    yylex.setNativeLanguage(lang);
}

public String getNativeLanguage() { return yylex.getNativeLanguage(); }

/* Class stack */
/*
java.util.Stack class_stack = new java.util.Stack();

public void pushClass(YYClass cls) {
    class_stack.push(cls);
}

public YYClass popClass() {
    return (YYClass)class_stack.pop();
}

public YYClass peekClass() {
    if (!class_stack.empty()) {
	return (YYClass)class_stack.peek();
    } else {
	return null;
    }
}
*/
