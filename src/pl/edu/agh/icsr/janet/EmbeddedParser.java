/* -*-Java-*- */

package pl.edu.agh.icsr.janet;

/**************************************************/

import java.util.*;
import java.io.*;
import jbf.Int_Stack;
import jbf.Object_Stack;
import jbf.YYlocation;

import pl.edu.agh.icsr.janet.YYLocation;
import pl.edu.agh.icsr.janet.YYLocationStack;
import pl.edu.agh.icsr.janet.natives.IParser;

/**************************************************/


/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Java Language Extensions (JANET) package.
 *
 * The Initial Developer of the Original Code is Dawid Kurzyniec.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Dawid Kurzyniec <dawidk@icsr.agh.edu.pl>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/* Important information:
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED by the public domain JB tool
 * (see README.html for details).
 */

import pl.edu.agh.icsr.janet.yytree.*;
import pl.edu.agh.icsr.janet.reflect.*;
import pl.edu.agh.icsr.janet.natives.*;
//import pl.edu.agh.icsr.janet.ParseException;
import java.lang.reflect.Modifier; // for Modifiers productions



/* The template file is based on parser templates defined in JB and
 * (indirectly) bison, and is therefore subject to GPL license as shown
 * below. The JANET MPL 1.1 license do not apply in this case. Note that
 * the template file is not an integral part of JANET and does not affect
 * JANET licensing.
 */

/*
   This is a parser template file, in java, for running parsers
   generated by the GNU Bison parser generator.
*/

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/**************************************************/

public class EmbeddedParser {

    // Set up the fake goto mechanism
    protected int Goto;
    protected static final int yynewstate = 0;
    protected static final int yybackup = 1;
    protected static final int yydefault = 2;
    protected static final int yyreduce = 3;
    protected static final int yyerrlab = 4;
    protected static final int yyerrlab1 = 5;
    protected static final int yyerrdefault = 6;
    protected static final int yyerrpop = 7;
    protected static final int yyerrhandle = 8;

    public static final int YYCONTINUE = 1;
    public static final int YYACCEPT = 0;
    public static final int YYABORT = -1;
    public static final int YYERROR = -2;

    public static final int YYEOF = 0;

    protected static final int YYEMPTY = -2;
    protected static final int YYTERROR = 1;
    protected static final int YYTERRCODE = 256;

    protected static final char EOL = '\n';

// CONSTANTS

static public final int YYFINAL = 367;
static public final int YYFLAG = -32768;
static public final int YYNTBASE = 119;
static public final int YYLAST = 1412;


    protected int yyreturn; // see ACTIONS switch
    protected int yystate;
    protected int yyn;
    protected int yylen;
    protected int yychar; /* the lookahead symbol */
    protected int yychar1;  /* lookahead token as an internal (translated)
			   Token number */
    protected int yynerrs; /* number of parse errors so far */
    protected int yydebug; /* nonzero means print parse trace */
    protected int yyerrstatus;	/* number of tokens to shift before error
			   messages enabled */
    public int yyshiftcount = 3; // default tokens to shift

    protected YYLocation loc;    // shared loc
    protected YYLocation yylbeg; // beg of current lexeme
    protected YYLocation yylend; // end of current lexeme

    protected IMutableContext outer_cxt;

    public YYLocation tmploc = new YYLocation(); // auxiliary

    public Object yylval; // the semantic value of the lookahead symbol
    protected Object yyval;   // the variable used to return semantic values
			 	// from the action routines
    protected boolean yyerrthrow; /* t=>yyerror should throw ParseException;
				     f=>just return and let normal error
					recovery operate; default is false;*/
    protected LexException yylexexception;

    protected Int_Stack yyss;
    protected Object_Stack yyvs;
    protected YYLocationStack yyls;

    protected Lexer yylex;
    protected java.io.PrintWriter yyerr;

    //protected int yymode;
    protected int lexmode;

    boolean isNowParsing; // check if recurrent invocation
    EmbeddedParser nextParser; // if recurrent, new instance will be created

// PROCS

final int YYTRANSLATE(int x)
	{ return ((x) <= 348 ? yytranslate[x] : 223);}


    // default constructor for newInstance()
    public EmbeddedParser() {
	yyss = new Int_Stack();
	yyvs = new Object_Stack();
	yyls = new YYLocationStack();
	yylval = null;
	yylbeg = new YYLocation();
	yylend = new YYLocation();
	yydebug = 0;
	yyerrthrow = false;
	yylexexception = null;
	isNowParsing = false;
	nextParser = null;
    }

    public EmbeddedParser(Lexer yyl, java.io.PrintWriter ferr) {
	this();
	_init(yyl, ferr);
    }

    protected void _init(Lexer yyl, java.io.PrintWriter ferr) {
	yylex = yyl;
	yyerr = ferr;
	loc = yylex.loc();
    }

    public int yyparse(IMutableContext cxt, YYResultReceiver resrecv)//, int mode)
            throws ParseException {
	if (isNowParsing) { // recursive call; need another parser instance
	    if (nextParser == null) {
		(nextParser = new EmbeddedParser(yylex, yyerr)).setdebug(yydebug);
	    }
	    return nextParser.yyparse(cxt, resrecv);//, mode);
	} else {
	    isNowParsing = true;
	    this.outer_cxt = cxt;
	    //this.yymode = mode;
	    this.lexmode = getInitialLexMode();//yymode);
	    yylbeg.copyFrom(loc);
	    yylend.copyFrom(loc);
	    if (yydebug > 0) yyprint("\n****** Running new parser for embedded Java ******\n");
	    int yyresult = _parse();
	    if (yydebug > 0) yyprint("****** Parser for embedded Java finished    ******\n\n");
	    resrecv.setYYlval(this.yyval);
	    isNowParsing = false;
	    return yyresult;
	}
    }

    int _parse() throws ParseException {
	int ok;
	yychar1 = 0;  /* lookahead Token as an internal (translated) */
	yystate = 0;
	yyerrstatus = 0;
	yynerrs = 0;
	yychar = YYEMPTY;  /* Cause a Token to be read.  */
	yyval = null;
	Goto = yynewstate;

	/* Initialize stack pointers.
	   Waste one element of value and location stack
	   so that they stay on the same level as the state stack.
	   The wasted elements are never initialized.  */

	yyss.clear();
	yyvs.clear();
	yyls.clear();

	/* need to push a null value to match state 0 */
	yyvs.push(null);

	if (yydebug > 0) yyprint("Starting parse\n");

	/* Push a new state, which is found in	yystate	 .  */
	/* In all cases, when you get here, the value and location stacks
	   have just been pushed. so pushing a state here evens the stacks.  */
	for(;;) {
	branch: switch (Goto) {

	case yynewstate:

	    yyss.push(yystate);

	    if (yydebug > 0) {
		yyprint("Entering state ");
		yyprint(yystate);
		yyprint("\n");
	    }

	case yybackup:

	    /* Do appropriate processing given the current state.  */
	    /* Read a lookahead token if we need one and don't already have one.  */
	    /* yyresume: */

	    /* First try to decide what to do without reference to lookahead token.  */

	    yyn = yypact[yystate];
	    if (yyn == YYFLAG) {
		Goto = yydefault;
		break branch;
	    }

	    /* Not known => get a lookahead token if don't already have one.  */

	    /* yychar is either YYEMPTY or YYEOF
	       or a valid token in external form.	 */

	    if (yychar == YYEMPTY) {
		if (yydebug > 0) yyprint("Reading a token: ");
		try {
		    // yylval = yylex.yylex();
		    yychar = yylex.yylex(cxt, this.lexmode);
		    yylval = yylex.yylval();
		} catch (LexException le) {
		    yyprintln("yyparse: LexException: " + le);
		    yylexexception = le;
		    // on lex error, treat like a syntax error
		    Goto = yyerrlab; break branch;
		}
	    }

	    /* Convert token to internal form (in yychar1) for indexing tables with */

	    if (yychar <= 0) {	        /* This means end of input. */
		yychar1 = 0;
		yychar = YYEOF;		/* Don't call YYLEX any more */
		if (yydebug > 0) yyprint("Now at end of input.\n");
	    } else {
		yychar1 = YYTRANSLATE(yychar);
		if (yydebug >= 10) {
		    yyprint("Next token is ");
		    yyprint(yychar);
		    yyprint(" (");
		    yyprint(yytname[yychar1]);
		    yyprint(")\n");
		}
	    }

	    yyn += yychar1;
	    if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1) {
		Goto = yydefault; break branch;
	    }

	    yyn = yytable[yyn];

	    /* yyn is what to do for this token type in this state.
	       Negative => reduce, -yyn is rule number.
	       Positive => shift, yyn is new state.
	       New state is final state => don't bother to shift,
	       just return success.
	       0, or most negative number => error.  */

	    if (yyn < 0) {
		if (yyn == YYFLAG) {
		    Goto = yyerrlab; break branch;
		}
		yyn = -yyn;
		Goto = yyreduce; break branch;
	    } else if (yyn == 0) {
		Goto = yyerrlab; break branch;
	    }

	    if (yyn == YYFINAL) return YYACCEPT;

	    /* Shift the lookahead token.	 */

	    if (yydebug > 0) {
		yyprint("Shifting token ");
		yyprint(yychar);
		yyprint(" (");
		yyprint(yytname[yychar1]);
		yyprint("), ");
	    }

	    /* Discard the token being shifted unless it is eof.	*/
	    if (yychar != YYEOF) yychar = YYEMPTY;

	    yyvs.push(yylval);
	    yylend.copyFrom(loc);
	    yyls.push(yylex.tokenloc());
	    yylbeg.copyFrom(yylex.loc());

	    /* count tokens shifted since error; after three, turn off error status.  */
	    if (yyerrstatus > 0) yyerrstatus--;

	    yystate = yyn;
	    Goto = yynewstate; break branch;

	    /* Do the default action for the current state.	 */
	case yydefault:

	    yyn = yydefact[yystate];
	    if (yyn == 0) {
		Goto = yyerrlab; break branch;
	    }

	    /* Do a reduction.  yyn is the number of a rule to reduce with.	 */
	case yyreduce:
	    yylen = yyr2[yyn];
	    if (yylen > 0) {
		yyval = yyvs.tth(1-yylen); /* implement default value of the action */
		yylbeg = yyls.tth(1-yylen, yylbeg); /* DK */
	    }
	    if (yydebug > 0) {
		int i;
		lstackdump("location stack now"); /* DK */
		yyprint("Reducing via rule ");
		yyprint(yyn);
		yyprint(" (line ");
		yyprint(yyrline[yyn]);
		yyprint("), ");
		/* Print the symbols being reduced, and their result.  */
		for (i = yyprhs[yyn]; yyrhs[i] > 0; i++) {
		    yyprint(yytname[yyrhs[i]]);
		    yyprint(" ");
		}
		yyprint(" -> ");
		yyprint(yytname[yyr1[yyn]]);
		yyprint(" " + lbeg() + " <--> " + lend()); /* DK */
		yyprint("\n");
	    }

	    /*$*/	/* the action file gets copied in in place of this dollarsign */

	    /* Provide a way to avoid having return statements in the actions
	       and so avoid "statement not reached" errors"
	    */
	    yyreturn = YYCONTINUE;

	    switch (yyn) {

case 1:
{;
    break;}
case 2:
{;
    break;}
case 3:
{ yyval = ((YYStatement)(yyvs.tth(0))); yyclearin(); yyreturn(YYRET_STATEMENTS); ;
    break;}
case 4:
{ yyval = ((YYStatement)(yyvs.tth(0))); yyclearin(); yyreturn(YYRET_ENCLOSED_STATEMENTS); ;
    break;}
case 5:
{ yyval = ((YYExpression)(yyvs.tth(0))); yyclearin(); yyreturn(YYRET_EXPRESSION); ;
    break;}
case 6:
{ yyval = null; yyclearin(); yyreturn(YYRET_EPSILON); ;
    break;}
case 7:
{ yyval = new YYStatement(cxt, false).add(((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 8:
{ yyval = ((YYStatement)(yyvs.tth(-1))).add(((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 9:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(0))); ;
    break;}
case 11:
{ yyval = ((YYStatement)(yyvs.tth(0))); ;
    break;}
case 12:
{ yyval = ((YYStatement)(yyvs.tth(-1))).add(((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 15:
{ yyval = new YYIntegerLiteral(cxt, yytext()); ;
    break;}
case 16:
{ yyval = new YYLongLiteral(cxt, yytext()); ;
    break;}
case 17:
{ yyval = new YYFloatLiteral(cxt, yytext()); ;
    break;}
case 18:
{ yyval = new YYDoubleLiteral(cxt, yytext()); ;
    break;}
case 19:
{ yyval = new YYBooleanLiteral(cxt, yytext()); ;
    break;}
case 20:
{ yyval = new YYStringLiteral(cxt, ((String)(yyvs.tth(0)))); ;
    break;}
case 21:
{ yyval = new YYCharacterLiteral(cxt, ((Character)(yyvs.tth(0)))); ;
    break;}
case 22:
{ yyval = new YYNullLiteral(cxt); ;
    break;}
case 25:
{ yyval = new YYType(cxt, byte.class); ;
    break;}
case 26:
{ yyval = new YYType(cxt, short.class); ;
    break;}
case 27:
{ yyval = new YYType(cxt, int.class); ;
    break;}
case 28:
{ yyval = new YYType(cxt, long.class); ;
    break;}
case 29:
{ yyval = new YYType(cxt, char.class); ;
    break;}
case 30:
{ yyval = new YYType(cxt, float.class); ;
    break;}
case 31:
{ yyval = new YYType(cxt, double.class); ;
    break;}
case 32:
{ yyval = new YYType(cxt, boolean.class); ;
    break;}
case 35:
{ yyval = ((YYName)(yyvs.tth(0))).reclassifyAsType(); ;
    break;}
case 37:
{ yyval = ((YYType)(yyvs.tth(-1))).addDims(cxt, ((YYDims)(yyvs.tth(0))).dims()); ;
    break;}
case 38:
{ yyval = ((YYName)(yyvs.tth(-1))).reclassifyAsType().addDims(cxt, ((YYDims)(yyvs.tth(0))).dims()); ;
    break;}
case 39:
{ yyval = new YYName(cxt).add(((YYNameNode)(yyvs.tth(0)))); ;
    break;}
case 40:
{ yyval = ((YYName)(yyvs.tth(-2))).add(((YYNameNode)(yyvs.tth(0)))); ;
    break;}
case 41:
{ yyval = new YYNameNode(cxt, ((String)(yyvs.tth(0)))); ;
    break;}
case 42:
{ yyval = new YYModifierList(cxt).add(((YYModifier)(yyvs.tth(0)))); ;
    break;}
case 43:
{ yyval = ((YYModifierList)(yyvs.tth(-1))).add(((YYModifier)(yyvs.tth(0)))); ;
    break;}
case 44:
{ yyval = new YYModifier(cxt, Modifier.FINAL); ;
    break;}
case 45:
{ yyval = new YYModifier(cxt, Modifier.PUBLIC); ;
    break;}
case 46:
{ yyval = new YYModifier(cxt, Modifier.VOLATILE); ;
    break;}
case 47:
{ yyval = new YYVariableDeclaratorList(cxt).add(((YYVariableDeclarator)(yyvs.tth(0)))); ;
    break;}
case 48:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(-2))).add(((YYVariableDeclarator)(yyvs.tth(0)))); ;
    break;}
case 50:
{ yyval = ((YYVariableDeclarator)(yyvs.tth(-2))).setInitializer(((YYExpression)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 51:
{ yyval = new YYVariableDeclarator(cxt, ((String)(yyvs.tth(0))), false); ;
    break;}
case 52:
{ yyval = new YYVariableDeclarator(cxt, ((String)(yyvs.tth(-1))), false).addDims(((YYDims)(yyvs.tth(0))).dims()); ;
    break;}
case 54:
{ notSupported(cxt, "array initializers"); ;
    break;}
case 55:
{ yyval = ((YYVariableDeclarator)(yyvs.tth(0))).setModifiers(((YYModifierList)(yyvs.tth(-2)))).setType(((YYType)(yyvs.tth(-1)))).expand(cxt); ;
    break;}
case 56:
{ yyval = ((YYVariableDeclarator)(yyvs.tth(0))).setType(((YYType)(yyvs.tth(-1)))).expand(cxt); ;
    break;}
case 62:
{ notSupported(cxt, "array initializers"); ;
    break;}
case 63:
{ notSupported(cxt, "array initializers"); ;
    break;}
case 64:
{ pushScope(new YYStatement(cxt, false, true)); ;
    break;}
case 65:
{ yyval = ((YYStatement)popScope()).expand(cxt); ;
    break;}
case 66:
{ yyval = peekScope(); ;
    break;}
case 68:
{ yyval = ((YYStatement)(yyvs.tth(-1))).expand(cxt); ;
    break;}
case 69:
{ lexmode = Lexer.NATIVE_BLOCK; ;
    break;}
case 70:
{ lexmode = Lexer.JAVA_TOKEN; yyval = new YYEnclosedNativeStatements(cxt, ((YYNativeCode)(yyvs.tth(0)))); ;
    break;}
case 73:
{ yyval = ((YYStatement)peekScope()).add(((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 74:
{ yyval = ((YYStatement)(yyvs.tth(-1))).add(((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 77:
{ yyval = new YYEnclosedNativeStatements(cxt, ((YYNativeCode)(yyvs.tth(-2)))); ;
    break;}
case 78:
{ yyval = new YYEnclosedNativeStatements(cxt, ((YYNativeCode)(yyvs.tth(-1)))); ;
    break;}
case 79:
{ lexmode = Lexer.NATIVE_STATEMENTS; ;
    break;}
case 80:
{ lexmode = Lexer.JAVA_TOKEN; ;
    break;}
case 81:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(-1))).expand(cxt); addVariables(((YYVariableDeclaratorList)(yyvs.tth(-1)))); ;
    break;}
case 82:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(0))).setModifiers(((YYModifierList)(yyvs.tth(-2)))).setType(((YYType)(yyvs.tth(-1))))
                                                            .setDeclarationType(YYVariableDeclarator.LOCAL_VARIABLE); ;
    break;}
case 83:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(0))).setType(((YYType)(yyvs.tth(-1))))
                                                            .setDeclarationType(YYVariableDeclarator.LOCAL_VARIABLE); ;
    break;}
case 86:
{ yyval = ((YYStatement)(yyvs.tth(0))); ;
    break;}
case 91:
{ yyval = new YYStatement(cxt); ;
    break;}
case 92:
{ yyval = new YYExpressionStatement(cxt, ((YYExpression)(yyvs.tth(-1)))); ;
    break;}
case 93:
{ yyval = new YYThrowStatement(cxt, ((YYExpression)(yyvs.tth(-1)))); ;
    break;}
case 94:
{ yyval = new YYSynchronizedStatement(cxt, ((YYExpression)(yyvs.tth(-1))), ((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 95:
{ yyval = new YYSynchronizedStatement(cxt, ((YYExpression)(yyvs.tth(-1))), ((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 96:
{ yyval = new YYTryStatement(cxt, ((YYStatement)(yyvs.tth(-1)))).addCatches(((YYStatement)(yyvs.tth(0))));                ;
    break;}
case 97:
{ yyval = new YYTryStatement(cxt, ((YYStatement)(yyvs.tth(-2)))).addCatches(((YYStatement)(yyvs.tth(-1)))).addFinally(((YYFinally)(yyvs.tth(0)))); ;
    break;}
case 98:
{ yyval = new YYTryStatement(cxt, ((YYStatement)(yyvs.tth(-1))))               .addFinally(((YYFinally)(yyvs.tth(0)))); ;
    break;}
case 99:
{ yyval = new YYTryStatement(cxt, ((YYStatement)(yyvs.tth(-1)))).addCatches(((YYStatement)(yyvs.tth(0))));                ;
    break;}
case 100:
{ yyval = new YYTryStatement(cxt, ((YYStatement)(yyvs.tth(-2)))).addCatches(((YYStatement)(yyvs.tth(-1)))).addFinally(((YYFinally)(yyvs.tth(0)))); ;
    break;}
case 101:
{ yyval = new YYTryStatement(cxt, ((YYStatement)(yyvs.tth(-1))))               .addFinally(((YYFinally)(yyvs.tth(0)))); ;
    break;}
case 102:
{ yyval = new YYStatement(cxt, false).add(((YYCatchClause)(yyvs.tth(0)))); ;
    break;}
case 103:
{ yyval = ((YYStatement)(yyvs.tth(-1))).add(((YYCatchClause)(yyvs.tth(0)))); ;
    break;}
case 104:
{ yyval = ((YYCatchClause)popScope()).setBody(((YYStatement)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 105:
{ yyval = new YYStatement(cxt, false).add(((YYCatchClause)(yyvs.tth(0)))); ;
    break;}
case 106:
{ yyval = ((YYStatement)(yyvs.tth(-1))).add(((YYCatchClause)(yyvs.tth(0)))); ;
    break;}
case 107:
{ yyval = ((YYCatchClause)popScope()).setBody(((YYStatement)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 108:
{ pushScope(new YYCatchClause(cxt)); ;
    break;}
case 109:
{ ((YYVariableDeclarator)(yyvs.tth(0))).setDeclarationType(YYVariableDeclarator.CATCH_PARAMETER);
                                  addVariable(((YYVariableDeclarator)(yyvs.tth(0)))); ((YYCatchClause)peekScope()).setFormalParameter(((YYVariableDeclarator)(yyvs.tth(0)))); ;
    break;}
case 111:
{ yyval = new YYFinally(cxt, ((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 112:
{ yyval = new YYFinally(cxt, ((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 113:
{ yyval = new YYReturnStatement(cxt, null); ;
    break;}
case 114:
{ yyval = new YYReturnStatement(cxt, ((YYExpression)(yyvs.tth(-1)))); ;
    break;}
case 117:
{ yyval = ((YYExpression)(yyvs.tth(-1))).expand(cxt); ;
    break;}
case 118:
{ yyval = ((YYExpression)(yyvs.tth(0))); ;
    break;}
case 119:
{ yyval = new YYThis(cxt, YYThis.THIS); ;
    break;}
case 122:
{ yyval = ((YYExpression)(yyvs.tth(0))); ;
    break;}
case 124:
{ yyval = ((YYExpression)(yyvs.tth(0))); ;
    break;}
case 125:
{ notSupported(cxt, "inner classes"); ;
    break;}
case 126:
{ notSupported(cxt, "class literal (obj.class)"); ;
    break;}
case 129:
{ lexmode = Lexer.NATIVE_EXPRESSION; ;
    break;}
case 130:
{ lexmode = Lexer.JAVA_TOKEN; ;
    break;}
case 131:
{ yyval = new YYEnclosedNativeExpression(cxt, ((YYNativeCode)(yyvs.tth(-2)))); ;
    break;}
case 132:
{ lexmode = Lexer.NATIVE_STRING; ;
    break;}
case 133:
{ lexmode = Lexer.JAVA_TOKEN; ;
    break;}
case 134:
{ yyval = new YYEnclosedNativeString(cxt, ((YYNativeCode)(yyvs.tth(-2)))); ;
    break;}
case 135:
{ lexmode = Lexer.NATIVE_UNICODE_STRING; ;
    break;}
case 136:
{ lexmode = Lexer.JAVA_TOKEN; ;
    break;}
case 137:
{ yyval = new YYEnclosedNativeString(cxt, ((YYNativeCode)(yyvs.tth(-2))), true); ;
    break;}
case 138:
{ notSupported(cxt, "class literal (obj.class)"); ;
    break;}
case 139:
{ notSupported(cxt, "class literal (obj.class)"); ;
    break;}
case 140:
{ notSupported(cxt, "class literal (obj.class)"); ;
    break;}
case 141:
{ notSupported(cxt, "class literal (obj.class)"); ;
    break;}
case 142:
{ yyval = new YYClassInstanceCreationExpression(cxt, ((YYType)(yyvs.tth(-1))), ((YYExpressionList)(yyvs.tth(0)))); ;
    break;}
case 143:
{ notSupported(cxt, "inner classes"); ;
    break;}
case 144:
{ yyval = new YYExpressionList(cxt).add(((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 145:
{ yyval = ((YYExpressionList)(yyvs.tth(-2))).add(((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 146:
{ yyval = ((YYExpressionList)(yyvs.tth(-1))).expand(cxt); ;
    break;}
case 147:
{ yyval = new YYExpressionList(cxt); ;
    break;}
case 148:
{ yyval = new YYArrayCreationExpression(cxt, ((YYType)(yyvs.tth(-2))), ((YYExpressionList)(yyvs.tth(-1))), ((YYDims)(yyvs.tth(0))).dims()); ;
    break;}
case 149:
{ yyval = new YYArrayCreationExpression(cxt, ((YYType)(yyvs.tth(-1))), ((YYExpressionList)(yyvs.tth(0))), 0); ;
    break;}
case 150:
{ notSupported(cxt, "array creation expression with initializer"); ;
    break;}
case 151:
{ yyval = new YYArrayCreationExpression(cxt, ((YYType)(yyvs.tth(-2))), ((YYExpressionList)(yyvs.tth(-1))), ((YYDims)(yyvs.tth(0))).dims()); ;
    break;}
case 152:
{ yyval = new YYArrayCreationExpression(cxt, ((YYType)(yyvs.tth(-1))), ((YYExpressionList)(yyvs.tth(0))), 0); ;
    break;}
case 153:
{ notSupported(cxt, "array creation expression with initializer"); ;
    break;}
case 154:
{ yyval = new YYExpressionList(cxt).add(((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 155:
{ yyval = ((YYExpressionList)(yyvs.tth(-1))).add(((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 156:
{ yyval = ((YYExpression)(yyvs.tth(-1))).expand(cxt); ;
    break;}
case 157:
{ yyval = new YYDims(cxt).addDim(cxt); ;
    break;}
case 158:
{ yyval = ((YYDims)(yyvs.tth(-2))).addDim(cxt); ;
    break;}
case 159:
{ yyval = new YYThis(cxt, YYThis.SUPER); ;
    break;}
case 160:
{ yyval = new YYFieldAccessExpression(cxt, ((YYExpression)(yyvs.tth(-2))), ((String)(yyvs.tth(0)))); ;
    break;}
case 161:
{ yyval = new YYFieldAccessExpression(cxt, ((YYThis)(yyvs.tth(-2))), ((String)(yyvs.tth(0)))); ;
    break;}
case 162:
{ yyval = ((YYMethodInvocationExpression)(yyvs.tth(-1))).addArguments(((YYExpressionList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 163:
{ yyval = ((YYName)(yyvs.tth(0))).reclassifyAsMethodInvocation(cxt); ;
    break;}
case 164:
{ yyval = new YYMethodInvocationExpression(cxt, ((YYExpression)(yyvs.tth(-2))), ((String)(yyvs.tth(0)))); ;
    break;}
case 165:
{ yyval = new YYMethodInvocationExpression(cxt, ((YYThis)(yyvs.tth(-2))), ((String)(yyvs.tth(0)))); ;
    break;}
case 166:
{ yyval = new YYArrayAccessExpression(cxt, ((YYName)(yyvs.tth(-1))).reclassifyAsExpression(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 167:
{ yyval = new YYArrayAccessExpression(cxt, ((YYExpression)(yyvs.tth(-1))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 169:
{ yyval = ((YYName)(yyvs.tth(0))).reclassifyAsExpression(cxt); ;
    break;}
case 172:
{ notSupported(cxt, "operator ++"); ;
    break;}
case 173:
{ notSupported(cxt, "operator --"); ;
    break;}
case 176:
{ yyval = ((YYExpression)(yyvs.tth(0))); ;
    break;}
case 177:
{ notSupported(cxt, "unary minus operator"); ;
    break;}
case 178:
{ yyval = new YYPtrFetchExpression(cxt, ((YYExpression)(yyvs.tth(0))), false); ;
    break;}
case 179:
{ yyval = new YYPtrFetchExpression(cxt, ((YYExpression)(yyvs.tth(0))), true); ;
    break;}
case 181:
{ notSupported(cxt, "++ operator"); ;
    break;}
case 182:
{ notSupported(cxt, "-- operator"); ;
    break;}
case 184:
{ notSupported(cxt, "~ operator"); ;
    break;}
case 185:
{ notSupported(cxt, "! operator"); ;
    break;}
case 187:
{ yyval = new YYCastExpression(cxt, ((YYType)(yyvs.tth(-3))).addDims(cxt, ((YYDims)(yyvs.tth(-2))).dims()), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 188:
{ yyval = new YYCastExpression(cxt, ((YYType)(yyvs.tth(-2))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 189:
{ yyval = new YYCastExpression(cxt, ((YYExpression)(yyvs.tth(-2))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 190:
{ yyval = new YYCastExpression(cxt, ((YYName)(yyvs.tth(-3))).reclassifyAsType().addDims(cxt, ((YYDims)(yyvs.tth(-2))).dims()), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 192:
{ yyval = new YYBinaryExpression(cxt, ((YYExpression)(yyvs.tth(-2))), new BinaryOperator.Multiply(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 193:
{ yyval = new YYBinaryExpression(cxt, ((YYExpression)(yyvs.tth(-2))), new BinaryOperator.Divide(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 194:
{ yyval = new YYBinaryExpression(cxt, ((YYExpression)(yyvs.tth(-2))), new BinaryOperator.Remainder(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 196:
{ yyval = new YYBinaryExpression(cxt, ((YYExpression)(yyvs.tth(-2))), new BinaryOperator.Plus(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 197:
{ yyval = new YYBinaryExpression(cxt, ((YYExpression)(yyvs.tth(-2))), new BinaryOperator.Minus(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 199:
{ yyval = new YYBinaryExpression(cxt, ((YYExpression)(yyvs.tth(-2))), new BinaryOperator.LShift(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 200:
{ yyval = new YYBinaryExpression(cxt, ((YYExpression)(yyvs.tth(-2))), new BinaryOperator.RShift(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 201:
{ yyval = new YYBinaryExpression(cxt, ((YYExpression)(yyvs.tth(-2))), new BinaryOperator.LogRShift(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 203:
{ yyval = new YYRelationalExpression(cxt, YYRelationalExpression.LS, ((YYExpression)(yyvs.tth(-2))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 204:
{ yyval = new YYRelationalExpression(cxt, YYRelationalExpression.GT, ((YYExpression)(yyvs.tth(-2))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 205:
{ yyval = new YYRelationalExpression(cxt, YYRelationalExpression.LE, ((YYExpression)(yyvs.tth(-2))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 206:
{ yyval = new YYRelationalExpression(cxt, YYRelationalExpression.GE, ((YYExpression)(yyvs.tth(-2))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 207:
{ yyval = new YYInstanceOfExpression(cxt, ((YYExpression)(yyvs.tth(-2))), ((YYType)(yyvs.tth(0)))); ;
    break;}
case 209:
{ yyval = new YYRelationalExpression(cxt, YYRelationalExpression.EQ, ((YYExpression)(yyvs.tth(-2))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 210:
{ yyval = new YYRelationalExpression(cxt, YYRelationalExpression.NE, ((YYExpression)(yyvs.tth(-2))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 212:
{ yyval = new YYBinaryExpression(cxt, ((YYExpression)(yyvs.tth(-2))), new BinaryOperator.And(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 214:
{ yyval = new YYBinaryExpression(cxt, ((YYExpression)(yyvs.tth(-2))), new BinaryOperator.XOr(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 216:
{ yyval = new YYBinaryExpression(cxt, ((YYExpression)(yyvs.tth(-2))), new BinaryOperator.Or(cxt), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 218:
{ yyval = new YYConditionalExpression(cxt, YYConditionalExpression.AND, ((YYExpression)(yyvs.tth(-2))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 220:
{ yyval = new YYConditionalExpression(cxt, YYConditionalExpression.OR, ((YYExpression)(yyvs.tth(-2))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 222:
{ notSupported(cxt, "?: operator"); ;
    break;}
case 224:
{ yyval = ((YYAssignmentExpression)(yyvs.tth(0))); ;
    break;}
case 225:
{ yyval = new YYAssignmentExpression(cxt, ((YYExpression)(yyvs.tth(-2))), ((BinaryOperator)(yyvs.tth(-1))), ((YYExpression)(yyvs.tth(0)))); ;
    break;}
case 226:
{ yyval = ((YYName)(yyvs.tth(0))).reclassifyAsExpression(cxt); ;
    break;}
case 229:
{ yyval = null; ;
    break;}
case 230:
{ yyval = new BinaryOperator.Multiply(cxt); ;
    break;}
case 231:
{ yyval = new BinaryOperator.Divide(cxt); ;
    break;}
case 232:
{ yyval = new BinaryOperator.Remainder(cxt); ;
    break;}
case 233:
{ yyval = new BinaryOperator.Plus(cxt); ;
    break;}
case 234:
{ yyval = new BinaryOperator.Minus(cxt); ;
    break;}
case 235:
{ yyval = new BinaryOperator.LShift(cxt); ;
    break;}
case 236:
{ yyval = new BinaryOperator.RShift(cxt); ;
    break;}
case 237:
{ yyval = new BinaryOperator.LogRShift(cxt); ;
    break;}
case 238:
{ yyval = new BinaryOperator.And(cxt); ;
    break;}
case 239:
{ yyval = new BinaryOperator.XOr(cxt); ;
    break;}
case 240:
{ yyval = new BinaryOperator.Or(cxt); ;
    break;}
}



	    if(yyreturn == YYERROR) {
		Goto = yyerrlab1; break branch;
	    } else if(yyreturn != YYCONTINUE) { yylex.skipWhites(); return yyreturn; }

	    yyvs.popn(yylen);
	    yyss.popn(yylen);
	    /* yyls.popn(yylen); */

	    yyvs.push(yyval);
	    /*  yylsp++;*/
	    if (yylen == 0) {
		yyls.push(yylbeg);
	    } else {
		yyls.popn(yylen-1);
	    }

	    if (yydebug > 0) {
		stackdump("state stack now");
		lstackdump("location stack now");
	    }

	    /* Now "shift" the result of the reduction.
	       Determine what state that goes to,
	       based on the state we popped back to
	       and the rule number reduced by.  */

	    yyn = yyr1[yyn];

	    yystate = yypgoto[yyn - YYNTBASE] + yyss.peek();
	    if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == yyss.peek()) {
		yystate = yytable[yystate];
	    } else {
		yystate = yydefgoto[yyn - YYNTBASE];
	    }

	    Goto = yynewstate; break branch;

	case yyerrlab:	 /* here on detecting error */

	    if (yyerrstatus == 0) {
		/* If not already recovering from an error, report this error.  */
		++yynerrs;
		parseError("parse error");
	    }

	case yyerrlab1:	  /* here on error raised explicitly by an action */

	    if (yyerrstatus == yyshiftcount) {
		/* if just tried and failed to reuse lookahead token
		   after an error, discard it.	*/
		/* return failure if at end of input */
		if (yychar == YYEOF) {
		    if(yydebug > 0)
			yyprint("EOF during error recovery; aborting.");
		    return YYABORT;
		}

		if (yydebug > 0) {
		    yyprint("Discarding token ");
		    yyprint(yychar);
		    yyprint(" (");
		    yyprint(yytname[yychar1]);
		    yyprint(").\n");
		}
		yychar = YYEMPTY;
	    }

	    /* Else will try to reuse lookahead token
	       after shifting the error token.  */

	    yyerrstatus = yyshiftcount;	/* Each real token shifted decrements this */

	    Goto = yyerrhandle; break branch;

	case yyerrdefault:  /* state does notthing special for the error token. */
	case yyerrpop:	 /* pop the current state because it cannot handle the error token */

	    yyvs.popn(1);
	    yyss.pop();
	    if (yyss.empty()) {
		if(yydebug > 0)
		    yyprint("Empty stack during error recovery; aborting.");
		return YYABORT;
	    }
	    yystate = yyss.top();
	    yyls.popn(1);

	    if (yydebug > 0) {
		stackdump("Error: state stack now");
		lstackdump("Error: location stack now");
	    }

	case yyerrhandle:

	    yyn = yypact[yystate];
	    if (yyn == YYFLAG) {
		Goto = yyerrdefault; break branch;
	    }

	    yyn += YYTERROR;
	    if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR) {
		Goto = yyerrdefault; break branch;
	    }

	    yyn = yytable[yyn];
	    if (yyn < 0) {
		if (yyn == YYFLAG) {
		    Goto = yyerrpop; break branch;
		}
		yyn = -yyn;
		Goto = yyreduce; break branch;
	    } else if (yyn == 0) {
		Goto = yyerrpop; break branch;
	    }
	    if (yyn == YYFINAL) return YYACCEPT;

	    if (yydebug > 0) {
		yyprint("Shifting error token, ");
	    }

	    yyvs.push(yylval);
	    yylend.copyFrom(loc);
	    yyls.push(yylex.tokenloc());
	    yylbeg.copyFrom(yylex.loc());

	    yystate = yyn;
	    Goto = yynewstate; break branch;

	}//switch
	}//for(;;)

    } // parse

    public void yyclearin() {
	if (yychar != YYEMPTY) {
	    loc.copyFrom(yylend);
	    yylval = null;
	    yychar = YYEMPTY;
	}
    }

    public String yyerror_verbose(String msg0) throws ParseException {
	yyn = yypact[yystate];
	if(yyn > YYFLAG && yyn < YYLAST) {
	    int size = msg0.length();
	    StringBuffer msg;
	    int yychar1; // a TRANSLATEd char value
	    int count;
	    count = 0;

	    /* Start yychar1 at -yyn if nec to avoid negative indexes in yycheck.*/
	    for (yychar1 = (yyn < 0 ? -yyn : 0);
		 (yyn+yychar1) < (yytname.length);
		 yychar1++) {
		if((yyn+yychar1) < yycheck.length
		   && yycheck[yyn+yychar1] == yychar1) {
		    size += (yytname[yychar1].length()) + 15;
		    count++;
		}
	    }
	    msg = new StringBuffer(size+15);
	    msg.append(msg0);
	    msg.append("(state " + Integer.toString(yystate) + ")");
	    yychar1 = (yyn < 0)? - yyn :0;
	    for(count=0,yychar1 = (yyn < 0 ? -yyn : 0);
		(yyn+yychar1) < (yytname.length) && count < 5;
		yychar1++) {
		if((yyn+yychar1) < yycheck.length
		   && yycheck[yyn+yychar1] == yychar1) {
		    msg.append(count == 0 ? ", expecting " : " or ");
		    msg.append(yytname[yychar1]);
		    count++;
		}
	    }
	    return msg.toString();
	}
	return msg0;
    }

    public void yyerror(String msg, boolean verbose, boolean dumpstack)
            throws ParseException {
	String s;
	if(verbose) {
	    s = yyerror_verbose(msg);
	} else {
	    s = msg;
	}
	yyprint("yyerror: ");
	if(yychar == YYEOF) {
	    yyprint("at end of file");
	    yyprintln(" ; " + s);
	} else {
	    YYlocation loc = yylex.tokenloc();
	    yyprint("line ");
	    yyprint(loc.lineno()+1);
	    yyprint(" char ");
	    int cno = loc.charno();
	    yyprint(cno+1);
	    yyprintln(" token=|"+yytext()+"| ; "+ s);
	    String line = yyline();
	    if(line != null) {
		if(cno >= line.length()) cno = line.length();
		if(line.charAt(line.length()-1) == EOL)
		    yyprint(line);
		else
		    yyprintln(line);

		// for(int i=0;i<cno;i++) yyprint(" ");
		/* Modified by Dawid Kurzyniec, February 2000 */
		for (int i=0; i<cno; i++) {
		    char c = line.charAt(i);
		    if (Character.isWhitespace(c)) // e.g. \t
			yyprint("" + c);
		    else
			yyprint(" ");
		}

		yyprintln("^");
	    }
	}
	if(dumpstack) { stackdump("yyerror: state stack"); }
	if(yyerrthrow) throw new ParseException(s);
    }

    public void yyerror(String s, boolean verbose) throws ParseException {
	yyerror(s, verbose, false);
    }

    public void yyerror(String s) throws ParseException {
	yyerror(s, false, false);
    }

    public void yyreturn(int t) { yyreturn = t; }

    public void YYERROR() { yyreturn(YYERROR); }
    public void yyerrok() { yyerrstatus = 0; }
    public boolean YYRECOVERING() { return (yyerrstatus != 0); }

    public void setdebug(boolean i) { yydebug = i ? 1:0; }
    public void setdebug(int i) { yydebug = i > 0 ? i:0; }
    public void seterrthrow(boolean b) { yyerrthrow = b; }

    protected void stackdump(String s) {
	int i;
	int x;
	int ssp1 = yyss.depth();
	yyprint(s);
	if(ssp1 == 0) {
	    yyprint("<empty>");
	} else {
	    for(i=0;i<ssp1;i++) {
		x = yyss.ith(i);
		yyprint(" ");
		yyprint(x);
	    }
	}
	yyprint("\n");
    }

    protected void lstackdump(String s) {
	int i;
	int lsp1 = yyls.size();
	yyprint(s);
	if(lsp1 == 0) {
	    yyprint("<empty>");
	} else {
	    for(i=0;i<lsp1;i++) {
		YYLocation x = yyls.ith(i, tmploc);
		yyprint("  ");
		yyprint("" + x);
	    }
	    yyprint("  <-->  " + yylend);
	}
	yyprint("\n");
    }

    public String yyline() { return yylex.yyline(); }

    public StringBuffer yytext() { return yylex.yytext(); }

    //    public YYlocation currentloc() { return yylex.currentloc(); }
    //    public YYlocation tokenloc() { return yylex.tokenloc(); }

    public final pl.edu.agh.icsr.janet.YYLocation loc() { return loc; }
    public final pl.edu.agh.icsr.janet.YYLocation lbeg() { return yylbeg; }
    public final pl.edu.agh.icsr.janet.YYLocation lend() { return yylend; }
    public final pl.edu.agh.icsr.janet.YYLocation loc(int pos) { return yyls.tth(pos-yylen); }

    protected void yyprint(Object x) { yyerr.print(x); yyerr.flush(); }
    protected void yyprintln(Object x) { yyerr.println(x); yyerr.flush(); }
    protected void yyprint(int x) { yyerr.print(x); yyerr.flush(); }
    protected void yyprintln(int x) { yyerr.println(x); yyerr.flush(); }

// TABLES

static public final int yytranslate[] = create$yytranslate();
private static int[] create$yytranslate() { return new int[] {
     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   109,     2,     2,     2,   112,   107,     2,   101,
   102,   110,   105,    95,   106,    94,   111,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   118,   100,   113,
    96,   114,   117,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   103,     2,   104,   115,     2,    99,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    97,   116,    98,   108,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93

}; }

static public final int yyprhs[] = create$yyprhs();
private static int[] create$yyprhs() { return new int[] {
     0,
     0,     2,     5,     7,     9,    11,    12,    14,    17,    19,
    21,    23,    26,    28,    30,    32,    34,    36,    38,    40,
    42,    44,    46,    48,    50,    52,    54,    56,    58,    60,
    62,    64,    66,    68,    70,    72,    74,    77,    80,    82,
    86,    88,    90,    93,    95,    97,    99,   101,   105,   107,
   111,   113,   116,   118,   120,   124,   127,   132,   136,   140,
   143,   147,   149,   153,   154,   159,   160,   162,   165,   166,
   170,   172,   174,   176,   179,   181,   183,   189,   194,   195,
   196,   199,   203,   206,   208,   210,   212,   214,   216,   218,
   220,   222,   225,   229,   233,   237,   241,   246,   250,   254,
   259,   263,   265,   268,   271,   273,   276,   279,   280,   281,
   288,   291,   294,   297,   301,   303,   305,   309,   311,   313,
   315,   317,   319,   321,   323,   327,   329,   331,   333,   334,
   335,   342,   343,   344,   351,   352,   353,   360,   364,   368,
   372,   376,   380,   386,   388,   392,   396,   399,   404,   408,
   413,   418,   422,   427,   429,   432,   436,   439,   443,   445,
   449,   453,   456,   458,   462,   466,   469,   472,   474,   476,
   478,   480,   483,   486,   488,   490,   493,   496,   499,   502,
   504,   507,   510,   512,   515,   518,   520,   526,   531,   536,
   542,   544,   548,   552,   556,   558,   562,   566,   568,   572,
   576,   580,   582,   586,   590,   594,   598,   602,   604,   608,
   612,   614,   618,   620,   624,   626,   630,   632,   636,   638,
   642,   644,   650,   652,   654,   658,   660,   662,   664,   666,
   668,   670,   672,   674,   676,   678,   680,   682,   684,   686,
   688

}; }

static public final int yyrhs[] = create$yyrhs();
private static int[] create$yyrhs() { return new int[] {
   120,
     0,   120,     1,     0,   121,     0,   123,     0,   222,     0,
     0,   122,     0,   121,   122,     0,   155,     0,   157,     0,
   124,     0,   121,   124,     0,   162,     0,   164,     0,     5,
     0,     6,     0,     7,     0,     8,     0,     9,     0,    10,
     0,    11,     0,    12,     0,   127,     0,   128,     0,    18,
     0,    70,     0,    52,     0,    56,     0,    21,     0,    44,
     0,    27,     0,    16,     0,   129,     0,   131,     0,   132,
     0,   129,     0,   127,   193,     0,   132,   193,     0,   133,
     0,   132,    94,   133,     0,    13,     0,   135,     0,   134,
   135,     0,    42,     0,    79,     0,    82,     0,   137,     0,
   136,    95,   137,     0,   138,     0,   138,    96,   139,     0,
    13,     0,    13,   193,     0,   222,     0,   141,     0,   134,
   126,   138,     0,   126,   138,     0,    97,   142,    95,    98,
     0,    97,   142,    98,     0,    97,    95,    98,     0,    97,
    98,     0,    97,     1,    98,     0,   139,     0,   142,    95,
   139,     0,     0,    97,   144,   145,    98,     0,     0,   150,
     0,   147,    99,     0,     0,    99,   148,    90,     0,   143,
     0,   146,     0,   151,     0,   150,   151,     0,   122,     0,
   152,     0,    99,   153,    88,   154,    99,     0,    99,   153,
    89,   154,     0,     0,     0,   156,   100,     0,   134,   126,
   136,     0,   126,   136,     0,   143,     0,   158,     0,   159,
     0,   161,     0,   160,     0,   163,     0,   174,     0,   100,
     0,   222,   100,     0,    77,   222,   100,     0,    74,   176,
   149,     0,    74,   176,   147,     0,    80,   149,   165,     0,
    80,   149,   165,   172,     0,    80,   149,   172,     0,    80,
   149,   167,     0,    80,   149,   165,   173,     0,    80,   149,
   173,     0,   166,     0,   165,   166,     0,   169,   149,     0,
   168,     0,   165,   168,     0,   169,   147,     0,     0,     0,
    20,   101,   170,   140,   171,   102,     0,    43,   149,     0,
    43,   147,     0,    68,   100,     0,    68,   222,   100,     0,
   177,     0,   190,     0,   101,   222,   102,     0,   125,     0,
    76,     0,   176,     0,   187,     0,   195,     0,   196,     0,
   198,     0,   132,    94,    76,     0,   186,     0,   178,     0,
   181,     0,     0,     0,    84,   101,   179,    91,   180,   102,
     0,     0,     0,    85,   101,   182,    92,   183,   102,     0,
     0,     0,    86,   101,   184,    93,   185,   102,     0,   127,
    94,    22,     0,   132,    94,    22,     0,   131,    94,    22,
     0,    81,    94,    22,     0,    61,   130,   189,     0,   175,
    94,    61,    13,   189,     0,   222,     0,   188,    95,   222,
     0,   101,   188,   102,     0,   101,   102,     0,    61,   127,
   191,   193,     0,    61,   127,   191,     0,    61,   127,   193,
   141,     0,    61,   129,   191,   193,     0,    61,   129,   191,
     0,    61,   129,   193,   141,     0,   192,     0,   191,   192,
     0,   103,   222,   104,     0,   103,   104,     0,   193,   103,
   104,     0,    72,     0,   175,    94,    13,     0,   194,    94,
    13,     0,   197,   189,     0,   132,     0,   175,    94,    13,
     0,   194,    94,    13,     0,   132,   192,     0,   177,   192,
     0,   175,     0,   132,     0,   200,     0,   201,     0,   199,
    64,     0,   199,    58,     0,   203,     0,   204,     0,   105,
   202,     0,   106,   202,     0,   107,   202,     0,    87,   202,
     0,   205,     0,    64,   202,     0,    58,   202,     0,   199,
     0,   108,   202,     0,   109,   202,     0,   206,     0,   101,
   127,   193,   102,   202,     0,   101,   127,   102,   202,     0,
   101,   222,   102,   205,     0,   101,   132,   193,   102,   205,
     0,   202,     0,   207,   110,   202,     0,   207,   111,   202,
     0,   207,   112,   202,     0,   207,     0,   208,   105,   207,
     0,   208,   106,   207,     0,   208,     0,   209,    57,   208,
     0,   209,    69,   208,     0,   209,    55,   208,     0,   209,
     0,   210,   113,   209,     0,   210,   114,   209,     0,   210,
    54,   209,     0,   210,    46,   209,     0,   210,    51,   128,
     0,   210,     0,   211,    32,   210,     0,   211,    60,   210,
     0,   211,     0,   212,   107,   211,     0,   212,     0,   213,
   115,   212,     0,   213,     0,   214,   116,   213,     0,   214,
     0,   215,    15,   214,     0,   215,     0,   216,    62,   215,
     0,   216,     0,   216,   117,   222,   118,   217,     0,   217,
     0,   219,     0,   220,   221,   218,     0,   132,     0,   195,
     0,   198,     0,    96,     0,    36,     0,    31,     0,    35,
     0,    29,     0,    39,     0,    34,     0,    38,     0,    33,
     0,    30,     0,    40,     0,    37,     0,   218,     0

}; }

static public final int yyrline[] = create$yyrline();
private static int[] create$yyrline() { return new int[] {
 0,
   220,   221,   225,   226,   227,   228,   233,   234,   239,   240,
   244,   245,   249,   250,   256,   257,   258,   259,   260,   261,
   262,   263,   269,   270,   275,   276,   277,   278,   279,   280,
   281,   282,   286,   287,   291,   295,   301,   302,   308,   309,
   313,   319,   320,   324,   325,   326,   332,   333,   337,   338,
   342,   343,   347,   348,   352,   353,   359,   360,   361,   362,
   363,   367,   368,   374,   376,   380,   381,   389,   397,   398,
   402,   403,   407,   408,   412,   413,   422,   423,   426,   427,
   430,   434,   436,   441,   442,   443,   444,   445,   446,   447,
   451,   455,   458,   462,   466,   470,   471,   472,   476,   477,
   478,   482,   483,   487,   491,   492,   496,   500,   501,   504,
   507,   511,   515,   516,   522,   523,   527,   532,   533,   534,
   535,   536,   537,   538,   539,   540,   541,   542,   546,   547,
   548,   552,   553,   554,   556,   557,   558,   562,   563,   564,
   565,   569,   570,   574,   575,   579,   580,   587,   588,   589,
   590,   591,   592,   596,   597,   601,   606,   607,   611,   615,
   616,   620,   624,   625,   626,   630,   631,   635,   636,   637,
   638,   642,   646,   650,   651,   652,   653,   654,   655,   656,
   660,   664,   668,   669,   670,   671,   675,   676,   677,   678,
   684,   685,   686,   687,   691,   692,   693,   697,   698,   699,
   700,   704,   705,   706,   707,   708,   709,   713,   714,   715,
   719,   720,   724,   725,   729,   730,   734,   735,   739,   740,
   744,   745,   749,   750,   754,   758,   759,   760,   764,   765,
   766,   767,   768,   769,   770,   771,   772,   773,   774,   775,
   779

}; }

static public final int yyr1[] = create$yyr1();
private static int[] create$yyr1() { return new int[] {
     0,
   119,   119,   120,   120,   120,   120,   121,   121,   122,   122,
   123,   123,   124,   124,   125,   125,   125,   125,   125,   125,
   125,   125,   126,   126,   127,   127,   127,   127,   127,   127,
   127,   127,   128,   128,   129,   130,   131,   131,   132,   132,
   133,   134,   134,   135,   135,   135,   136,   136,   137,   137,
   138,   138,   139,   139,   140,   140,   141,   141,   141,   141,
   141,   142,   142,   144,   143,   145,   145,   146,   148,   147,
   149,   149,   150,   150,   151,   151,   152,   152,   153,   154,
   155,   156,   156,   157,   157,   157,   157,   157,   157,   157,
   158,   159,   160,   161,   162,   163,   163,   163,   164,   164,
   164,   165,   165,   166,   167,   167,   168,   170,   171,   169,
   172,   173,   174,   174,   175,   175,   176,   177,   177,   177,
   177,   177,   177,   177,   177,   177,   177,   177,   179,   180,
   178,   182,   183,   181,   184,   185,   181,   186,   186,   186,
   186,   187,   187,   188,   188,   189,   189,   190,   190,   190,
   190,   190,   190,   191,   191,   192,   193,   193,   194,   195,
   195,   196,   197,   197,   197,   198,   198,   199,   199,   199,
   199,   200,   201,   202,   202,   202,   202,   202,   202,   202,
   203,   204,   205,   205,   205,   205,   206,   206,   206,   206,
   207,   207,   207,   207,   208,   208,   208,   209,   209,   209,
   209,   210,   210,   210,   210,   210,   210,   211,   211,   211,
   212,   212,   213,   213,   214,   214,   215,   215,   216,   216,
   217,   217,   218,   218,   219,   220,   220,   220,   221,   221,
   221,   221,   221,   221,   221,   221,   221,   221,   221,   221,
   222

}; }

static public final int yyr2[] = create$yyr2();
private static int[] create$yyr2() { return new int[] {
     0,
     1,     2,     1,     1,     1,     0,     1,     2,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     2,     2,     1,     3,
     1,     1,     2,     1,     1,     1,     1,     3,     1,     3,
     1,     2,     1,     1,     3,     2,     4,     3,     3,     2,
     3,     1,     3,     0,     4,     0,     1,     2,     0,     3,
     1,     1,     1,     2,     1,     1,     5,     4,     0,     0,
     2,     3,     2,     1,     1,     1,     1,     1,     1,     1,
     1,     2,     3,     3,     3,     3,     4,     3,     3,     4,
     3,     1,     2,     2,     1,     2,     2,     0,     0,     6,
     2,     2,     2,     3,     1,     1,     3,     1,     1,     1,
     1,     1,     1,     1,     3,     1,     1,     1,     0,     0,
     6,     0,     0,     6,     0,     0,     6,     3,     3,     3,
     3,     3,     5,     1,     3,     3,     2,     4,     3,     4,
     4,     3,     4,     1,     2,     3,     2,     3,     1,     3,
     3,     2,     1,     3,     3,     2,     2,     1,     1,     1,
     1,     2,     2,     1,     1,     2,     2,     2,     2,     1,
     2,     2,     1,     2,     2,     1,     5,     4,     4,     5,
     1,     3,     3,     3,     1,     3,     3,     1,     3,     3,
     3,     1,     3,     3,     3,     3,     3,     1,     3,     3,
     1,     3,     1,     3,     1,     3,     1,     3,     1,     3,
     1,     5,     1,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1

}; }

static public final int yydefact[] = create$yydefact();
private static int[] create$yydefact() { return new int[] {
     6,
    15,    16,    17,    18,    19,    20,    21,    22,    41,    32,
    25,    29,    31,    44,    30,    27,    28,     0,     0,     0,
     0,    26,   159,     0,   119,     0,    45,     0,     0,    46,
     0,     0,     0,     0,    64,    91,     0,     0,     0,     0,
     0,     0,     0,     3,     7,     4,    11,   118,     0,    23,
    24,    33,    34,   169,    39,     0,    42,    84,     9,     0,
    10,    85,    86,    88,    87,    13,    89,    14,    90,   168,
   120,   115,   127,   128,   126,   121,   116,     0,   122,   123,
     0,   124,   183,   170,   171,   191,   174,   175,   180,   186,
   195,   198,   202,   208,   211,   213,   215,   217,   219,   221,
   223,   241,   224,     0,     5,     0,     0,   169,   122,   124,
   182,     0,    36,     0,    35,   181,   113,   169,     0,     0,
     0,     0,    69,    71,    72,     0,     0,     0,   129,   132,
   135,   179,    66,     0,   169,     0,   176,   177,   178,   184,
   185,     2,     8,    12,     0,    51,    83,    47,    49,     0,
     0,    37,     0,     0,     0,   166,    38,     0,    23,    34,
    35,    43,    81,     0,     0,   167,     0,     0,   162,   173,
   172,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   233,   238,   231,   237,   235,   232,   230,   240,
   236,   234,   239,   229,     0,    92,   149,   154,     0,   152,
     0,   142,     0,   114,     0,    95,    94,    93,     0,    68,
     0,     0,    96,   102,    99,   105,     0,    98,   101,   141,
     0,     0,     0,     0,     0,    79,    75,     0,    67,    73,
    76,     0,    37,    38,   117,    52,     0,     0,   138,   157,
     0,   140,   139,   125,    40,     0,    82,   160,     0,   161,
   147,     0,   144,   192,   193,   194,   196,   197,   201,   199,
   200,   206,     0,   207,   205,   203,   204,   209,   210,   212,
   214,   216,   218,   220,     0,   225,   155,   148,     0,   150,
   151,   153,   117,    70,   108,   112,   111,   103,   106,    97,
   100,   107,   104,   130,   133,   136,     0,     0,     0,    65,
    74,   188,     0,     0,   189,    48,    50,    54,    53,   158,
   156,     0,     0,   146,     0,     0,     0,    60,    62,     0,
     0,     0,     0,     0,     0,    96,     0,    80,    80,   187,
   190,   143,   145,   222,    61,    59,     0,    58,     0,     0,
   109,   131,   134,   137,     0,    78,    57,    63,    56,     0,
     0,    77,    55,   110,     0,     0,     0

}; }

static public final int yydefgoto[] = create$yydefgoto();
private static int[] create$yydefgoto() { return new int[] {
   365,
    43,    44,   237,    46,    47,    48,    49,   106,    51,    52,
   114,   107,   108,    55,    56,    57,   147,   148,   149,   317,
   351,   318,   330,   124,   133,   238,   125,   126,   219,   217,
   239,   240,   241,   309,   355,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,   223,   224,   225,   226,   227,
   331,   361,   228,   229,    69,    70,    71,    72,    73,   231,
   332,    74,   232,   333,   233,   334,    75,    76,   262,   169,
    77,   207,   156,   152,    78,   109,    80,    81,   110,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
   104,   205,   145

}; }

static public final int yypact[] = create$yypact();
private static int[] create$yypact() { return new int[] {
   568,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1198,   371,  1198,
   778,-32768,-32768,   -86,-32768,  1198,-32768,    30,   -64,-32768,
   -12,     7,    15,  1198,-32768,-32768,  1198,  1198,  1198,  1198,
  1198,  1198,    99,   568,-32768,-32768,-32768,-32768,    79,    -6,
-32768,-32768,    27,   779,-32768,    88,-32768,-32768,-32768,    36,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    48,
-32768,    43,-32768,-32768,-32768,-32768,-32768,    54,   228,-32768,
    53,   305,    61,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -70,    83,   -21,    24,    35,    49,    47,    57,   149,   -33,
-32768,-32768,-32768,   563,    69,    -6,    27,     4,-32768,-32768,
-32768,    75,    75,    53,    86,-32768,-32768,   458,    84,  1198,
    30,   101,-32768,-32768,-32768,    94,    51,   181,-32768,-32768,
-32768,-32768,   463,     9,   458,   104,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    69,   112,   123,-32768,   124,   197,
   117,   119,   201,     3,   883,-32768,   119,    79,   112,-32768,
    20,-32768,-32768,     5,  1198,-32768,   212,   988,-32768,-32768,
-32768,  1198,  1198,  1198,  1198,  1198,  1198,  1198,  1198,  1198,
   371,  1198,  1198,  1198,  1198,  1198,  1198,  1198,  1198,  1198,
  1198,  1198,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1198,-32768,    75,-32768,    44,    75,
    44,-32768,   213,-32768,   126,    94,-32768,-32768,   139,-32768,
   129,    30,    51,-32768,-32768,-32768,    30,-32768,-32768,-32768,
   141,   142,   140,   -86,    30,-32768,-32768,   137,   463,-32768,
-32768,  1198,    93,    97,  1303,   119,    79,  1093,-32768,-32768,
   132,-32768,-32768,-32768,-32768,   133,   123,   145,   225,   146,
-32768,    -9,-32768,-32768,-32768,-32768,   -70,   -70,    83,    83,
    83,   -21,   112,-32768,   -21,   -21,   -21,    24,    24,    35,
    49,    47,    57,   149,   125,-32768,-32768,   119,   358,-32768,
   119,-32768,-32768,-32768,-32768,    94,-32768,-32768,-32768,-32768,
-32768,    94,-32768,-32768,-32768,-32768,    30,    67,   102,-32768,
-32768,-32768,  1198,  1303,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,    53,  1198,-32768,  1198,   144,   151,-32768,-32768,    33,
    88,   148,   150,   158,    30,    67,    30,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   673,-32768,    79,    88,
-32768,-32768,-32768,-32768,   154,-32768,-32768,-32768,-32768,    79,
   167,-32768,-32768,-32768,   270,   271,-32768

}; }

static public final int yypgoto[] = create$yypgoto();
private static int[] create$yypgoto() { return new int[] {
-32768,
-32768,-32768,    28,-32768,   229,-32768,   -52,     1,    91,   255,
-32768,     2,     0,  -140,   -56,   -51,   118,    34,  -325,  -266,
-32768,   -66,-32768,    17,-32768,-32768,-32768,  -109,-32768,   -25,
-32768,    38,-32768,-32768,   -59,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   -26,  -214,-32768,    60,  -259,
-32768,-32768,  -212,    62,-32768,-32768,   -17,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -106,
-32768,   171,   -50,   -44,-32768,     6,-32768,-32768,    39,-32768,
-32768,-32768,    13,-32768,-32768,  -232,-32768,    37,    -2,   -31,
    23,   103,    98,   105,   106,   100,-32768,   -37,    87,-32768,
-32768,-32768,    59

}; }

static public final int yytable[] = create$yytable();
private static int[] create$yytable() { return new int[] {
    54,
    50,    53,   127,   158,   162,    79,   121,   212,   298,   157,
   300,   216,   315,   255,   120,     9,    58,   258,   115,   112,
   118,   166,   329,   359,   253,   118,    79,    45,   191,   128,
   111,    79,   116,   177,   363,   178,   135,   134,    82,   172,
   173,   174,    79,    54,    50,    53,   132,   179,   337,    79,
   137,   138,   139,   140,   141,   161,   159,   160,   105,    82,
    58,   208,   208,   157,    82,   259,   185,   209,   211,   180,
   221,   143,   255,   157,   181,    82,   337,   182,   254,   119,
   358,   341,    82,   192,   122,   323,   221,   150,   129,   243,
   244,   146,   324,   222,   186,   136,   151,   154,    -1,   142,
     9,   246,   150,    10,  -163,    11,   155,   130,    12,   335,
   242,   151,   296,   213,    13,   131,   157,   302,   170,   118,
   153,   298,   151,   300,   171,    79,    35,   347,   123,    14,
   348,    15,    54,    50,    53,   163,   183,   184,    79,    16,
   289,   164,   290,    17,   292,   165,   251,   167,   272,    58,
   275,   276,   277,   168,   118,   187,   287,    22,    82,   287,
    79,   188,   288,   190,   118,   291,    27,   118,   206,    30,
    79,    82,   189,    79,   269,   270,   271,   155,   215,   213,
   161,   273,   160,   214,   264,   265,   266,   175,   176,   338,
   339,   118,   220,    82,   313,   251,   297,    79,   314,   251,
   218,   303,   230,    82,   118,   245,    82,   278,   279,   308,
    79,   267,   268,   256,   151,   342,   307,   247,   249,   248,
   250,   251,   252,   256,   260,     9,   263,   293,   294,   295,
    82,   304,   306,   305,   310,   320,   321,   322,    54,    50,
    53,   345,   325,    82,    79,  -164,  -165,   118,   346,   352,
   285,   353,   362,    79,   312,    58,  -227,  -227,  -227,   354,
  -227,  -227,  -227,  -227,  -227,  -227,  -227,  -227,   364,   366,
   367,   274,   144,   113,   350,   257,   311,    82,   349,   356,
   316,   336,   299,   210,   301,   281,    82,   344,   118,   280,
   284,   286,     0,   282,    79,   283,     0,   360,   162,     0,
     0,     0,     0,     0,     0,     0,   319,     0,     0,   297,
     0,   303,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   118,  -227,     0,   340,     0,    82,    79,     0,
   161,   159,   160,  -228,  -228,  -228,     0,  -228,  -228,  -228,
  -228,  -228,  -228,  -228,  -228,     0,   118,   319,     0,   161,
   159,   160,    79,     0,     0,     0,     0,     0,   326,     0,
     0,    82,     1,     2,     3,     4,     5,     6,     7,     8,
     9,     0,     0,    10,     0,    11,     0,     0,    12,     0,
     0,   343,     0,     9,    13,    82,    10,     0,    11,     0,
     0,    12,     0,     0,     0,     0,     0,    13,     0,     0,
  -228,    15,     0,     0,     0,   319,     0,     0,     0,    16,
     0,     0,     0,    17,    15,    18,     0,     0,    19,     0,
     0,    20,    16,     0,     0,     0,    17,    22,     0,    23,
     0,     0,     0,    25,     0,     0,     0,     0,    29,     0,
    22,    31,    32,    33,    34,     0,     0,     0,     0,     0,
     0,     0,   327,     0,   289,   328,     0,     0,    37,     0,
     0,     0,    38,    39,    40,    41,    42,     1,     2,     3,
     4,     5,     6,     7,     8,     9,     0,     0,    10,     0,
    11,     0,     0,    12,     0,     0,  -226,  -226,  -226,    13,
  -226,  -226,  -226,  -226,  -226,  -226,  -226,  -226,     0,     0,
     0,     0,     0,     0,    14,     0,    15,     0,     0,     0,
     0,     0,     0,     0,    16,     0,     0,     0,    17,     0,
    18,     0,     0,    19,     0,     0,    20,     0,     0,     0,
    21,     0,    22,     0,    23,     0,   234,     0,    25,    26,
     0,    27,   235,    29,    30,     0,    31,    32,    33,    34,
     0,   154,     0,  -226,     0,     0,     0,     0,  -163,    35,
   155,   236,    36,    37,     0,     0,     0,    38,    39,    40,
    41,    42,     1,     2,     3,     4,     5,     6,     7,     8,
     9,     0,     0,    10,     0,    11,     0,     0,    12,     0,
     0,   193,   194,   195,    13,   196,   197,   198,   199,   200,
   201,   202,   203,     0,     0,     0,     0,     0,     0,    14,
     0,    15,     0,     0,     0,     0,     0,     0,     0,    16,
     0,     0,     0,    17,     0,    18,     0,     0,    19,     0,
     0,    20,     0,     0,     0,    21,     0,    22,     0,    23,
     0,    24,     0,    25,    26,     0,    27,    28,    29,    30,
     0,    31,    32,    33,    34,     0,     0,     0,   204,     0,
     0,     0,     0,     0,    35,     0,     0,    36,    37,     0,
     0,     0,    38,    39,    40,    41,    42,     1,     2,     3,
     4,     5,     6,     7,     8,     9,     0,     0,    10,     0,
    11,     0,     0,    12,     0,     0,     0,     0,     0,    13,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
     0,     0,     0,     0,    16,     0,     0,     0,    17,     0,
    18,     0,     0,    19,     0,     0,    20,     0,     0,     0,
     0,     0,    22,     0,    23,     0,     0,     0,    25,     0,
     0,     0,     0,    29,     0,     0,    31,    32,    33,    34,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   289,
   357,     0,     0,    37,     0,     0,     0,    38,    39,    40,
    41,    42,     1,     2,     3,     4,     5,     6,     7,     8,
     9,   -35,     0,    10,     0,    11,     0,     0,    12,     0,
     0,     0,     0,     0,    13,     0,     0,  -226,  -226,  -226,
     0,  -226,  -226,  -226,  -226,  -226,  -226,  -226,  -226,     0,
     0,    15,     0,     0,     0,     0,     0,     0,     0,    16,
     0,     0,     0,    17,     0,    18,     0,     0,    19,     0,
     0,    20,     0,     0,     0,     0,     0,    22,     0,    23,
     0,     0,     0,    25,     0,     0,     0,     0,    29,     0,
     0,    31,    32,    33,    34,     0,     0,     0,     0,     0,
     0,     0,   154,     0,  -226,     0,     0,   117,    37,  -163,
     0,   155,    38,    39,    40,    41,    42,     1,     2,     3,
     4,     5,     6,     7,     8,     9,     0,     0,    10,     0,
    11,     0,     0,    12,     0,     0,     0,     0,     0,    13,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
     0,     0,     0,     0,    16,     0,     0,     0,    17,     0,
    18,     0,     0,    19,     0,     0,    20,     0,     0,     0,
     0,     0,    22,     0,    23,     0,     0,     0,    25,     0,
     0,     0,     0,    29,     0,     0,    31,    32,    33,    34,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    37,     0,     0,   250,    38,    39,    40,
    41,    42,     1,     2,     3,     4,     5,     6,     7,     8,
     9,     0,     0,    10,     0,    11,     0,     0,    12,     0,
     0,     0,     0,     0,    13,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    15,     0,     0,     0,     0,     0,     0,     0,    16,
     0,     0,     0,    17,     0,    18,     0,     0,    19,     0,
     0,    20,     0,     0,     0,     0,     0,    22,     0,    23,
     0,     0,     0,    25,     0,     0,     0,     0,    29,     0,
     0,    31,    32,    33,    34,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    37,   261,
     0,     0,    38,    39,    40,    41,    42,     1,     2,     3,
     4,     5,     6,     7,     8,     9,     0,     0,    10,     0,
    11,     0,     0,    12,     0,     0,     0,     0,     0,    13,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
     0,     0,     0,     0,    16,     0,     0,     0,    17,     0,
    18,     0,     0,    19,     0,     0,    20,     0,     0,     0,
     0,     0,    22,     0,    23,     0,     0,     0,    25,     0,
     0,     0,     0,    29,     0,     0,    31,    32,    33,    34,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   289,
     0,     0,     0,    37,     0,     0,     0,    38,    39,    40,
    41,    42,     1,     2,     3,     4,     5,     6,     7,     8,
     9,     0,     0,    10,     0,    11,     0,     0,    12,     0,
     0,     0,     0,     0,    13,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    15,     0,     0,     0,     0,     0,     0,     0,    16,
     0,     0,     0,    17,     0,    18,     0,     0,    19,     0,
     0,    20,     0,     0,     0,     0,     0,    22,     0,    23,
     0,     0,     0,    25,     0,     0,     0,     0,    29,     0,
     0,    31,    32,    33,    34,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
     0,     0,    38,    39,    40,    41,    42,     1,     2,     3,
     4,     5,     6,     7,     8,     9,     0,     0,    10,     0,
    11,     0,     0,    12,     0,     0,     0,     0,     0,    13,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
     0,     0,     0,     0,    16,     0,     0,     0,    17,     0,
     0,     0,     0,    19,     0,     0,     0,     0,     0,     0,
     0,     0,    22,     0,    23,     0,     0,     0,    25,     0,
     0,     0,     0,    29,     0,     0,    31,    32,    33,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    37,     0,     0,     0,     0,     0,     0,
    41,    42

}; }

static public final int yycheck[] = create$yycheck();
private static int[] create$yycheck() { return new int[] {
     0,
     0,     0,    28,    56,    56,     0,    24,   114,   223,    54,
   223,   121,   245,   154,   101,    13,     0,    13,    19,    19,
    21,    72,   289,   349,    22,    26,    21,     0,    62,    94,
    18,    26,    20,    55,   360,    57,    37,    37,     0,   110,
   111,   112,    37,    44,    44,    44,    34,    69,   308,    44,
    38,    39,    40,    41,    42,    56,    56,    56,     0,    21,
    44,   112,   113,   108,    26,    61,    32,   112,   113,    46,
    20,    44,   213,   118,    51,    37,   336,    54,    76,    21,
   347,   314,    44,   117,    26,    95,    20,    94,   101,   134,
   135,    13,   102,    43,    60,    37,   103,    94,     0,     1,
    13,   146,    94,    16,   101,    18,   103,   101,    21,    43,
   102,   103,   222,    94,    27,   101,   161,   227,    58,   120,
    94,   336,   103,   336,    64,   120,    97,    95,    99,    42,
    98,    44,   133,   133,   133,   100,   113,   114,   133,    52,
    97,    94,   209,    56,   211,   103,   103,    94,   180,   133,
   182,   183,   184,   101,   155,   107,   207,    70,   120,   210,
   155,   115,   207,    15,   165,   210,    79,   168,   100,    82,
   165,   133,   116,   168,   177,   178,   179,   103,   120,    94,
   181,   181,   181,   100,   172,   173,   174,   105,   106,    88,
    89,   192,    99,   155,   102,   103,   222,   192,   102,   103,
   100,   227,    22,   165,   205,   102,   168,   185,   186,   235,
   205,   175,   176,   155,   103,   322,   234,    95,    22,    96,
   104,   103,    22,   165,    13,    13,   168,   102,    90,   101,
   192,    91,    93,    92,    98,   104,   104,    13,   239,   239,
   239,    98,   118,   205,   239,   101,   101,   248,    98,   102,
   192,   102,    99,   248,   242,   239,    29,    30,    31,   102,
    33,    34,    35,    36,    37,    38,    39,    40,   102,     0,
     0,   181,    44,    19,   331,   158,   239,   239,   331,   339,
   247,   308,   223,   113,   223,   188,   248,   325,   289,   187,
   191,   205,    -1,   189,   289,   190,    -1,   350,   350,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   248,    -1,    -1,   335,
    -1,   337,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   323,    96,    -1,   313,    -1,   289,   323,    -1,
   331,   331,   331,    29,    30,    31,    -1,    33,    34,    35,
    36,    37,    38,    39,    40,    -1,   347,   289,    -1,   350,
   350,   350,   347,    -1,    -1,    -1,    -1,    -1,     1,    -1,
    -1,   323,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    -1,    -1,    16,    -1,    18,    -1,    -1,    21,    -1,
    -1,   323,    -1,    13,    27,   347,    16,    -1,    18,    -1,
    -1,    21,    -1,    -1,    -1,    -1,    -1,    27,    -1,    -1,
    96,    44,    -1,    -1,    -1,   347,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    56,    44,    58,    -1,    -1,    61,    -1,
    -1,    64,    52,    -1,    -1,    -1,    56,    70,    -1,    72,
    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    81,    -1,
    70,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    95,    -1,    97,    98,    -1,    -1,   101,    -1,
    -1,    -1,   105,   106,   107,   108,   109,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    -1,    -1,    16,    -1,
    18,    -1,    -1,    21,    -1,    -1,    29,    30,    31,    27,
    33,    34,    35,    36,    37,    38,    39,    40,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,
    58,    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,    -1,
    68,    -1,    70,    -1,    72,    -1,    74,    -1,    76,    77,
    -1,    79,    80,    81,    82,    -1,    84,    85,    86,    87,
    -1,    94,    -1,    96,    -1,    -1,    -1,    -1,   101,    97,
   103,    99,   100,   101,    -1,    -1,    -1,   105,   106,   107,
   108,   109,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    -1,    -1,    16,    -1,    18,    -1,    -1,    21,    -1,
    -1,    29,    30,    31,    27,    33,    34,    35,    36,    37,
    38,    39,    40,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    56,    -1,    58,    -1,    -1,    61,    -1,
    -1,    64,    -1,    -1,    -1,    68,    -1,    70,    -1,    72,
    -1,    74,    -1,    76,    77,    -1,    79,    80,    81,    82,
    -1,    84,    85,    86,    87,    -1,    -1,    -1,    96,    -1,
    -1,    -1,    -1,    -1,    97,    -1,    -1,   100,   101,    -1,
    -1,    -1,   105,   106,   107,   108,   109,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    -1,    -1,    16,    -1,
    18,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    27,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,
    58,    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    72,    -1,    -1,    -1,    76,    -1,
    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    97,
    98,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
   108,   109,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    13,    -1,    16,    -1,    18,    -1,    -1,    21,    -1,
    -1,    -1,    -1,    -1,    27,    -1,    -1,    29,    30,    31,
    -1,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    56,    -1,    58,    -1,    -1,    61,    -1,
    -1,    64,    -1,    -1,    -1,    -1,    -1,    70,    -1,    72,
    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    81,    -1,
    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    -1,    96,    -1,    -1,   100,   101,   101,
    -1,   103,   105,   106,   107,   108,   109,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    -1,    -1,    16,    -1,
    18,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    27,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,
    58,    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    72,    -1,    -1,    -1,    76,    -1,
    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   101,    -1,    -1,   104,   105,   106,   107,
   108,   109,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    -1,    -1,    16,    -1,    18,    -1,    -1,    21,    -1,
    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    56,    -1,    58,    -1,    -1,    61,    -1,
    -1,    64,    -1,    -1,    -1,    -1,    -1,    70,    -1,    72,
    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    81,    -1,
    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,   102,
    -1,    -1,   105,   106,   107,   108,   109,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    -1,    -1,    16,    -1,
    18,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    27,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,
    58,    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    72,    -1,    -1,    -1,    76,    -1,
    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    87,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    97,
    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,
   108,   109,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    -1,    -1,    16,    -1,    18,    -1,    -1,    21,    -1,
    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    56,    -1,    58,    -1,    -1,    61,    -1,
    -1,    64,    -1,    -1,    -1,    -1,    -1,    70,    -1,    72,
    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    81,    -1,
    -1,    84,    85,    86,    87,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,    -1,
    -1,    -1,   105,   106,   107,   108,   109,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    -1,    -1,    16,    -1,
    18,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    27,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,
    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    72,    -1,    -1,    -1,    76,    -1,
    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,
   108,   109

}; }



// SUFFIX



    public static final int YYRET_EPSILON             = 0x0011;
    public static final int YYRET_EXPRESSION          = 0x0012;
    public static final int YYRET_STATEMENTS          = 0x0013;
    public static final int YYRET_ENCLOSED_STATEMENTS = 0x0014;

/* Override yyerror */
    public
	void
	yyverror(String msg) throws ParseException { yyerror(msg,true,true); }

public void parseError(String msg) throws ParseException {
    String desc;
    if (yychar == YYEOF) {
	desc = "unexpected end of file";
    } else {
	desc = "parse error: '" + yytext() + "'";
    }
    if (msg != null && msg != "parse error") desc += "; " + msg;
    Parser.reportError(tokencxt, desc);
}

/*

public static void compileError(IJavaContext cxt, String msg, boolean errthrow)
        throws CompileException {
    YYLocation lbeg = cxt.lbeg();
    InputBuffer ibuf = cxt.ibuf();
    String line = ibuf.getLine(lbeg);

    System.err.println("Compile error: " + msg);
    System.err.println("At: " + lbeg);
    System.err.println(line);
    for (int i=0; i<lbeg.charno; i++) {
	char c = line.charAt(i);
	if (Character.isWhitespace(c)) // e.g. \t
	    System.err.print("" + c);
	else
	    System.err.print(" ");
    }
    System.err.println("^");
    if(errthrow) throw new CompileException(msg);
}
*/

public static void notSupported(IJavaContext cxt, String what) throws CompileException {
    cxt.reportError("The " + what + " is not yet supported in this version of" +
        " Janet in embedded Java expressions.");
}

/* */


/* Parse context */

IMutableContext cxt = new IMutableContext() {
	public final YYLocation lbeg() { return EmbeddedParser.this.lbeg(); }
	public final YYLocation lend() { return EmbeddedParser.this.lend(); }
	public final JanetSourceReader ibuf() { return outer_cxt.ibuf(); }

	public final void reportError(String msg) throws CompileException { pl.edu.agh.icsr.janet.Parser.reportError(this, msg); }

	public final ClassManager getClassManager() { return outer_cxt.getClassManager(); }
	public final YYCompilationUnit getCompilationUnit() { return outer_cxt.getCompilationUnit(); }
	public final IScope getScope() { return outer_cxt.getScope(); }
	public VariableStack getVariables() { return outer_cxt.getVariables(); }
	public void pushScope(IScope unit) { outer_cxt.pushScope(unit); }
	public IScope popScope() { return outer_cxt.popScope(); }
	public void addVariable(YYVariableDeclarator var) throws CompileException { outer_cxt.addVariable(var); }
	public void addVariables(YYVariableDeclaratorList vars) throws CompileException { outer_cxt.addVariables(vars); }
    };

ILocationContext tokencxt = new ILocationContext() {
	public final YYLocation lbeg() { return yylex.tokenloc(); }
	public final YYLocation lend() { return cxt.lend(); }
	public final JanetSourceReader ibuf() { return cxt.ibuf(); }
	public final void reportError(String msg) throws CompileException {
	    throw new UnsupportedOperationException();
	}
    };

// redirection to cxt
void pushScope(IScope unit) { cxt.pushScope(unit); }
IScope popScope() { return cxt.popScope(); }
IScope peekScope() { return cxt.getScope(); }
void addVariable(YYVariableDeclarator var) throws CompileException { cxt.addVariable(var); }
void addVariables(YYVariableDeclaratorList vars) throws CompileException { cxt.addVariables(vars); }

// parse modes

//public final static int EXPRESSION = 401;
//public final static int STATEMENTS = 402;


int getInitialLexMode() { //int yymode) {
    return Lexer.JAVA_TOKEN;
}


static final String[] yytname = TokenTypes.yytname;

}; /*class*/
