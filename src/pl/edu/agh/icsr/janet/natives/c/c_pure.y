/* -*-Java-*- */

/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Java Language Extensions (JANET) package.
 *
 * The Initial Developer of the Original Code is Dawid Kurzyniec.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Dawid Kurzyniec <dawidk@icsr.agh.edu.pl>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * Janet grammar file for pure C (without embedded Java).
 */

%{                                                                                    
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Java Language Extensions (JANET) package.
 *
 * The Initial Developer of the Original Code is Dawid Kurzyniec.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Dawid Kurzyniec <dawidk@icsr.agh.edu.pl>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/* THIS FILE HAS BEEN AUTOMATICALLY GENERATED by the public domain JB tool
 * (see README.html for details).
 */

import pl.edu.agh.icsr.janet.*;
import pl.edu.agh.icsr.janet.LexException;
import pl.edu.agh.icsr.janet.ParseException;
import pl.edu.agh.icsr.janet.yytree.*;
%}

%union {
    YYCBlock;
    YYCChunk;

    YYExpression;
    YYStatement;

    String;
}

%token LEX_ERROR
%token EPSILON

%token<String> CTEXT CSTATEMENT_CHAR
%token<YYExpression> JAVA_EXPRESSION
%token<YYStatement> JAVA_STATEMENTS JAVA_ENCLOSED_STATEMENTS

%type<YYStatement> CStatement

%type<YYCBlock> CBlock
%type<YYCChunk> Goal CStatements

%start Start

%%

Start
    : { pushChunk(new YYCChunk(cxt)); } Outer
    ;

Outer             /* never reached */
    : Goal       {}
    | Goal error {}
    ;

Goal
    : CStatements             { $$ = $1.compact(); yyclearin(); yyreturn(YYRET_STATEMENTS); }
    | /* empty */             { $$ = null; yyclearin(); yyreturn(YYRET_EPSILON); }
    ;

CStatements_opt
    : /* empty */ {}
    | CStatements {}
    ;

CStatements
    : CStatement              { $$ = peekChunk().add($1.compact()); } 
    | CStatements CStatement  { $$ = $1.add($2.compact()); }
    ;

CStatement
    : CStatement CSTATEMENT_CHAR                { $$ = $1.expand(cxt); }
    | CTEXT                                     { $$ = new YYCChunk(cxt); }

    | '(' { pushChunk(new YYCChunk(cxt)); } CStatements_opt ')' { $$ = popChunk().expand(cxt); }
    | '[' { pushChunk(new YYCChunk(cxt)); } CStatements_opt ']' { $$ = popChunk().expand(cxt); }

    | CBlock                                    { $$ = $1; }
    ;

CBlock
    : '{'                      { YYCBlock b = new YYCBlock(cxt); pushChunk(b); cxt.pushScope(b); } 
          CStatements_opt 
      '}'                      { cxt.popScope(); $$ = popChunk().compact().expand(cxt); }
    ;

%%
    public int getInitialLexMode() { //int yymode) {
	return Lexer.NATIVE_STATEMENTS;
    }

    Stack chunks = new Stack();
    void pushChunk(YYCChunk c) { chunks.push(c); }
    YYCChunk popChunk() { return (YYCChunk)chunks.pop(); }
    YYCChunk peekChunk() { return (YYCChunk)chunks.peek(); }
