/* -*-Java-*- */

package pl.edu.agh.icsr.janet;

/**************************************************/

import java.util.*;
import java.io.*;
import java.net.URL;
import jbf.Int_Stack;
import jbf.Object_Stack;
import jbf.YYlocation;

import pl.edu.agh.icsr.janet.YYLocation;
import pl.edu.agh.icsr.janet.YYLocationStack;

/**************************************************/


/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Java Language Extensions (JANET) package.
 *
 * The Initial Developer of the Original Code is Dawid Kurzyniec.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Dawid Kurzyniec <dawidk@icsr.agh.edu.pl>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/* Important information:
 * THIS FILE HAS BEEN AUTOMATICALLY GENERATED by the public domain JB tool
 * (see README.html for details).
 */

import pl.edu.agh.icsr.janet.yytree.*;
import java.lang.reflect.Modifier; // for Modifiers productions

import pl.edu.agh.icsr.janet.reflect.ClassManager;
import pl.edu.agh.icsr.janet.ILocationContext;
import pl.edu.agh.icsr.janet.natives.YYNativeCode;



/* The template file is based on parser templates defined in JB and
 * (indirectly) bison, and is therefore subject to GPL license as shown
 * below. The JANET MPL 1.1 license do not apply in this case. Note that
 * the template file is not an integral part of JANET and does not affect
 * JANET licensing.
 */

/*
   This is a parser template file, in java, for running parsers
   generated by the GNU Bison parser generator.
*/

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	 See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/**************************************************/

public class Parser {

    // Set up the fake goto mechanism
    protected int Goto;
    protected static final int yynewstate = 0;
    protected static final int yybackup = 1;
    protected static final int yydefault = 2;
    protected static final int yyreduce = 3;
    protected static final int yyerrlab = 4;
    protected static final int yyerrlab1 = 5;
    protected static final int yyerrdefault = 6;
    protected static final int yyerrpop = 7;
    protected static final int yyerrhandle = 8;

    public static final int YYCONTINUE = 1;
    public static final int YYACCEPT = 0;
    public static final int YYABORT = -1;
    public static final int YYERROR = -2;

    public static final int YYEOF = 0;

    protected static final int YYEMPTY = -2;
    protected static final int YYTERROR = 1;
    protected static final int YYTERRCODE = 256;

    protected static final char EOL = '\n';

// CONSTANTS

static public final int YYFINAL = 640;
static public final int YYFLAG = -32768;
static public final int YYNTBASE = 118;
static public final int YYLAST = 4189;


    protected int yyreturn; // see ACTIONS switch
    protected int yystate;
    protected int yyn;
    protected int yylen;
    protected int yychar; /* the lookahead symbol */
    protected int yychar1;  /* lookahead token as an internal (translated)
			   Token number */
    protected int yynerrs; /* number of parse errors so far */
    protected int yydebug; /* nonzero means print parse trace */
    protected int yyerrstatus;	/* number of tokens to shift before error
			   messages enabled */
    public int yyshiftcount = 3; // default tokens to shift

    protected YYLocation loc;    // shared loc
    protected YYLocation yylbeg; // beg of current lexeme
    protected YYLocation yylend; // end of current lexeme

    public YYLocation tmploc = new YYLocation(); // auxiliary

    public Object yylval; // the semantic value of the lookahead symbol
    protected Object yyval;   // the variable used to return semantic values
			 	// from the action routines
    protected boolean yyerrthrow; /* t=>yyerror should throw ParseException;
				     f=>just return and let normal error
					recovery operate; default is false;*/
    protected LexException yylexexception;

    protected Int_Stack yyss;
    protected Object_Stack yyvs;
    protected YYLocationStack yyls;

    protected CompilationManager compMgr;

    // if false, the output from this parsed file will not be written
    // (used for sourcepath; when sources are parsed but not translated)
    protected boolean doProcessThisFile;

    protected Lexer yylex;
    protected java.io.PrintWriter yyerr;

    protected int lexmode;

// PROCS

final int YYTRANSLATE(int x)
	{ return ((x) <= 348 ? yytranslate[x] : 297);}


    // default constructor for newInstance()
    public Parser() {
	yyss = new Int_Stack();
	yyvs = new Object_Stack();
	yyls = new YYLocationStack();
	yylval = null;
	yylbeg = new YYLocation();
	yylend = new YYLocation();
	yydebug = 0;
	yyerrthrow = false;
	yylexexception = null;
    }

    public Parser(Lexer yyl, java.io.PrintWriter ferr) {
	this();
	_init(yyl, ferr);
    }

    protected void _init(Lexer yyl, java.io.PrintWriter ferr) {
	yylex = yyl;
	yyerr = ferr;
	loc = yylex.loc();
    }

    public int yyparse(CompilationManager compMgr, boolean doProcessThisFile)
        throws ParseException
    {
	this.compMgr = compMgr;
    this.doProcessThisFile = doProcessThisFile;
	this.lexmode = Lexer.JAVA_TOKEN;
        yylbeg.copyFrom(loc);
	yylend.copyFrom(loc);
	int yyresult = _parse();
	return yyresult;
    }

    int _parse() throws ParseException {
	int ok;
	yychar1 = 0;  /* lookahead Token as an internal (translated) */
	yystate = 0;
	yyerrstatus = 0;
	yynerrs = 0;
	yychar = YYEMPTY;  /* Cause a Token to be read.  */
	yyval = null;
	Goto = yynewstate;

	/* Initialize stack pointers.
	   Waste one element of value and location stack
	   so that they stay on the same level as the state stack.
	   The wasted elements are never initialized.  */

	yyss.clear();
	yyvs.clear();
	yyls.clear();

	/* need to push a null value to match state 0 */
	yyvs.push(null);

	if (yydebug > 0) yyprint("Starting parse\n");

	/* Push a new state, which is found in	yystate	 .  */
	/* In all cases, when you get here, the value and location stacks
	   have just been pushed. so pushing a state here evens the stacks.  */
	for(;;) {
	branch: switch (Goto) {

	case yynewstate:

	    yyss.push(yystate);

	    if (yydebug > 0) {
		yyprint("Entering state ");
		yyprint(yystate);
		yyprint("\n");
	    }

	case yybackup:

	    /* Do appropriate processing given the current state.  */
	    /* Read a lookahead token if we need one and don't already have one.  */
	    /* yyresume: */

	    /* First try to decide what to do without reference to lookahead token.  */

	    yyn = yypact[yystate];
	    if (yyn == YYFLAG) {
		Goto = yydefault;
		break branch;
	    }

	    /* Not known => get a lookahead token if don't already have one.  */

	    /* yychar is either YYEMPTY or YYEOF
	       or a valid token in external form.	 */

	    if (yychar == YYEMPTY) {
		if (yydebug > 0) yyprint("Reading a token: ");
		try {
		    // yylval = yylex.yylex();
		    yychar = yylex.yylex(cxt, this.lexmode);
		    yylval = yylex.yylval();
		} catch (LexException le) {
		    yyprintln("yyparse: LexException: " + le);
		    yylexexception = le;
		    // on lex error, treat like a syntax error
		    Goto = yyerrlab; break branch;
		}
	    }

	    /* Convert token to internal form (in yychar1) for indexing tables with */

	    if (yychar <= 0) {	        /* This means end of input. */
		yychar1 = 0;
		yychar = YYEOF;		/* Don't call YYLEX any more */
		if (yydebug > 0) yyprint("Now at end of input.\n");
	    } else {
		yychar1 = YYTRANSLATE(yychar);
		if (yydebug >= 10) {
		    yyprint("Next token is ");
		    yyprint(yychar);
		    yyprint(" (");
		    yyprint(yytname[yychar1]);
		    yyprint(")\n");
		}
	    }

	    yyn += yychar1;
	    if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1) {
		Goto = yydefault; break branch;
	    }

	    yyn = yytable[yyn];

	    /* yyn is what to do for this token type in this state.
	       Negative => reduce, -yyn is rule number.
	       Positive => shift, yyn is new state.
	       New state is final state => don't bother to shift,
	       just return success.
	       0, or most negative number => error.  */

	    if (yyn < 0) {
		if (yyn == YYFLAG) {
		    Goto = yyerrlab; break branch;
		}
		yyn = -yyn;
		Goto = yyreduce; break branch;
	    } else if (yyn == 0) {
		Goto = yyerrlab; break branch;
	    }

	    if (yyn == YYFINAL) return YYACCEPT;

	    /* Shift the lookahead token.	 */

	    if (yydebug > 0) {
		yyprint("Shifting token ");
		yyprint(yychar);
		yyprint(" (");
		yyprint(yytname[yychar1]);
		yyprint("), ");
	    }

	    /* Discard the token being shifted unless it is eof.	*/
	    if (yychar != YYEOF) yychar = YYEMPTY;

	    yyvs.push(yylval);
	    yylend.copyFrom(loc);
	    yyls.push(yylex.tokenloc());
	    yylbeg.copyFrom(yylex.loc());

	    /* count tokens shifted since error; after three, turn off error status.  */
	    if (yyerrstatus > 0) yyerrstatus--;

	    yystate = yyn;
	    Goto = yynewstate; break branch;

	    /* Do the default action for the current state.	 */
	case yydefault:

	    yyn = yydefact[yystate];
	    if (yyn == 0) {
		Goto = yyerrlab; break branch;
	    }

	    /* Do a reduction.  yyn is the number of a rule to reduce with.	 */
	case yyreduce:
	    yylen = yyr2[yyn];
	    if (yylen > 0) {
		yyval = yyvs.tth(1-yylen); /* implement default value of the action */
		yylbeg = yyls.tth(1-yylen, yylbeg); /* DK */
	    }
	    if (yydebug > 0) {
		int i;
		lstackdump("location stack now"); /* DK */
		yyprint("Reducing via rule ");
		yyprint(yyn);
		yyprint(" (line ");
		yyprint(yyrline[yyn]);
		yyprint("), ");
		/* Print the symbols being reduced, and their result.  */
		for (i = yyprhs[yyn]; yyrhs[i] > 0; i++) {
		    yyprint(yytname[yyrhs[i]]);
		    yyprint(" ");
		}
		yyprint(" -> ");
		yyprint(yytname[yyr1[yyn]]);
		yyprint(" " + lbeg() + " <--> " + lend()); /* DK */
		yyprint("\n");
	    }

	    /*$*/	/* the action file gets copied in in place of this dollarsign */

	    /* Provide a way to avoid having return statements in the actions
	       and so avoid "statement not reached" errors"
	    */
	    yyreturn = YYCONTINUE;

	    switch (yyn) {

case 1:
{ setNativeLanguage("c");
        compUnit = new YYCompilationUnit(cxt, compMgr, doProcessThisFile);
        pushScope(compUnit); ;
    break;}
case 2:
{ popScope(); yyval = compUnit.expand(cxt); ;
    break;}
case 8:
{ yyval = null; ;
    break;}
case 11:
{ yyval = new YYType(cxt, void.class); ;
    break;}
case 14:
{ yyval = new YYType(cxt, null); ;
    break;}
case 15:
{ yyval = new YYType(cxt, boolean.class); ;
    break;}
case 16:
{ yyval = new YYType(cxt, byte.class); ;
    break;}
case 17:
{ yyval = new YYType(cxt, short.class); ;
    break;}
case 18:
{ yyval = new YYType(cxt, int.class); ;
    break;}
case 19:
{ yyval = new YYType(cxt, long.class); ;
    break;}
case 20:
{ yyval = new YYType(cxt, char.class); ;
    break;}
case 21:
{ yyval = new YYType(cxt, float.class); ;
    break;}
case 22:
{ yyval = new YYType(cxt, double.class); ;
    break;}
case 25:
{ yyval = ((YYName)(yyvs.tth(0))).reclassifyAsType(); ;
    break;}
case 26:
{ yyval = ((YYType)(yyvs.tth(0))).setClassContext(); ;
    break;}
case 27:
{ yyval = new YYType(cxt, null); ;
    break;}
case 28:
{ yyval = ((YYType)(yyvs.tth(0))).setInterfaceContext(); ;
    break;}
case 29:
{ yyval = new YYType(cxt, null); ;
    break;}
case 30:
{ yyval = ((YYType)(yyvs.tth(-1))).addDims(cxt, ((YYDims)(yyvs.tth(0))).dims()); ;
    break;}
case 31:
{ yyval = ((YYName)(yyvs.tth(-1))).reclassifyAsType().addDims(cxt, ((YYDims)(yyvs.tth(0))).dims()); ;
    break;}
case 32:
{ yyval = new YYName(cxt).add(((YYNameNode)(yyvs.tth(0)))); ;
    break;}
case 33:
{ yyval = ((YYName)(yyvs.tth(-2))).add(((YYNameNode)(yyvs.tth(0)))); ;
    break;}
case 34:
{ yyval = new YYNameNode(cxt, ((String)(yyvs.tth(0)))); ;
    break;}
case 35:
{ compUnit.setPackageDeclaration(((YYPackage)(yyvs.tth(-1)))).setImportDeclarations(((YYImportDeclarationList)(yyvs.tth(0)))); ;
    break;}
case 36:
{ compUnit.setPackageDeclaration(((YYPackage)(yyvs.tth(0)))).setImportDeclarations(new YYImportDeclarationList(cxt)); ;
    break;}
case 37:
{ compUnit                          .setImportDeclarations(((YYImportDeclarationList)(yyvs.tth(0)))); ;
    break;}
case 38:
{ compUnit.setImportDeclarations(new YYImportDeclarationList(cxt)); ;
    break;}
case 39:
{ compUnit.addTypeDeclaration(((YYClass)(yyvs.tth(0)))); ;
    break;}
case 40:
{ compUnit.addTypeDeclaration(((YYClass)(yyvs.tth(0)))); ;
    break;}
case 41:
{ yyval = new YYImportDeclarationList(cxt).addSingle(((YYName)(yyvs.tth(0)))); ;
    break;}
case 42:
{ yyval = new YYImportDeclarationList(cxt).addOnDemand(((YYName)(yyvs.tth(0)))); ;
    break;}
case 43:
{ yyval = ((YYImportDeclarationList)(yyvs.tth(-1))).addSingle(((YYName)(yyvs.tth(0)))); ;
    break;}
case 44:
{ yyval = ((YYImportDeclarationList)(yyvs.tth(-1))).addOnDemand(((YYName)(yyvs.tth(0)))); ;
    break;}
case 45:
{ yyval = ((YYName)(yyvs.tth(-1))).reclassifyAsPackage().expand(cxt); ;
    break;}
case 46:
{ yyval = ((YYName)(yyvs.tth(-1))); ;
    break;}
case 47:
{ yyval = ((YYName)(yyvs.tth(-3))); ;
    break;}
case 50:
{ yyval = null; ;
    break;}
case 51:
{ yyval = new YYModifierList(cxt).add(((YYModifier)(yyvs.tth(0)))); ;
    break;}
case 52:
{ yyval = ((YYModifierList)(yyvs.tth(-1))).add(((YYModifier)(yyvs.tth(0)))); ;
    break;}
case 53:
{ yyval = new YYModifier(cxt, Modifier.PUBLIC); ;
    break;}
case 54:
{ yyval = new YYModifier(cxt, Modifier.PROTECTED); ;
    break;}
case 55:
{ yyval = new YYModifier(cxt, Modifier.PRIVATE); ;
    break;}
case 56:
{ yyval = new YYModifier(cxt, Modifier.STATIC); ;
    break;}
case 57:
{ yyval = new YYModifier(cxt, Modifier.ABSTRACT); ;
    break;}
case 58:
{ yyval = new YYModifier(cxt, Modifier.FINAL); ;
    break;}
case 59:
{ yyval = new YYModifier(cxt, Modifier.SYNCHRONIZED); ;
    break;}
case 60:
{ yyval = new YYModifier(cxt, Modifier.STRICT); ;
    break;}
case 61:
{ yyval = new YYModifier(cxt, Modifier.PUBLIC); ;
    break;}
case 62:
{ yyval = new YYModifier(cxt, Modifier.VOLATILE); ;
    break;}
case 63:
{ yyval = new YYNativeModifier(cxt, getNativeLanguage()); ;
    break;}
case 64:
{ yyval = new YYNativeModifier(cxt, ((String)(yyvs.tth(0)))); setNativeLanguage(((String)(yyvs.tth(0)))); ;
    break;}
case 65:
{ yyval = ((YYModifierList)(yyvs.tth(-1))).add(((YYModifier)(yyvs.tth(0)))); ;
    break;}
case 66:
{ yyval = ((YYModifierList)(yyvs.tth(-1))).add(((YYNativeModifier)(yyvs.tth(0)))); ;
    break;}
case 67:
{ yyval = new YYModifierList(cxt).add(((YYNativeModifier)(yyvs.tth(0)))); ;
    break;}
case 68:
{ pushScope(((YYClass)(yyvs.tth(0)))); ;
    break;}
case 69:
{ yyval = ((YYClass)popScope()).expand(cxt); ;
    break;}
case 70:
{ yyval = ((YYClass)(yyvs.tth(-2))).setSuperclass(((YYType)(yyvs.tth(-1)))).setInterfaces(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 71:
{ yyval = new YYClass(cxt, ((String)(yyvs.tth(0))), YYClass.CLASS, ((YYModifierList)(yyvs.tth(-2)))); ;
    break;}
case 72:
{ yyval = new YYClass(cxt, ((String)(yyvs.tth(0))), YYClass.CLASS, null); ;
    break;}
case 73:
{ yyval = ((YYType)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 74:
{ yyval = null; ;
    break;}
case 75:
{ yyval = ((YYTypeList)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 76:
{ yyval = null; ;
    break;}
case 77:
{ yyval = new YYTypeList(cxt).add(((YYType)(yyvs.tth(0)))); ;
    break;}
case 78:
{ yyval = ((YYTypeList)(yyvs.tth(-2))).add(((YYType)(yyvs.tth(0)))); ;
    break;}
case 79:
{ yyval = null; /*new YYNode(cxt);*/ ;
    break;}
case 80:
{ yyval = null; /*new YYStatement(cxt);*/ ;
    break;}
case 84:
{ ((YYClass)peekScope()).addStaticInitializer(((YYStatement)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 85:
{ ((YYClass)peekScope()).addConstructor(((YYMethod)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 86:
{ ((YYClass)peekScope()).addInstanceInitializer(((YYStatement)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 87:
{ ((YYClass)peekScope()).addStaticNativeStatement(((YYStaticNativeStatement)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 88:
{ lexmode = Lexer.NATIVE_PURE; ;
    break;}
case 89:
{ lexmode = Lexer.JAVA_TOKEN; ;
    break;}
case 90:
{ yyval = new YYStaticNativeStatement(cxt).setNativeLanguage(((YYNativeModifier)(yyvs.tth(-5))).getLanguage()).
                                                  setImplementation(((YYNativeCode)(yyvs.tth(-2)))); ;
    break;}
case 91:
{ ((YYClass)peekScope()).addField(((YYField)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 92:
{ ((YYClass)peekScope()).addMethod(((YYMethod)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 93:
{ ((YYClass)peekScope()).addMethod(((YYMethod)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 94:
{ ((YYClass)peekScope()).addClass(((YYClass)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 95:
{ ((YYClass)peekScope()).addClass(((YYClass)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 96:
{ yyval = new YYField(cxt, ((YYModifierList)(yyvs.tth(-3))), ((YYType)(yyvs.tth(-2))), ((YYVariableDeclaratorList)(yyvs.tth(-1)))); ;
    break;}
case 97:
{ yyval = new YYField(cxt, null, ((YYType)(yyvs.tth(-2))), ((YYVariableDeclaratorList)(yyvs.tth(-1)))); ;
    break;}
case 98:
{ yyval = new YYVariableDeclaratorList(cxt).add(((YYVariableDeclarator)(yyvs.tth(0)))); ;
    break;}
case 99:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(-2))).add(((YYVariableDeclarator)(yyvs.tth(0)))); ;
    break;}
case 101:
{ yyval = ((YYVariableDeclarator)(yyvs.tth(-2))).expand(cxt); ;
    break;}
case 102:
{ yyval = new YYVariableDeclarator(cxt, ((String)(yyvs.tth(0)))); ;
    break;}
case 103:
{ yyval = new YYVariableDeclarator(cxt, ((String)(yyvs.tth(-1)))).addDims(((YYDims)(yyvs.tth(0))).dims()); ;
    break;}
case 106:
{ yyval = ((YYMethod)popScope()).setBody(((YYStatement)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 107:
{ yyval = ((YYMethod)(yyvs.tth(-1))).setModifiers(((YYModifierList)(yyvs.tth(-3)))).setReturnType(((YYType)(yyvs.tth(-2)))).setThrows(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 108:
{ yyval = ((YYMethod)(yyvs.tth(-1)))                 .setReturnType(((YYType)(yyvs.tth(-2)))).setThrows(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 109:
{ yyval = ((YYMethod)(yyvs.tth(-2))).setModifiers(((YYModifierList)(yyvs.tth(-4)))).setReturnType(((YYType)(yyvs.tth(-3))), ((YYDims)(yyvs.tth(-1))).dims()).setThrows(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 110:
{ yyval = ((YYMethod)(yyvs.tth(-2)))                 .setReturnType(((YYType)(yyvs.tth(-3))), ((YYDims)(yyvs.tth(-1))).dims()).setThrows(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 111:
{ yyval = ((YYMethod)(yyvs.tth(-1))).setModifiers(((YYModifierList)(yyvs.tth(-3)))).setReturnType(((YYType)(yyvs.tth(-2)))).setThrows(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 112:
{ yyval = ((YYMethod)(yyvs.tth(-1)))                 .setReturnType(((YYType)(yyvs.tth(-2)))).setThrows(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 113:
{ pushScope(new YYMethod(cxt, ((String)(yyvs.tth(-1))), YYMethod.METHOD)); ;
    break;}
case 114:
{ yyval = ((YYMethod)peekScope()).setParameters(((YYVariableDeclaratorList)(yyvs.tth(-1)))); addVariables(((YYVariableDeclaratorList)(yyvs.tth(-1)))); ;
    break;}
case 115:
{ yyval = null; ;
    break;}
case 116:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(0))).setDeclarationType(YYVariableDeclarator.PARAMETER); ;
    break;}
case 117:
{ yyval = new YYVariableDeclaratorList(cxt).add(((YYVariableDeclarator)(yyvs.tth(0)))); ;
    break;}
case 118:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(-2))).add(((YYVariableDeclarator)(yyvs.tth(0)))); ;
    break;}
case 119:
{ yyval = ((YYVariableDeclarator)(yyvs.tth(0))).setModifiers(((YYModifierList)(yyvs.tth(-2)))).setType(((YYType)(yyvs.tth(-1)))).expand(cxt); ;
    break;}
case 120:
{ yyval = ((YYVariableDeclarator)(yyvs.tth(0)))                 .setType(((YYType)(yyvs.tth(-1)))).expand(cxt); ;
    break;}
case 121:
{ yyval = null; ;
    break;}
case 122:
{ yyval = ((YYTypeList)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 123:
{ yyval = new YYTypeList(cxt).add(((YYType)(yyvs.tth(0)))); ;
    break;}
case 124:
{ yyval = ((YYTypeList)(yyvs.tth(-2)))                 .add(((YYType)(yyvs.tth(0)))); ;
    break;}
case 126:
{ yyval = null; /*new YYStatement(cxt);*/ ;
    break;}
case 127:
{ yyval = ((YYNativeMethod)popScope()).setBody(((YYNativeMethodImplementation)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 128:
{ yyval = ((YYNativeMethod)(yyvs.tth(-1))).setModifiers(((YYModifierList)(yyvs.tth(-3)))).setReturnType(((YYType)(yyvs.tth(-2)))).
                                                                             setThrows(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 129:
{ yyval = ((YYNativeMethod)(yyvs.tth(-2))).setModifiers(((YYModifierList)(yyvs.tth(-4)))).setReturnType(((YYType)(yyvs.tth(-3))), ((YYDims)(yyvs.tth(-1))).dims()).
                                                                             setThrows(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 130:
{ yyval = ((YYNativeMethod)(yyvs.tth(-1))).setModifiers(((YYModifierList)(yyvs.tth(-3)))).setReturnType(((YYType)(yyvs.tth(-2)))).
                                                                             setThrows(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 131:
{ pushScope(new YYNativeMethod(cxt, ((String)(yyvs.tth(-1))))); ;
    break;}
case 132:
{ yyval = ((YYNativeMethod)peekScope()).setParameters(((YYVariableDeclaratorList)(yyvs.tth(-1)))); addVariables(((YYVariableDeclaratorList)(yyvs.tth(-1)))); ;
    break;}
case 134:
{ yyval = null; /*new YYStatement(cxt);*/ ;
    break;}
case 135:
{ pushScope(new YYNativeStatement(cxt)); ;
    break;}
case 136:
{ yyval = ((YYNativeStatement)popScope()).addBody(((YYNativeMethodImplementation)(yyvs.tth(0)))).setNativeLanguage(((YYNativeModifier)(yyvs.tth(-2))).getLanguage()).expand(cxt); ;
    break;}
case 137:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 138:
{ yyval = ((YYMethod)popScope()).setBody(((YYStatement)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 139:
{ yyval = ((YYMethod)(yyvs.tth(-1))).setModifiers(((YYModifierList)(yyvs.tth(-2)))).setThrows(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 140:
{ yyval = ((YYMethod)(yyvs.tth(-1)))                 .setThrows(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 141:
{ pushScope(new YYMethod(cxt, ((String)(yyvs.tth(-1))), YYMethod.CONSTRUCTOR)); ;
    break;}
case 142:
{ yyval = ((YYMethod)peekScope()).checkName(cxt).setParameters(((YYVariableDeclaratorList)(yyvs.tth(-1)))); addVariables(((YYVariableDeclaratorList)(yyvs.tth(-1)))); ;
    break;}
case 143:
{ pushScope(new YYStatement(cxt, true, true)); ;
    break;}
case 144:
{ yyval = ((YYStatement)popScope()).compact(); ;
    break;}
case 145:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 146:
{ yyval = null; ;
    break;}
case 147:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 148:
{ yyval = null; ;
    break;}
case 149:
{ yyval = null; /*new YYStatement(cxt);*/ ;
    break;}
case 150:
{ yyval = null; /*new YYStatement(cxt);*/ ;
    break;}
case 151:
{ yyval = null; /*new YYStatement(cxt);*/ ;
    break;}
case 152:
{ yyval = ((YYClass)popScope()) /*.setBody($2)*/.expand(cxt); ;
    break;}
case 153:
{ yyval = ((YYClass)(yyvs.tth(-1))).setInterfaces(((YYTypeList)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 155:
{ yyval = new YYClass(cxt, ((String)(yyvs.tth(0))), YYClass.INTERFACE, ((YYModifierList)(yyvs.tth(-2)))); pushScope(((YYClass)yyval)); ;
    break;}
case 156:
{ yyval = new YYClass(cxt, ((String)(yyvs.tth(0))), YYClass.INTERFACE, null); pushScope(((YYClass)yyval)); ;
    break;}
case 157:
{ yyval = new YYTypeList(cxt).add(((YYType)(yyvs.tth(0)))); ;
    break;}
case 158:
{ yyval = ((YYTypeList)(yyvs.tth(-2))).add(((YYType)(yyvs.tth(0)))); ;
    break;}
case 159:
{ yyval = null; ;
    break;}
case 160:
{ yyval = null; ;
    break;}
case 163:
{ ((YYClass)peekScope()).addField(((YYField)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 164:
{ ((YYClass)peekScope()).addMethod(((YYMethod)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 165:
{ ((YYClass)peekScope()).addClass(((YYClass)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 166:
{ ((YYClass)peekScope()).addClass(((YYClass)(yyvs.tth(0)))); yyval = null; ;
    break;}
case 168:
{ yyval = ((YYMethod)popScope()).expand(cxt); ;
    break;}
case 169:
{ yyval = null; ;
    break;}
case 170:
{ yyval = null; ;
    break;}
case 171:
{ yyval = null; ;
    break;}
case 172:
{ yyval = null; ;
    break;}
case 173:
{ yyval = null; ;
    break;}
case 176:
{ pushScope(new YYStatement(cxt, true, true)); ;
    break;}
case 177:
{ yyval = ((YYStatement)popScope()).compact().expand(cxt); ;
    break;}
case 178:
{ yyval = peekScope(); ;
    break;}
case 180:
{ yyval = ((YYStatement)peekScope()).add(((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 181:
{ yyval = ((YYStatement)(yyvs.tth(-1))).add(((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 182:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(0))); ;
    break;}
case 184:
{ yyval = ((YYClass)(yyvs.tth(0))); ;
    break;}
case 185:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(-1))).expand(cxt); addVariables(((YYVariableDeclaratorList)(yyvs.tth(-1)))); ;
    break;}
case 186:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(0))).setModifiers(((YYModifierList)(yyvs.tth(-2)))).setType(((YYType)(yyvs.tth(-1))))
                                                            .setDeclarationType(YYVariableDeclarator.LOCAL_VARIABLE); ;
    break;}
case 187:
{ yyval = ((YYVariableDeclaratorList)(yyvs.tth(0))).setType(((YYType)(yyvs.tth(-1))))
                                                            .setDeclarationType(YYVariableDeclarator.LOCAL_VARIABLE); ;
    break;}
case 210:
{ yyval = ((YYNativeStatement)(yyvs.tth(0))); ;
    break;}
case 211:
{ yyval = new YYStatement(cxt); ;
    break;}
case 212:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 213:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 214:
{ yyval = new YYStatement(cxt); ;
    break;}
case 222:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 223:
{ yyval = new YYStatement(cxt).add(((YYStatement)(yyvs.tth(-2)))).add(((YYStatement)(yyvs.tth(0)))).compact(); ;
    break;}
case 224:
{ yyval = new YYStatement(cxt).add(((YYStatement)(yyvs.tth(-2)))).add(((YYStatement)(yyvs.tth(0)))).compact(); ;
    break;}
case 225:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 226:
{ yyval = ((YYStatement)(yyvs.tth(-2))).expand(cxt); ;
    break;}
case 227:
{ yyval = ((YYStatement)(yyvs.tth(-1))).expand(cxt); ;
    break;}
case 228:
{ yyval = new YYStatement(cxt, true, true); ;
    break;}
case 229:
{ yyval = new YYStatement(cxt, true, true); ;
    break;}
case 231:
{ yyval = ((YYStatement)(yyvs.tth(-1))).absorb(((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 232:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 237:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 238:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 239:
{ yyval = ((YYStatement)(yyvs.tth(-3))).expand(cxt); ;
    break;}
case 240:
{ yyval = ((YYStatement)popScope()).add(((YYStatement)(yyvs.tth(0)))).compact(); ;
    break;}
case 241:
{ yyval = ((YYStatement)(yyvs.tth(-1))).add(((YYStatement)(yyvs.tth(0)))).compact(); ;
    break;}
case 242:
{ pushScope(new YYStatement(cxt)); ;
    break;}
case 244:
{ yyval = new YYStatement(cxt); ;
    break;}
case 245:
{ addVariables(((YYVariableDeclaratorList)(yyvs.tth(0)))); ;
    break;}
case 246:
{ yyval = null; ;
    break;}
case 248:
{ yyval = null; ;
    break;}
case 249:
{ yyval = null; ;
    break;}
case 250:
{ yyval = null; ;
    break;}
case 253:
{ yyval = new YYStatement(cxt); ;
    break;}
case 254:
{ yyval = new YYStatement(cxt); ;
    break;}
case 255:
{ yyval = new YYStatement(cxt); ;
    break;}
case 256:
{ yyval = new YYStatement(cxt); ;
    break;}
case 257:
{ yyval = new YYStatement(cxt); ;
    break;}
case 258:
{ yyval = new YYStatement(cxt); ;
    break;}
case 259:
{ yyval = new YYStatement(cxt); ;
    break;}
case 260:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 261:
{ yyval = ((YYStatement)(yyvs.tth(-1))).absorb(((YYStatement)(yyvs.tth(0)))).expand(cxt); ;
    break;}
case 262:
{ yyval = ((YYStatement)(yyvs.tth(-2))).absorb(((YYStatement)(yyvs.tth(-1)))).add(((YYStatement)(yyvs.tth(0)))).compact().expand(cxt); ;
    break;}
case 263:
{ yyval = ((YYStatement)(yyvs.tth(-1))).add(((YYStatement)(yyvs.tth(0)))).compact().expand(cxt); ;
    break;}
case 264:
{ yyval = new YYStatement(cxt).add(((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 265:
{ yyval = ((YYStatement)(yyvs.tth(-1))).add(((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 266:
{ yyval = ((YYStatement)popScope()).add(((YYStatement)(yyvs.tth(0)))); ;
    break;}
case 267:
{ pushScope(new YYStatement(cxt)); ;
    break;}
case 268:
{ addVariable(((YYVariableDeclarator)(yyvs.tth(-1))).setDeclarationType(YYVariableDeclarator.CATCH_PARAMETER)); ;
    break;}
case 269:
{ yyval = ((YYStatement)(yyvs.tth(0))).expand(cxt); ;
    break;}
case 270:
{ lexmode = Lexer.NATIVE_STATEMENTS; pushScope(new YYNativeMethodImplementation(cxt)); ;
    break;}
case 271:
{ lexmode = Lexer.JAVA_TOKEN; ;
    break;}
case 272:
{ yyval = ((YYNativeMethodImplementation)popScope()).compact().expand(cxt); ;
    break;}
case 273:
{ yyval = ((YYNativeMethodImplementation)peekScope()).addStatements(((YYNativeCode)(yyvs.tth(0)))); ;
    break;}
case 274:
{ yyval = null; ;
    break;}
case 277:
{ yyval = null; ;
    break;}
case 278:
{ yyval = null; ;
    break;}
case 279:
{ yyval = null; ;
    break;}
case 280:
{ yyval = null; ;
    break;}
case 286:
{ yyval = null; ;
    break;}
case 290:
{ lexmode = Lexer.NATIVE_EXPRESSION; ;
    break;}
case 291:
{ lexmode = Lexer.JAVA_TOKEN; ;
    break;}
case 292:
{ yyval = new YYEnclosedNativeExpression(cxt, ((YYNativeCode)(yyvs.tth(-2)))); ;
    break;}
case 293:
{ lexmode = Lexer.NATIVE_STRING; ;
    break;}
case 294:
{ lexmode = Lexer.JAVA_TOKEN; ;
    break;}
case 295:
{ yyval = new YYEnclosedNativeString(cxt, ((YYNativeCode)(yyvs.tth(-2)))); ;
    break;}
case 296:
{ lexmode = Lexer.NATIVE_UNICODE_STRING; ;
    break;}
case 297:
{ lexmode = Lexer.JAVA_TOKEN; ;
    break;}
case 298:
{ yyval = new YYEnclosedNativeString(cxt, ((YYNativeCode)(yyvs.tth(-2))), true); ;
    break;}
case 299:
{ yyval = null; ;
    break;}
case 300:
{ yyval = null; ;
    break;}
case 301:
{ yyval = null; ;
    break;}
case 302:
{ yyval = null; ;
    break;}
case 303:
{ pushScope(new YYClass(cxt, ((YYType)(yyvs.tth(-1))))); ;
    break;}
case 304:
{ yyval = null; popScope(); ;
    break;}
case 305:
{ yyval = null; ;
    break;}
case 306:
{ pushScope(new YYClass(cxt, ((YYExpression)(yyvs.tth(-4))), ((String)(yyvs.tth(-1))))); ;
    break;}
case 307:
{ yyval = null; popScope(); ;
    break;}
case 308:
{ yyval = null; ;
    break;}
case 311:
{ yyval = null; ;
    break;}
case 312:
{ yyval = null; ;
    break;}
case 313:
{ yyval = null; ;
    break;}
case 314:
{ yyval = null; ;
    break;}
case 315:
{ yyval = null; ;
    break;}
case 316:
{ yyval = null; ;
    break;}
case 317:
{ yyval = null; ;
    break;}
case 318:
{ yyval = null; ;
    break;}
case 323:
{ yyval = new YYDims(cxt).addDim(cxt); ;
    break;}
case 324:
{ yyval = ((YYDims)(yyvs.tth(-2))).addDim(cxt); ;
    break;}
case 325:
{ yyval = null; ;
    break;}
case 326:
{ yyval = null; ;
    break;}
case 327:
{ yyval = null; ;
    break;}
case 328:
{ yyval = null; ;
    break;}
case 329:
{ yyval = null; ;
    break;}
case 330:
{ yyval = null; ;
    break;}
case 333:
{ yyval = null; ;
    break;}
case 340:
{ yyval = null; ;
    break;}
case 341:
{ yyval = null; ;
    break;}
case 343:
{ yyval = null; ;
    break;}
case 344:
{ yyval = null; ;
    break;}
case 346:
{ yyval = null; ;
    break;}
case 347:
{ yyval = null; ;
    break;}
case 349:
{ yyval = null; ;
    break;}
case 350:
{ yyval = null; ;
    break;}
case 351:
{ yyval = null; ;
    break;}
case 352:
{ yyval = null; ;
    break;}
case 353:
{ yyval = null; ;
    break;}
case 389:
{ yyval = null; ;
    break;}
}



	    if(yyreturn == YYERROR) {
		Goto = yyerrlab1; break branch;
	    } else if(yyreturn != YYCONTINUE) return yyreturn;

	    yyvs.popn(yylen);
	    yyss.popn(yylen);
	    /* yyls.popn(yylen); */

	    yyvs.push(yyval);
	    /*  yylsp++;*/
	    if (yylen == 0) {
		yyls.push(yylbeg);
	    } else {
		yyls.popn(yylen-1);
	    }

	    if (yydebug > 0) {
		stackdump("state stack now");
		lstackdump("location stack now");
	    }

	    /* Now "shift" the result of the reduction.
	       Determine what state that goes to,
	       based on the state we popped back to
	       and the rule number reduced by.  */

	    yyn = yyr1[yyn];

	    yystate = yypgoto[yyn - YYNTBASE] + yyss.peek();
	    if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == yyss.peek()) {
		yystate = yytable[yystate];
	    } else {
		yystate = yydefgoto[yyn - YYNTBASE];
	    }

	    Goto = yynewstate; break branch;

	case yyerrlab:	 /* here on detecting error */

	    if (yyerrstatus == 0) {
		/* If not already recovering from an error, report this error.  */
		++yynerrs;
		parseError("parse error");
	    }

	case yyerrlab1:	  /* here on error raised explicitly by an action */

	    if (yyerrstatus == yyshiftcount) {
		/* if just tried and failed to reuse lookahead token
		   after an error, discard it.	*/
		/* return failure if at end of input */
		if (yychar == YYEOF) {
		    if(yydebug > 0)
			yyprint("EOF during error recovery; aborting.");
		    return YYABORT;
		}

		if (yydebug > 0) {
		    yyprint("Discarding token ");
		    yyprint(yychar);
		    yyprint(" (");
		    yyprint(yytname[yychar1]);
		    yyprint(").\n");
		}
		yychar = YYEMPTY;
	    }

	    /* Else will try to reuse lookahead token
	       after shifting the error token.  */

	    yyerrstatus = yyshiftcount;	/* Each real token shifted decrements this */

	    Goto = yyerrhandle; break branch;

	case yyerrdefault:  /* state does notthing special for the error token. */
	case yyerrpop:	 /* pop the current state because it cannot handle the error token */

	    yyvs.popn(1);
	    yyss.pop();
	    if (yyss.empty()) {
		if(yydebug > 0)
		    yyprint("Empty stack during error recovery; aborting.");
		return YYABORT;
	    }
	    yystate = yyss.top();
	    yyls.popn(1);

	    if (yydebug > 0) {
		stackdump("Error: state stack now");
		lstackdump("Error: location stack now");
	    }

	case yyerrhandle:

	    yyn = yypact[yystate];
	    if (yyn == YYFLAG) {
		Goto = yyerrdefault; break branch;
	    }

	    yyn += YYTERROR;
	    if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR) {
		Goto = yyerrdefault; break branch;
	    }

	    yyn = yytable[yyn];
	    if (yyn < 0) {
		if (yyn == YYFLAG) {
		    Goto = yyerrpop; break branch;
		}
		yyn = -yyn;
		Goto = yyreduce; break branch;
	    } else if (yyn == 0) {
		Goto = yyerrpop; break branch;
	    }
	    if (yyn == YYFINAL) return YYACCEPT;

	    if (yydebug > 0) {
		yyprint("Shifting error token, ");
	    }

	    yyvs.push(yylval);
	    yylend.copyFrom(loc);
	    yyls.push(yylex.tokenloc());
	    yylbeg.copyFrom(yylex.loc());

	    yystate = yyn;
	    Goto = yynewstate; break branch;

	}//switch
	}//for(;;)

    } // parse

    public void yyclearin() {
	if (yychar != YYEMPTY) {
	    loc.copyFrom(yylend);
	    yylval = null;
	    yychar = YYEMPTY;
	}
    }

    public String yyerror_verbose(String msg0) throws ParseException {
	yyn = yypact[yystate];
	if(yyn > YYFLAG && yyn < YYLAST) {
	    int size = msg0.length();
	    StringBuffer msg;
	    int yychar1; // a TRANSLATEd char value
	    int count;
	    count = 0;

	    /* Start yychar1 at -yyn if nec to avoid negative indexes in yycheck.*/
	    for (yychar1 = (yyn < 0 ? -yyn : 0);
		 (yyn+yychar1) < (yytname.length);
		 yychar1++) {
		if((yyn+yychar1) < yycheck.length
		   && yycheck[yyn+yychar1] == yychar1) {
		    size += (yytname[yychar1].length()) + 15;
		    count++;
		}
	    }
	    msg = new StringBuffer(size+15);
	    msg.append(msg0);
	    msg.append("(state " + Integer.toString(yystate) + ")");
	    yychar1 = (yyn < 0)? - yyn :0;
	    for(count=0,yychar1 = (yyn < 0 ? -yyn : 0);
		(yyn+yychar1) < (yytname.length) && count < 5;
		yychar1++) {
		if((yyn+yychar1) < yycheck.length
		   && yycheck[yyn+yychar1] == yychar1) {
		    msg.append(count == 0 ? ", expecting " : " or ");
		    msg.append(yytname[yychar1]);
		    count++;
		}
	    }
	    return msg.toString();
	}
	return msg0;
    }

    public void yyerror(String msg, boolean verbose, boolean dumpstack)
            throws ParseException {
	String s;
	if(verbose) {
	    s = yyerror_verbose(msg);
	} else {
	    s = msg;
	}
	yyprint("yyerror: ");
	if(yychar == YYEOF) {
	    yyprint("at end of file");
	    yyprintln(" ; " + s);
	} else {
	    YYlocation loc = yylex.tokenloc();
	    yyprint("line ");
	    yyprint(loc.lineno()+1);
	    yyprint(" char ");
	    int cno = loc.charno();
	    yyprint(cno+1);
	    yyprintln(" token=|"+yytext()+"| ; "+ s);
	    String line = yyline();
	    if(line != null) {
		if(cno >= line.length()) cno = line.length();
		if(line.charAt(line.length()-1) == EOL)
		    yyprint(line);
		else
		    yyprintln(line);

		// for(int i=0;i<cno;i++) yyprint(" ");
		/* Modified by Dawid Kurzyniec, February 2000 */
		for (int i=0; i<cno; i++) {
		    char c = line.charAt(i);
		    if (Character.isWhitespace(c)) // e.g. \t
			yyprint("" + c);
		    else
			yyprint(" ");
		}

		yyprintln("^");
	    }
	}
	if(dumpstack) { stackdump("yyerror: state stack"); }
	if(yyerrthrow) throw new ParseException(s);
    }

    public void yyerror(String s, boolean verbose) throws ParseException {
	yyerror(s, verbose, false);
    }

    public void yyerror(String s) throws ParseException {
	yyerror(s, false, false);
    }

    public void yyreturn(int t) { yyreturn = t; }

    public void YYERROR() { yyreturn(YYERROR); }
    public void yyerrok() { yyerrstatus = 0; }
    public boolean YYRECOVERING() { return (yyerrstatus != 0); }

    public void setdebug(boolean i) { yydebug = i ? 1:0; }
    public void setdebug(int i) { yydebug = i > 0 ? i:0; }
    public void seterrthrow(boolean b) { yyerrthrow = b; }

    protected void stackdump(String s) {
	int i;
	int x;
	int ssp1 = yyss.depth();
	yyprint(s);
	if(ssp1 == 0) {
	    yyprint("<empty>");
	} else {
	    for(i=0;i<ssp1;i++) {
		x = yyss.ith(i);
		yyprint(" ");
		yyprint(x);
	    }
	}
	yyprint("\n");
    }

    protected void lstackdump(String s) {
	int i;
	int lsp1 = yyls.size();
	yyprint(s);
	if(lsp1 == 0) {
	    yyprint("<empty>");
	} else {
	    for(i=0;i<lsp1;i++) {
		YYLocation x = yyls.ith(i, tmploc);
		yyprint("  ");
		yyprint("" + x);
	    }
	    yyprint("  <-->  " + yylend);
	}
	yyprint("\n");
    }

    public String yyline() { return yylex.yyline(); }

    public StringBuffer yytext() { return yylex.yytext(); }

    //    public YYlocation currentloc() { return yylex.currentloc(); }
    //    public YYlocation tokenloc() { return yylex.tokenloc(); }

    public final pl.edu.agh.icsr.janet.YYLocation loc() { return loc; }
    public final pl.edu.agh.icsr.janet.YYLocation lbeg() { return yylbeg; }
    public final pl.edu.agh.icsr.janet.YYLocation lend() { return yylend; }
    public final pl.edu.agh.icsr.janet.YYLocation loc(int pos) { return yyls.tth(pos-yylen); }

    protected void yyprint(Object x) { yyerr.print(x); yyerr.flush(); }
    protected void yyprintln(Object x) { yyerr.println(x); yyerr.flush(); }
    protected void yyprint(int x) { yyerr.print(x); yyerr.flush(); }
    protected void yyprintln(int x) { yyerr.println(x); yyerr.flush(); }

// TABLES

static public final int yytranslate[] = create$yytranslate();
private static int[] create$yytranslate() { return new int[] {
     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   109,     2,     2,     2,   111,   114,     2,   101,
   102,    96,   106,    97,   107,    94,   110,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   103,    95,   112,
   100,   113,   117,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   104,     2,   105,   115,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    98,   116,    99,   108,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93

}; }

static public final int yyprhs[] = create$yyprhs();
private static int[] create$yyprhs() { return new int[] {
     0,
     0,     1,     4,     6,     8,    10,    12,    14,    16,    18,
    20,    22,    24,    26,    28,    30,    32,    34,    36,    38,
    40,    42,    44,    46,    48,    50,    52,    54,    56,    58,
    61,    64,    66,    70,    72,    75,    77,    79,    80,    83,
    86,    88,    90,    93,    96,   100,   104,   110,   112,   114,
   116,   118,   121,   123,   125,   127,   129,   131,   133,   135,
   137,   139,   141,   143,   146,   149,   152,   154,   155,   159,
   163,   167,   170,   173,   174,   177,   178,   180,   184,   188,
   191,   193,   196,   198,   200,   202,   204,   206,   207,   208,
   215,   217,   219,   221,   223,   225,   230,   234,   236,   240,
   242,   246,   248,   251,   253,   255,   258,   263,   267,   273,
   278,   283,   287,   288,   294,   295,   297,   299,   303,   307,
   310,   311,   314,   316,   320,   322,   324,   327,   332,   338,
   343,   344,   350,   352,   354,   355,   359,   362,   365,   369,
   372,   373,   379,   380,   385,   388,   390,   392,   393,   397,
   401,   407,   410,   413,   415,   419,   422,   425,   429,   433,
   436,   438,   441,   443,   445,   447,   449,   451,   454,   459,
   463,   467,   470,   474,   476,   480,   481,   486,   487,   489,
   491,   494,   496,   498,   500,   503,   507,   510,   512,   514,
   516,   518,   520,   522,   524,   526,   528,   530,   532,   534,
   536,   538,   540,   542,   544,   546,   548,   550,   552,   554,
   556,   558,   562,   566,   569,   571,   573,   575,   577,   579,
   581,   583,   587,   593,   599,   603,   608,   612,   616,   619,
   621,   624,   627,   629,   632,   636,   639,   643,   647,   653,
   656,   659,   660,   670,   672,   674,   675,   677,   678,   680,
   681,   683,   687,   691,   694,   698,   701,   705,   708,   712,
   716,   720,   725,   729,   731,   734,   737,   738,   744,   747,
   748,   749,   755,   757,   758,   760,   762,   766,   770,   772,
   774,   776,   778,   780,   782,   784,   788,   790,   792,   794,
   795,   796,   803,   804,   805,   812,   813,   814,   821,   825,
   829,   833,   837,   838,   844,   848,   849,   857,   863,   865,
   869,   873,   876,   881,   885,   890,   895,   899,   904,   906,
   909,   913,   917,   920,   924,   928,   932,   935,   940,   945,
   948,   951,   953,   955,   957,   959,   962,   965,   967,   969,
   972,   975,   977,   980,   983,   985,   988,   991,   993,   999,
  1004,  1009,  1015,  1020,  1022,  1026,  1030,  1034,  1036,  1040,
  1044,  1046,  1050,  1054,  1058,  1060,  1064,  1068,  1072,  1076,
  1080,  1082,  1086,  1090,  1092,  1096,  1098,  1102,  1104,  1108,
  1110,  1114,  1116,  1120,  1122,  1128,  1130,  1132,  1136,  1138,
  1140,  1142,  1144,  1146,  1148,  1150,  1152,  1154,  1156,  1158,
  1160,  1162,  1164,  1166,  1168

}; }

static public final int yyrhs[] = create$yyrhs();
private static int[] create$yyrhs() { return new int[] {
    -1,
   119,   131,     0,     5,     0,     6,     0,     7,     0,     8,
     0,     9,     0,    10,     0,    11,     0,    12,     0,    81,
     0,   123,     0,   124,     0,     1,     0,    16,     0,    18,
     0,    70,     0,    52,     0,    56,     0,    21,     0,    44,
     0,    27,     0,   125,     0,   128,     0,   129,     0,   125,
     0,     1,     0,   125,     0,     1,     0,   123,   268,     0,
   129,   268,     0,   130,     0,   129,    94,   130,     0,    13,
     0,   134,   133,     0,   134,     0,   133,     0,     0,   132,
   137,     0,   131,   137,     0,   135,     0,   136,     0,   133,
   135,     0,   133,   136,     0,    63,   129,    95,     0,    50,
   129,    95,     0,    50,   129,    94,    96,    95,     0,   142,
     0,   187,     0,    95,     0,   139,     0,   138,   139,     0,
    67,     0,    66,     0,    65,     0,    71,     0,    14,     0,
    42,     0,    74,     0,    75,     0,    79,     0,    82,     0,
    59,     0,    59,    10,     0,   141,   139,     0,   138,   140,
     0,   140,     0,     0,   144,   143,   149,     0,   145,   146,
   147,     0,   138,    22,    13,     0,    22,    13,     0,    41,
   126,     0,     0,    49,   148,     0,     0,   127,     0,   148,
    97,   127,     0,    98,   150,    99,     0,    98,    99,     0,
   151,     0,   150,   151,     0,   155,     0,   178,     0,   179,
     0,   198,     0,   152,     0,     0,     0,   140,    98,   153,
    88,   154,    99,     0,   156,     0,   161,     0,   171,     0,
   142,     0,   187,     0,   138,   122,   157,    95,     0,   122,
   157,    95,     0,   158,     0,   157,    97,   158,     0,   159,
     0,   159,   100,   160,     0,    13,     0,    13,   268,     0,
   295,     0,   196,     0,   162,   170,     0,   138,   122,   163,
   168,     0,   122,   163,   168,     0,   138,   122,   163,   268,
   168,     0,   122,   163,   268,   168,     0,   138,   121,   163,
   168,     0,   121,   163,   168,     0,     0,    13,   101,   164,
   165,   102,     0,     0,   166,     0,   167,     0,   166,    97,
   167,     0,   138,   122,   159,     0,   122,   159,     0,     0,
    78,   169,     0,   126,     0,   169,    97,   126,     0,   198,
     0,    95,     0,   172,   175,     0,   141,   122,   173,   168,
     0,   141,   122,   173,   268,   168,     0,   141,   121,   173,
   168,     0,     0,    13,   101,   174,   165,   102,     0,   244,
     0,    95,     0,     0,   140,   177,   244,     0,    71,   198,
     0,   180,   183,     0,   138,   181,   168,     0,   181,   168,
     0,     0,    13,   101,   182,   165,   102,     0,     0,    98,
   184,   185,    99,     0,   186,   201,     0,   186,     0,   201,
     0,     0,    76,   264,    95,     0,    72,   264,    95,     0,
   248,    94,    72,   264,    95,     0,   188,   191,     0,   189,
   190,     0,   189,     0,   138,    53,    13,     0,    53,    13,
     0,    41,   127,     0,   190,    97,   127,     0,    98,   192,
    99,     0,    98,    99,     0,   193,     0,   192,   193,     0,
   194,     0,   195,     0,   142,     0,   187,     0,   156,     0,
   162,    95,     0,    98,   197,    97,    99,     0,    98,   197,
    99,     0,    98,    97,    99,     0,    98,    99,     0,    98,
     1,    99,     0,   160,     0,   197,    97,   160,     0,     0,
    98,   199,   200,    99,     0,     0,   201,     0,   202,     0,
   201,   202,     0,   203,     0,   205,     0,   142,     0,   204,
    95,     0,   138,   122,   157,     0,   122,   157,     0,   207,
     0,   209,     0,   213,     0,   214,     0,   222,     0,   225,
     0,   207,     0,   210,     0,   215,     0,   223,     0,   226,
     0,   198,     0,   208,     0,   211,     0,   216,     0,   224,
     0,   233,     0,   234,     0,   235,     0,   237,     0,   236,
     0,   238,     0,   176,     0,    95,     0,    13,   103,   205,
     0,    13,   103,   206,     0,   212,    95,     0,   292,     0,
   276,     0,   277,     0,   273,     0,   274,     0,   270,     0,
   260,     0,    48,   249,   205,     0,    48,   249,   206,    28,
   205,     0,    48,   249,   206,    28,   206,     0,    73,   249,
   217,     0,    98,   218,   220,    99,     0,    98,   218,    99,
     0,    98,   220,    99,     0,    98,    99,     0,   219,     0,
   218,   219,     0,   220,   201,     0,   221,     0,   220,   221,
     0,    19,   296,   103,     0,    25,   103,     0,    83,   249,
   205,     0,    83,   249,   206,     0,    26,   205,    83,   249,
    95,     0,   227,   205,     0,   227,   206,     0,     0,    45,
   101,   228,   229,    95,   230,    95,   231,   102,     0,   232,
     0,   204,     0,     0,   295,     0,     0,   232,     0,     0,
   212,     0,   232,    97,   212,     0,    17,    13,    95,     0,
    17,    95,     0,    24,    13,    95,     0,    24,    95,     0,
    68,   295,    95,     0,    68,    95,     0,    77,   295,    95,
     0,    74,   249,   198,     0,    80,   198,   239,     0,    80,
   198,   239,   243,     0,    80,   198,   243,     0,   240,     0,
   239,   240,     0,   241,   198,     0,     0,    20,   101,   242,
   167,   102,     0,    43,   198,     0,     0,     0,    98,   245,
   247,   246,    99,     0,    88,     0,     0,   250,     0,   265,
     0,   101,   295,   102,     0,   101,     1,   102,     0,   120,
     0,    76,     0,   249,     0,   260,     0,   269,     0,   270,
     0,   271,     0,   129,    94,    76,     0,   259,     0,   251,
     0,   254,     0,     0,     0,    84,   101,   252,    91,   253,
   102,     0,     0,     0,    85,   101,   255,    92,   256,   102,
     0,     0,     0,    86,   101,   257,    93,   258,   102,     0,
   123,    94,    22,     0,   129,    94,    22,     0,   128,    94,
    22,     0,    81,    94,    22,     0,     0,    61,   125,   264,
   261,   149,     0,    61,   125,   264,     0,     0,   248,    94,
    61,    13,   264,   262,   149,     0,   248,    94,    61,    13,
   264,     0,   295,     0,   263,    97,   295,     0,   101,   263,
   102,     0,   101,   102,     0,    61,   123,   266,   268,     0,
    61,   123,   266,     0,    61,   123,   268,   196,     0,    61,
   125,   266,   268,     0,    61,   125,   266,     0,    61,   125,
   268,   196,     0,   267,     0,   266,   267,     0,   104,   295,
   105,     0,   104,     1,   105,     0,   104,   105,     0,   268,
   104,   105,     0,   248,    94,    13,     0,    72,    94,    13,
     0,   129,   264,     0,   248,    94,    13,   264,     0,    72,
    94,    13,   264,     0,   129,   267,     0,   250,   267,     0,
   248,     0,   129,     0,   273,     0,   274,     0,   272,    64,
     0,   272,    58,     0,   276,     0,   277,     0,   106,   275,
     0,   107,   275,     0,   278,     0,    64,   275,     0,    58,
   275,     0,   272,     0,   108,   275,     0,   109,   275,     0,
   279,     0,   101,   123,   268,   102,   275,     0,   101,   123,
   102,   275,     0,   101,   295,   102,   278,     0,   101,   129,
   268,   102,   278,     0,   101,     1,   102,   278,     0,   275,
     0,   280,    96,   275,     0,   280,   110,   275,     0,   280,
   111,   275,     0,   280,     0,   281,   106,   280,     0,   281,
   107,   280,     0,   281,     0,   282,    57,   281,     0,   282,
    69,   281,     0,   282,    55,   281,     0,   282,     0,   283,
   112,   282,     0,   283,   113,   282,     0,   283,    54,   282,
     0,   283,    46,   282,     0,   283,    51,   124,     0,   283,
     0,   284,    32,   283,     0,   284,    60,   283,     0,   284,
     0,   285,   114,   284,     0,   285,     0,   286,   115,   285,
     0,   286,     0,   287,   116,   286,     0,   287,     0,   288,
    15,   287,     0,   288,     0,   289,    62,   288,     0,   289,
     0,   289,   117,   295,   103,   290,     0,   290,     0,   292,
     0,   293,   294,   291,     0,   129,     0,   269,     0,   271,
     0,   100,     0,    36,     0,    31,     0,    35,     0,    29,
     0,    39,     0,    34,     0,    38,     0,    33,     0,    30,
     0,    40,     0,    37,     0,   291,     0,   295,     0

}; }

static public final int yyrline[] = create$yyrline();
private static int[] create$yyrline() { return new int[] {
 0,
   299,   303,   309,   310,   311,   312,   313,   314,   315,   316,
   322,   326,   327,   328,   332,   333,   334,   335,   336,   337,
   338,   339,   343,   344,   348,   352,   353,   357,   358,   369,
   370,   378,   379,   383,   395,   396,   397,   399,   401,   403,
   408,   409,   410,   411,   415,   419,   423,   442,   443,   444,
   450,   451,   455,   456,   457,   458,   459,   460,   462,   463,
   464,   465,   469,   470,   473,   474,   475,   485,   485,   489,
   499,   500,   506,   507,   512,   513,   518,   519,   523,   524,
   529,   530,   534,   535,   536,   537,   538,   542,   543,   544,
   549,   550,   551,   552,   553,   559,   560,   564,   565,   569,
   570,   574,   575,   579,   580,   586,   590,   591,   592,   593,
   595,   596,   600,   602,   606,   607,   612,   613,   617,   618,
   622,   623,   628,   629,   633,   634,   640,   644,   646,   648,
   653,   655,   659,   660,   664,   665,   671,   677,   682,   684,
   689,   691,   695,   697,   701,   702,   703,   704,   709,   710,
   711,   717,   721,   722,   726,   727,   731,   732,   736,   737,
   742,   743,   747,   748,   749,   750,   754,   758,   764,   765,
   766,   767,   768,   772,   773,   779,   781,   785,   786,   791,
   792,   796,   797,   798,   802,   806,   808,   813,   814,   815,
   816,   817,   818,   822,   823,   824,   825,   826,   830,   831,
   832,   833,   834,   835,   836,   837,   838,   839,   840,   842,
   846,   850,   854,   858,   862,   863,   864,   865,   866,   867,
   868,   872,   876,   880,   884,   888,   889,   890,   891,   896,
   897,   901,   905,   906,   910,   911,   915,   919,   923,   927,
   931,   936,   936,   948,   949,   950,   955,   956,   960,   961,
   966,   967,   971,   972,   976,   977,   981,   982,   986,   990,
   994,   995,   996,  1000,  1001,  1005,  1009,  1011,  1015,  1021,
  1022,  1023,  1027,  1028,  1034,  1035,  1039,  1040,  1044,  1045,
  1046,  1047,  1048,  1049,  1050,  1051,  1052,  1053,  1054,  1058,
  1059,  1060,  1064,  1065,  1066,  1068,  1069,  1070,  1074,  1075,
  1076,  1077,  1081,  1081,  1082,  1087,  1087,  1088,  1095,  1096,
  1100,  1101,  1108,  1109,  1110,  1111,  1112,  1113,  1117,  1118,
  1122,  1123,  1127,  1128,  1132,  1133,  1137,  1138,  1139,  1147,
  1148,  1152,  1153,  1154,  1155,  1159,  1163,  1167,  1168,  1169,
  1170,  1171,  1175,  1179,  1183,  1184,  1185,  1186,  1190,  1191,
  1192,  1193,  1195,  1199,  1200,  1201,  1202,  1206,  1207,  1208,
  1212,  1213,  1214,  1215,  1219,  1220,  1221,  1222,  1223,  1224,
  1228,  1229,  1230,  1234,  1235,  1239,  1240,  1244,  1245,  1249,
  1250,  1254,  1255,  1259,  1260,  1264,  1265,  1269,  1273,  1274,
  1275,  1279,  1280,  1281,  1282,  1283,  1284,  1285,  1286,  1287,
  1288,  1289,  1290,  1294,  1298

}; }

static public final int yyr1[] = create$yyr1();
private static int[] create$yyr1() { return new int[] {
     0,
   119,   118,   120,   120,   120,   120,   120,   120,   120,   120,
   121,   122,   122,   122,   123,   123,   123,   123,   123,   123,
   123,   123,   124,   124,   125,   126,   126,   127,   127,   128,
   128,   129,   129,   130,   131,   131,   131,   132,   131,   131,
   133,   133,   133,   133,   134,   135,   136,   137,   137,   137,
   138,   138,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   140,   140,   141,   141,   141,   143,   142,   144,
   145,   145,   146,   146,   147,   147,   148,   148,   149,   149,
   150,   150,   151,   151,   151,   151,   151,   153,   154,   152,
   155,   155,   155,   155,   155,   156,   156,   157,   157,   158,
   158,   159,   159,   160,   160,   161,   162,   162,   162,   162,
   162,   162,   164,   163,   165,   165,   166,   166,   167,   167,
   168,   168,   169,   169,   170,   170,   171,   172,   172,   172,
   174,   173,   175,   175,   177,   176,   178,   179,   180,   180,
   182,   181,   184,   183,   185,   185,   185,   185,   186,   186,
   186,   187,   188,   188,   189,   189,   190,   190,   191,   191,
   192,   192,   193,   193,   193,   193,   194,   195,   196,   196,
   196,   196,   196,   197,   197,   199,   198,   200,   200,   201,
   201,   202,   202,   202,   203,   204,   204,   205,   205,   205,
   205,   205,   205,   206,   206,   206,   206,   206,   207,   207,
   207,   207,   207,   207,   207,   207,   207,   207,   207,   207,
   208,   209,   210,   211,   212,   212,   212,   212,   212,   212,
   212,   213,   214,   215,   216,   217,   217,   217,   217,   218,
   218,   219,   220,   220,   221,   221,   222,   223,   224,   225,
   226,   228,   227,   229,   229,   229,   230,   230,   231,   231,
   232,   232,   233,   233,   234,   234,   235,   235,   236,   237,
   238,   238,   238,   239,   239,   240,   242,   241,   243,   245,
   246,   244,   247,   247,   248,   248,   249,   249,   250,   250,
   250,   250,   250,   250,   250,   250,   250,   250,   250,   252,
   253,   251,   255,   256,   254,   257,   258,   254,   259,   259,
   259,   259,   261,   260,   260,   262,   260,   260,   263,   263,
   264,   264,   265,   265,   265,   265,   265,   265,   266,   266,
   267,   267,   268,   268,   269,   269,   270,   270,   270,   271,
   271,   272,   272,   272,   272,   273,   274,   275,   275,   275,
   275,   275,   276,   277,   278,   278,   278,   278,   279,   279,
   279,   279,   279,   280,   280,   280,   280,   281,   281,   281,
   282,   282,   282,   282,   283,   283,   283,   283,   283,   283,
   284,   284,   284,   285,   285,   286,   286,   287,   287,   288,
   288,   289,   289,   290,   290,   291,   291,   292,   293,   293,
   293,   294,   294,   294,   294,   294,   294,   294,   294,   294,
   294,   294,   294,   295,   296

}; }

static public final int yyr2[] = create$yyr2();
private static int[] create$yyr2() { return new int[] {
     0,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     2,     1,     3,     1,     2,     1,     1,     0,     2,     2,
     1,     1,     2,     2,     3,     3,     5,     1,     1,     1,
     1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     2,     2,     1,     0,     3,     3,
     3,     2,     2,     0,     2,     0,     1,     3,     3,     2,
     1,     2,     1,     1,     1,     1,     1,     0,     0,     6,
     1,     1,     1,     1,     1,     4,     3,     1,     3,     1,
     3,     1,     2,     1,     1,     2,     4,     3,     5,     4,
     4,     3,     0,     5,     0,     1,     1,     3,     3,     2,
     0,     2,     1,     3,     1,     1,     2,     4,     5,     4,
     0,     5,     1,     1,     0,     3,     2,     2,     3,     2,
     0,     5,     0,     4,     2,     1,     1,     0,     3,     3,
     5,     2,     2,     1,     3,     2,     2,     3,     3,     2,
     1,     2,     1,     1,     1,     1,     1,     2,     4,     3,
     3,     2,     3,     1,     3,     0,     4,     0,     1,     1,
     2,     1,     1,     1,     2,     3,     2,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     3,     2,     1,     1,     1,     1,     1,     1,
     1,     3,     5,     5,     3,     4,     3,     3,     2,     1,
     2,     2,     1,     2,     3,     2,     3,     3,     5,     2,
     2,     0,     9,     1,     1,     0,     1,     0,     1,     0,
     1,     3,     3,     2,     3,     2,     3,     2,     3,     3,
     3,     4,     3,     1,     2,     2,     0,     5,     2,     0,
     0,     5,     1,     0,     1,     1,     3,     3,     1,     1,
     1,     1,     1,     1,     1,     3,     1,     1,     1,     0,
     0,     6,     0,     0,     6,     0,     0,     6,     3,     3,
     3,     3,     0,     5,     3,     0,     7,     5,     1,     3,
     3,     2,     4,     3,     4,     4,     3,     4,     1,     2,
     3,     3,     2,     3,     3,     3,     2,     4,     4,     2,
     2,     1,     1,     1,     1,     2,     2,     1,     1,     2,
     2,     1,     2,     2,     1,     2,     2,     1,     5,     4,
     4,     5,     4,     1,     3,     3,     3,     1,     3,     3,
     1,     3,     3,     3,     1,     3,     3,     3,     3,     3,
     1,     3,     3,     1,     3,     1,     3,     1,     3,     1,
     3,     1,     3,     1,     5,     1,     1,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1

}; }

static public final int yydefact[] = create$yydefact();
private static int[] create$yydefact() { return new int[] {
     1,
    38,     0,     0,     2,     0,    37,    36,    41,    42,    34,
     0,    32,     0,    57,     0,    58,     0,    55,    54,    53,
    56,    59,    60,    61,    62,    50,    40,     0,    51,    48,
    68,    74,    49,     0,   154,    39,    43,    44,    35,     0,
    46,     0,    45,    72,   156,     0,     0,    52,     0,     0,
    76,     0,   152,     0,   153,     0,    33,    71,   155,     0,
    69,    27,    26,    73,    25,     0,    70,    14,    15,    16,
    20,    22,    21,    18,    19,    17,    11,   160,     0,     0,
    12,    13,    23,    24,    25,     0,   165,   167,     0,   166,
     0,   161,   163,   164,    29,    28,   157,     0,    47,    34,
    63,    56,   176,    80,     0,    67,     0,    94,     0,    81,
    87,    83,    91,    92,     0,    93,     0,    84,    85,     0,
   121,    95,    86,    77,    75,     0,   121,   102,     0,    98,
   100,   121,     0,    30,    31,     0,     0,   168,   159,   162,
   158,   141,    64,   137,     0,    66,   121,    88,     0,     0,
    65,    79,    82,   126,   106,   125,   134,   270,   127,   133,
   143,   138,     0,   140,     0,   113,   112,   103,    97,     0,
     0,   108,   121,   323,     0,   121,     0,   121,     0,     3,
     4,     5,     6,     7,     8,     9,    10,    34,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    59,
   280,     0,     0,     0,     0,     0,     0,     0,   211,     0,
   279,     0,    12,    24,   389,     0,   135,   184,   210,   199,
     0,     0,   180,   182,     0,   183,   188,   200,   189,   201,
     0,   190,   191,   202,   192,   203,   193,     0,   204,   205,
   206,   208,   207,   209,   332,   281,   275,   288,   289,   287,
   282,   276,   283,   284,   285,     0,   218,   219,   216,   217,
   215,     0,   139,     0,     0,   121,   121,   274,     0,   123,
   122,    78,     0,   102,    99,     0,     0,     0,     0,     0,
     0,     0,     0,   333,   101,   105,   282,   284,   345,   334,
   335,   354,   338,   339,   342,   348,   358,   361,   365,   371,
   374,   376,   378,   380,   382,   384,   386,   404,   387,   104,
   110,   324,   111,    96,   107,   121,     0,     0,     0,   116,
   117,     0,     0,   254,     0,   256,     0,     0,   242,     0,
   333,   283,   285,   344,     0,     0,   343,   258,     0,     0,
     0,     0,     0,     0,     0,     0,   290,   293,   296,     0,
     0,   187,     0,     0,     0,     0,     0,   327,   330,     0,
     0,   177,   181,   185,   214,   240,     0,     0,   331,   337,
   336,   396,   401,   394,   400,   398,   395,   393,   403,   399,
   397,   402,   392,     0,    89,   131,   130,   128,   121,   273,
   271,     0,   280,     0,     0,     0,   332,     0,     0,     0,
     0,   172,   174,     0,     0,     0,   333,     0,   340,   341,
   346,   347,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   109,   120,     0,   142,     0,   212,   253,
   255,     0,     0,    34,     0,     0,   222,     0,   188,   195,
   196,   197,   198,     0,   314,   319,     0,   305,   317,     0,
   257,   326,     0,   225,   260,   259,     0,     0,   261,   264,
     0,   263,   302,   237,     0,     0,     0,   278,   277,   299,
   301,   300,   286,   312,     0,   309,     0,     0,   186,   136,
   325,     0,   388,     0,     0,   129,     0,     0,     0,   144,
     0,     0,   124,   114,   173,   171,     0,   170,   278,     0,
    30,    31,   277,   355,   356,   357,   359,   360,   364,   362,
   363,   369,     0,   370,   368,   366,   367,   372,   373,   375,
   377,   379,   381,   383,     0,   119,   118,     0,     0,   245,
   251,     0,   244,     0,     0,     0,     0,   241,   320,   313,
   315,     0,   316,   318,   329,     0,     0,   229,     0,   230,
     0,   233,   267,   269,   265,   262,   266,   291,   294,   297,
     0,   311,   322,   321,   328,     0,    90,     0,   272,   150,
   149,     0,   169,   175,   353,   350,     0,     0,   351,     0,
   239,   248,     0,   213,     0,   238,   223,   304,   405,     0,
   236,   227,   231,     0,   228,     0,   234,     0,     0,     0,
     0,   310,   308,   132,     0,   349,   352,   385,     0,   247,
   252,     0,   235,   226,     0,   292,   295,   298,     0,   151,
   250,   224,   268,   307,     0,   249,   243,     0,     0,     0

}; }

static public final int yydefgoto[] = create$yydefgoto();
private static int[] create$yydefgoto() { return new int[] {
   638,
     1,   211,    79,   212,   282,    82,    83,    64,    97,   283,
   331,    12,     4,     5,     6,     7,     8,     9,    27,   216,
    29,   217,   107,   218,    49,    31,    32,    51,    67,   125,
    61,   109,   110,   111,   264,   494,   112,    88,   129,   130,
   131,   285,   114,    89,   127,   273,   319,   320,   321,   164,
   271,   155,   116,   117,   266,   495,   159,   219,   361,   118,
   119,   120,   121,   179,   162,   269,   394,   395,    33,    34,
    35,    55,    53,    91,    92,    93,    94,   286,   404,   220,
   145,   221,   606,   223,   224,   225,   226,   448,   227,   228,
   229,   450,   230,   231,   232,   233,   451,   234,   464,   559,
   560,   561,   562,   235,   452,   236,   237,   453,   238,   443,
   542,   619,   635,   543,   239,   240,   241,   242,   243,   244,
   469,   470,   471,   608,   472,   160,   268,   497,   391,   245,
   246,   247,   248,   475,   609,   249,   476,   610,   477,   611,
   250,   287,   552,   629,   485,   358,   252,   455,   359,   134,
   253,   288,   255,   289,   290,   291,   292,   293,   294,   295,
   296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
   306,   307,   308,   261,   262,   384,   310,   600

}; }

static public final int yypact[] = create$yypact();
private static int[] create$yypact() { return new int[] {
-32768,
   198,    19,    19,   633,   633,    54,    54,-32768,-32768,-32768,
   174,-32768,   256,-32768,   118,-32768,   188,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   712,-32768,-32768,
-32768,   264,-32768,   199,   268,-32768,-32768,-32768,    54,     6,
-32768,    19,-32768,-32768,-32768,   301,   330,-32768,   279,    34,
   336,  3430,-32768,   186,   290,   293,-32768,-32768,-32768,  3280,
-32768,-32768,-32768,-32768,   296,   186,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   382,   387,
   297,-32768,-32768,-32768,   115,  3898,-32768,-32768,   309,-32768,
  3501,-32768,-32768,-32768,-32768,-32768,-32768,   186,-32768,   304,
   399,   312,-32768,-32768,  3827,   313,  3969,-32768,  3355,-32768,
-32768,-32768,-32768,-32768,    75,-32768,    99,-32768,-32768,   315,
   337,-32768,-32768,-32768,   319,   316,   337,   189,   133,-32768,
   321,   -50,   314,   318,   318,   382,   387,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  2610,-32768,   337,-32768,   410,   410,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    34,-32768,   186,-32768,-32768,   318,-32768,   411,
  1810,-32768,    76,-32768,   320,   337,   204,   -50,  2234,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   325,    11,    28,
  3580,   328,   329,  2104,   582,  2104,  1894,   338,   329,   329,
-32768,  2104,   312,   341,   329,   342,   345,   347,-32768,  1424,
-32768,   411,   202,   344,   298,  4040,-32768,-32768,-32768,-32768,
   350,  2709,-32768,-32768,   355,-32768,-32768,-32768,-32768,-32768,
   356,-32768,-32768,-32768,-32768,-32768,-32768,  3580,-32768,-32768,
-32768,-32768,-32768,-32768,   360,-32768,   351,-32768,-32768,-32768,
   245,-32768,   840,   251,  1033,     9,   134,   173,-32768,-32768,
-32768,  1065,-32768,   368,   357,   337,   -50,   371,  2808,-32768,
   363,-32768,  2234,   297,-32768,  1190,  1533,  2104,  2104,  2104,
  2104,   202,   344,   815,-32768,-32768,-32768,-32768,     9,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   181,   267,   226,   212,
   124,   348,   346,   352,   448,   -36,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    76,   411,  4107,   364,   370,
-32768,  3580,   378,-32768,   380,-32768,   329,   393,-32768,  3677,
   158,-32768,-32768,-32768,   373,   222,-32768,-32768,   383,   466,
   384,   312,   385,   235,   461,  3580,-32768,-32768,-32768,   394,
   395,   388,   469,   473,   137,  1999,  1315,-32768,-32768,   411,
   402,-32768,-32768,-32768,-32768,-32768,    40,  1642,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  2104,-32768,-32768,-32768,-32768,    76,-32768,
-32768,    52,   400,   403,  2907,  3006,   409,    34,   405,   412,
   414,-32768,-32768,   234,   408,   208,   815,   413,-32768,-32768,
-32768,-32768,  2104,  2104,  2104,  2104,  2104,  2104,  2104,  2104,
  2104,   582,  2104,  2104,  2104,  2104,  2104,  2104,  2104,  2104,
  2104,  2104,  2104,-32768,-32768,   411,-32768,  4107,-32768,-32768,
-32768,   329,  3204,   415,   329,   329,-32768,   486,   488,-32768,
-32768,-32768,-32768,  3677,   373,-32768,   166,   422,   373,   166,
-32768,   400,    43,-32768,-32768,-32768,   423,   312,   235,-32768,
   312,-32768,-32768,-32768,   432,   433,   434,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   211,-32768,   424,   426,   388,-32768,
   400,   515,-32768,   436,  2234,-32768,   439,   445,   446,-32768,
  3105,    21,-32768,-32768,-32768,-32768,  1726,-32768,  2188,  2104,
   232,   259,  2188,-32768,-32768,-32768,   181,   181,   267,   267,
   267,   226,   297,-32768,   226,   226,   226,   212,   212,   124,
   348,   346,   352,   448,   443,-32768,-32768,   453,  4107,-32768,
-32768,   455,   454,  3677,  3677,  3677,  3580,-32768,-32768,   318,
-32768,   279,   318,-32768,-32768,  2104,   449,-32768,    46,-32768,
  2313,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  2104,-32768,-32768,-32768,-32768,   400,-32768,   451,-32768,-32768,
-32768,   400,-32768,-32768,-32768,-32768,  2104,  2188,-32768,  2104,
-32768,  2104,  3774,-32768,   527,-32768,-32768,-32768,-32768,   457,
-32768,-32768,-32768,  2412,-32768,  2511,-32768,  4107,   459,   464,
   465,-32768,   458,-32768,   462,-32768,-32768,-32768,   468,-32768,
-32768,  3677,-32768,-32768,   474,-32768,-32768,-32768,   279,-32768,
  3774,-32768,-32768,-32768,   477,   454,-32768,   568,   581,-32768

}; }

static public final int yypgoto[] = create$yypgoto();
private static int[] create$yypgoto() { return new int[] {
-32768,
-32768,-32768,    53,   -30,   -31,   164,    59,  -149,   -28,    31,
    -2,   -33,-32768,-32768,   580,-32768,    30,    88,   591,    -1,
   -20,   102,-32768,   114,-32768,-32768,-32768,-32768,-32768,-32768,
  -509,-32768,   499,-32768,-32768,-32768,-32768,   -29,  -120,   427,
  -292,  -266,-32768,   -23,    -8,-32768,  -250,-32768,  -426,   205,
-32768,-32768,-32768,-32768,   471,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   507,-32768,-32768,-32768,-32768,-32768,    81,-32768,
-32768,-32768,-32768,-32768,   523,-32768,-32768,  -130,-32768,   142,
-32768,-32768,  -139,  -217,-32768,   172,  -175,  -434,  -328,-32768,
-32768,-32768,-32768,  -425,-32768,-32768,-32768,-32768,-32768,-32768,
    57,    63,  -429,-32768,-32768,-32768,-32768,-32768,  -319,-32768,
-32768,-32768,-32768,   -13,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   154,-32768,-32768,   155,   272,-32768,-32768,-32768,   359,
  -160,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -57,-32768,-32768,-32768,  -241,-32768,   307,  -220,   846,
   626,    38,   727,   176,   295,   367,  -181,   389,   487,  -467,
-32768,   -41,   -61,  -106,   -47,   217,   219,   210,   215,   218,
-32768,    61,   265,   391,-32768,-32768,  -153,-32768

}; }

static public final int yytable[] = create$yytable();
private static int[] create$yytable() { return new int[] {
    11,
    13,   449,    28,    28,   363,   222,    57,    48,    57,   403,
   454,   537,   334,   270,   337,   328,   177,   541,    10,   548,
    81,    80,   399,   323,   435,   432,   369,   163,    81,    80,
   113,    10,   330,   491,    62,    37,   115,   124,   341,   342,
   325,   585,   598,   339,   346,   589,    10,    65,   343,    85,
    86,    65,   491,   133,    81,   137,   351,    85,   105,    81,
    80,   556,   366,    65,   556,    48,   370,   557,    37,   141,
   557,   132,   371,    81,   137,    81,   150,    81,    80,   113,
   433,   492,    84,    85,    48,   115,   151,   251,    85,    86,
    84,   352,   582,    38,   458,    65,   409,   410,   411,   412,
   492,    56,    85,     2,    85,   324,    85,   105,    63,   594,
   595,   596,    96,   213,   456,   456,    84,    30,    30,   634,
   617,    84,   326,   408,    96,   449,    38,   176,   178,   396,
    44,   607,    90,   251,   454,    84,   272,    84,   136,    84,
   122,   558,   215,   536,   602,   340,   439,    81,   317,    10,
   498,   499,   356,   163,   447,   426,    96,   136,   482,   149,
    65,   106,    65,   335,   251,    87,   342,   621,   284,   154,
   474,    90,   103,   108,   607,   214,    85,   318,   363,   175,
   251,   625,   254,   427,    81,   360,    95,   632,   284,   122,
   213,  -334,    65,   157,   284,    48,   158,  -334,    10,   284,
    45,   123,   486,   488,    87,   541,   146,   284,    42,    84,
   106,   251,   483,    85,   488,   449,   449,   449,   133,   215,
   555,    63,   108,    96,   454,   454,   454,   169,   254,   170,
  -335,   514,   515,   516,   549,   284,  -335,   213,   549,   489,
   584,    81,   317,   144,   578,   406,    84,     2,   503,   575,
   123,   355,   214,   336,   467,   501,   156,   421,   356,   254,
     3,   357,   422,   276,   251,   423,   215,    40,    41,   175,
    85,   318,   251,   284,   407,   254,   413,   468,   366,   535,
   418,   538,   419,   363,   545,   546,    81,   436,   251,   166,
   414,   415,   133,   449,   420,   353,    52,    48,   314,   214,
   170,   353,   454,    84,    50,   133,   254,   571,    54,   510,
   -25,   133,   572,    58,   522,    85,   525,   526,   527,   284,
   256,    57,   356,   424,   425,   357,   551,   284,   586,   554,
   507,   167,   508,   587,   613,   175,   172,   251,   251,  -221,
   615,  -221,    59,   284,   344,  -220,  -221,  -220,    84,    42,
    43,   263,  -220,   284,   284,  -333,   519,   520,   521,   254,
   588,  -333,   175,   213,   213,   284,   256,   254,   439,   447,
   474,   597,   416,   417,   517,   518,    60,   311,   528,   529,
   313,   284,   315,   254,    66,   251,    98,    99,   363,    42,
   523,   355,   215,   215,   126,    65,   251,   256,   356,   128,
   133,   357,   599,   138,   142,   616,    81,   317,   143,   103,
   148,   213,   161,   256,   163,   165,   166,   612,   174,    85,
   171,   175,   265,   274,   312,   214,   214,   322,   329,   210,
   284,   340,   254,   254,   345,    85,   318,   354,   620,   257,
   215,   539,   347,   251,   256,   348,   597,   349,   362,   364,
   365,   284,    84,   367,   368,   385,    63,   386,   390,   398,
   429,   428,   431,    81,   317,   437,   438,   430,    84,   213,
   387,   388,   440,   214,   441,   442,   357,   461,   462,   466,
   254,   463,   473,   465,   170,   257,   251,   251,   251,   251,
   480,   254,    85,   318,   481,   478,   479,   256,   215,   158,
   356,   500,   502,   251,   284,   256,   504,    81,   360,   509,
   505,   258,   506,   547,   513,  -194,   257,   544,    48,  -303,
   434,   256,   568,   563,   569,    84,   570,   576,   573,   213,
   574,   214,   257,   259,   577,   251,    85,   579,   254,   580,
   581,   284,   284,   284,   284,   590,   251,   591,   251,   592,
   593,   601,   614,   284,   622,  -306,   630,   258,   215,   623,
   626,   309,   631,   257,   251,   627,   628,   639,   284,    84,
   256,   256,   213,   251,   213,   633,    81,   317,   637,   259,
   640,   254,   254,   254,   254,   524,    39,   309,   258,   284,
   284,   214,   309,   496,    10,    36,   275,    69,   254,    70,
   309,   215,    71,   215,   258,    85,   318,   153,    72,   564,
   259,   147,   567,   140,   540,   603,   257,   636,   256,   284,
   267,   604,   565,   566,   257,    73,   259,   397,   284,   256,
   254,   260,   490,    74,   214,   258,   214,    75,    84,   532,
   257,   254,   459,   254,   530,   533,    14,   531,   493,   534,
   618,    76,     0,     0,    15,     0,     0,   259,     0,   254,
     0,     0,     0,     0,     0,     0,   309,   309,   254,     0,
     0,     0,     0,     0,    16,     0,   256,   260,     0,     0,
     0,     0,     0,     0,     0,    17,     0,     0,   258,   257,
   257,     0,     0,     0,     0,     0,   258,    18,    19,    20,
     0,     0,     0,    21,     0,     0,    22,    23,   260,     0,
   259,    24,   258,     0,    25,     0,     0,     0,   259,   256,
   256,   256,   256,     0,   260,    14,     0,    26,     0,     0,
     0,     0,     0,    46,   259,     0,   256,   257,     0,     0,
     0,     0,     0,     0,     0,     0,   309,   309,   257,     0,
     0,     0,     0,    16,     0,   260,     0,     0,   309,     0,
     0,   258,   258,     0,    47,     0,     0,     0,   256,     0,
     0,     0,     0,     0,   309,     0,    18,    19,    20,   256,
     0,   256,    21,   259,   259,    22,    23,     0,     0,     0,
    24,     0,     0,    25,     0,   257,     0,   256,     0,     0,
     0,     0,     0,     0,     0,     0,   256,     0,   260,   258,
     0,     0,     0,     0,     0,     0,   260,     0,     0,   332,
   258,   332,     0,   309,     0,     0,     0,     0,     0,     0,
     0,   259,   260,     0,     0,     0,     0,     0,   257,   257,
   257,   257,   259,  -389,  -389,  -389,     0,  -389,  -389,  -389,
  -389,  -389,  -389,  -389,  -389,   257,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   258,  -390,  -390,
  -390,     0,  -390,  -390,  -390,  -390,  -390,  -390,  -390,  -390,
     0,   260,   260,     0,     0,     0,     0,   257,     0,   259,
     0,     0,     0,     0,     0,     0,     0,   309,   257,     0,
   257,     0,     0,   332,   332,   332,   332,     0,   355,     0,
   258,   258,   258,   258,  -389,   356,   257,     0,   357,     0,
   333,     0,   333,     0,     0,   257,     0,   258,     0,   260,
   135,     0,   259,   259,   259,   259,     0,     0,     0,  -390,
   260,     0,     0,     0,     0,     0,   309,     0,     0,   259,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   258,
     0,   309,     0,     0,     0,     0,     0,     0,     0,     0,
   258,     0,   258,   168,     0,     0,     0,   173,     0,     0,
     0,   259,   309,     0,     0,     0,     0,   260,   258,     0,
     0,     0,   259,     0,   259,     0,     0,   258,     0,     0,
     0,     0,     0,     0,   333,   333,   333,   333,     0,     0,
   259,     0,     0,     0,     0,     0,     0,     0,     0,   259,
     0,     0,     0,   316,     0,     0,     0,     0,     0,     0,
   260,   260,   260,   260,     0,     0,     0,     0,   332,   332,
   332,   332,   332,   332,   332,   332,   332,   260,   332,   332,
   332,   332,   332,   332,   332,   332,   332,   332,     0,     0,
   135,  -391,  -391,  -391,     0,  -391,  -391,  -391,  -391,  -391,
  -391,  -391,  -391,     0,     0,     0,     0,     0,     0,   260,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   260,     0,   260,   372,   373,   374,     0,   375,   376,   377,
   378,   379,   380,   381,   382,     0,     0,     0,   260,     0,
     0,     0,   389,     0,     0,     0,     0,   260,     0,   168,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   135,
     0,     0,  -391,     0,   332,   332,     0,     0,   332,   333,
   333,   333,   333,   333,   333,   333,   333,   333,     0,   333,
   333,   333,   333,   333,   333,   333,   333,   333,   333,     0,
     0,     0,     0,     0,   383,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   135,     0,     0,     0,
   457,   460,     0,     0,     0,     0,     0,     0,     0,     0,
   400,     0,     0,     0,   180,   181,   182,   183,   184,   185,
   186,   187,    10,     0,     0,    69,     0,    70,     0,     0,
    71,     0,   332,   332,     0,   332,    72,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    73,     0,   333,   333,     0,     0,   333,
     0,    74,     0,     0,     0,    75,     0,   194,     0,     0,
   195,   511,   512,   196,     0,     0,     0,     0,     0,    76,
     0,   198,     0,     0,     0,   201,     0,     0,     0,     0,
   204,     0,     0,   206,   207,   208,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   401,   276,   402,     0,
   277,     0,     0,     0,     0,   278,   279,   280,   281,     0,
   550,     0,     0,     0,   553,     0,     0,     0,     0,     0,
     0,     0,     0,   333,   333,   487,   333,     0,     0,   180,
   181,   182,   183,   184,   185,   186,   187,    10,     0,     0,
    69,     0,    70,     0,     0,    71,     0,     0,     0,     0,
     0,    72,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    73,     0,
     0,     0,     0,     0,     0,     0,    74,     0,     0,     0,
    75,     0,   194,     0,     0,   195,     0,     0,   196,     0,
     0,     0,     0,     0,    76,     0,   198,     0,     0,     0,
   201,     0,     0,     0,     0,   204,     0,     0,   206,   207,
   208,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   277,     0,     0,     0,   174,
   278,   279,   280,   281,   350,     0,     0,     0,   180,   181,
   182,   183,   184,   185,   186,   187,    10,     0,     0,    69,
     0,    70,     0,     0,    71,     0,     0,     0,     0,     0,
    72,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    73,     0,     0,
     0,     0,     0,     0,     0,    74,     0,     0,     0,    75,
     0,   194,     0,     0,   195,     0,     0,   196,     0,     0,
     0,     0,     0,    76,     0,   198,     0,     0,     0,   201,
     0,     0,     0,     0,   204,     0,     0,   206,   207,   208,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   277,     0,     0,     0,     0,   278,
   279,   280,   281,   405,     0,     0,     0,   180,   181,   182,
   183,   184,   185,   186,   187,    10,     0,     0,    69,     0,
    70,     0,     0,    71,     0,     0,     0,     0,     0,    72,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    73,     0,     0,     0,
     0,     0,     0,     0,    74,     0,     0,     0,    75,     0,
   194,     0,     0,   195,     0,     0,   196,     0,     0,     0,
     0,     0,    76,     0,   198,     0,     0,     0,   201,     0,
     0,     0,     0,   204,     0,     0,   206,   207,   208,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   277,     0,     0,     0,     0,   278,   279,
   280,   281,   487,     0,     0,     0,   180,   181,   182,   183,
   184,   185,   186,   187,    10,     0,     0,    69,     0,    70,
     0,     0,    71,     0,     0,     0,     0,     0,    72,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    73,     0,     0,     0,     0,
     0,     0,     0,    74,     0,     0,     0,    75,     0,   194,
     0,     0,   195,     0,     0,   196,     0,     0,     0,     0,
     0,    76,     0,   198,     0,     0,     0,   201,     0,     0,
     0,     0,   204,     0,     0,   206,   207,   208,     0,     0,
   180,   181,   182,   183,   184,   185,   186,   187,    10,     0,
     0,    69,   277,    70,     0,     0,    71,   278,   279,   280,
   281,     0,    72,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    73,
     0,     0,     0,     0,     0,     0,     0,    74,     0,     0,
     0,    75,     0,   194,     0,     0,   195,     0,     0,   196,
     0,     0,     0,     0,     0,    76,     0,   198,     0,     0,
     0,   201,     0,     0,     0,     0,   204,     0,     0,   206,
   207,   208,     0,     0,   180,   181,   182,   183,   184,   185,
   186,   187,    10,   276,   583,    69,   277,    70,     0,     0,
    71,   278,   279,   280,   281,     0,    72,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    73,     0,     0,     0,     0,     0,     0,
     0,    74,     0,     0,     0,    75,     0,   194,     0,     0,
   195,     0,     0,   196,     0,     0,     0,     0,     0,    76,
     0,   198,     0,     0,     0,   201,     0,     0,     0,     0,
   204,     0,     0,   206,   207,   208,     0,     0,   180,   181,
   182,   183,   184,   185,   186,   187,    10,   276,     0,    69,
   277,    70,     0,     0,    71,   278,   279,   280,   281,     0,
    72,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    73,     0,     0,
     0,     0,     0,     0,     0,    74,     0,     0,     0,    75,
     0,   194,     0,     0,   195,     0,     0,   196,     0,     0,
     0,     0,     0,    76,     0,   198,     0,     0,     0,   201,
     0,     0,     0,     0,   204,     0,     0,   206,   207,   208,
     0,     0,     0,     0,     0,     0,     0,     0,   338,     0,
     0,     0,     0,     0,   277,     0,     0,     0,     0,   278,
   279,   280,   281,   180,   181,   182,   183,   184,   185,   186,
   187,    10,     0,     0,    69,     0,    70,     0,     0,    71,
     0,     0,     0,     0,     0,    72,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    73,     0,     0,     0,     0,     0,     0,     0,
    74,     0,     0,     0,    75,     0,   194,     0,     0,   195,
     0,     0,   196,     0,     0,     0,     0,     0,    76,     0,
   198,     0,     0,     0,   201,     0,     0,     0,     0,   204,
     0,     0,   206,   207,   208,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   277,
   484,     0,     0,     0,   278,   279,   280,   281,   180,   181,
   182,   183,   184,   185,   186,   187,    10,     0,     0,    69,
     0,    70,     0,     0,    71,     0,     0,     0,     0,     0,
    72,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    73,     0,     0,
     0,     0,     0,     0,     0,    74,     0,     0,     0,    75,
     0,   194,     0,     0,   195,     0,     0,   196,     0,     0,
     0,     0,     0,    76,     0,   198,     0,     0,     0,   201,
     0,     0,     0,     0,   204,     0,     0,   206,   207,   208,
     0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
    10,     0,     0,    69,   277,    70,     0,     0,    71,   278,
   279,   280,   281,     0,    72,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    73,     0,     0,    68,     0,     0,     0,     0,    74,
     0,     0,     0,    75,     0,     0,    10,    14,   195,    69,
     0,    70,     0,     0,    71,     0,     0,    76,     0,   198,
    72,     0,     0,   201,     0,     0,     0,     0,   204,     0,
     0,   206,   207,   208,     0,    16,     0,    73,     0,     0,
     0,     0,     0,     0,     0,    74,     0,     0,   277,    75,
     0,     0,     0,     0,     0,   280,   281,     0,    18,    19,
    20,     0,     0,    76,    21,     0,     0,    22,    23,     0,
     0,     0,    24,    68,     0,    25,     0,   180,   181,   182,
   183,   184,   185,   186,   187,   188,    14,     0,    69,   189,
    70,   556,     0,    71,    15,  -115,   190,   557,   191,    72,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    16,     0,    73,   192,     0,     0,
   193,     0,     0,     0,    74,     0,     0,     0,    75,     0,
   194,   101,     0,   195,     0,     0,   196,    18,    19,    20,
   197,     0,    76,    21,   198,   199,   200,    23,   201,   202,
     0,    24,   203,   204,    25,   205,   206,   207,   208,     0,
     0,     0,     0,     0,     0,     0,     0,   209,     0,     0,
   103,   605,    68,   210,     0,     0,   180,   181,   182,   183,
   184,   185,   186,   187,   188,    14,     0,    69,   189,    70,
   556,     0,    71,    15,     0,   190,   557,   191,    72,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    16,     0,    73,   192,     0,     0,   193,
     0,     0,     0,    74,     0,     0,     0,    75,     0,   194,
   101,     0,   195,     0,     0,   196,    18,    19,    20,   197,
     0,    76,    21,   198,   199,   200,    23,   201,   202,     0,
    24,   203,   204,    25,   205,   206,   207,   208,     0,     0,
     0,     0,     0,     0,     0,     0,   209,     0,     0,   103,
   624,    68,   210,     0,     0,   180,   181,   182,   183,   184,
   185,   186,   187,   188,    14,     0,    69,   189,    70,  -232,
     0,    71,    15,     0,   190,  -232,   191,    72,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    16,     0,    73,   192,     0,     0,   193,     0,
     0,     0,    74,     0,     0,     0,    75,     0,   194,   101,
     0,   195,     0,     0,   196,    18,    19,    20,   197,     0,
    76,    21,   198,   199,   200,    23,   201,   202,     0,    24,
   203,   204,    25,   205,   206,   207,   208,     0,     0,     0,
     0,     0,     0,     0,     0,   209,     0,     0,   103,  -232,
    68,   210,     0,     0,   180,   181,   182,   183,   184,   185,
   186,   187,   188,    14,     0,    69,   189,    70,     0,     0,
    71,    15,     0,   190,     0,   191,    72,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    16,     0,    73,   192,     0,     0,   193,     0,     0,
     0,    74,     0,     0,     0,    75,     0,   194,   101,     0,
   195,     0,     0,   196,    18,    19,    20,   197,     0,    76,
    21,   198,   199,   200,    23,   201,   202,     0,    24,   203,
   204,    25,   205,   206,   207,   208,     0,     0,     0,     0,
     0,     0,     0,     0,   209,     0,     0,   103,  -178,    68,
   210,     0,     0,   180,   181,   182,   183,   184,   185,   186,
   187,   188,    14,     0,    69,   189,    70,     0,     0,    71,
    15,     0,   190,     0,   191,    72,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    16,     0,    73,   192,     0,     0,   193,     0,     0,     0,
    74,     0,     0,     0,    75,     0,   194,   101,     0,   195,
     0,     0,   196,    18,    19,    20,   197,     0,    76,    21,
   198,   199,   200,    23,   201,   202,     0,    24,   203,   204,
    25,   205,   206,   207,   208,     0,     0,     0,     0,     0,
     0,     0,     0,   209,     0,     0,   103,  -179,    68,   210,
     0,     0,   180,   181,   182,   183,   184,   185,   186,   187,
   188,    14,     0,    69,   189,    70,     0,     0,    71,    15,
     0,   190,     0,   191,    72,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    16,
     0,    73,   192,     0,     0,   193,     0,     0,     0,    74,
     0,     0,     0,    75,     0,   194,   101,     0,   195,     0,
     0,   196,    18,    19,    20,   197,     0,    76,    21,   392,
   199,   200,    23,   393,   202,     0,    24,   203,   204,    25,
   205,   206,   207,   208,     0,     0,     0,     0,     0,     0,
     0,     0,   209,     0,     0,   103,  -148,    68,   210,     0,
     0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
    14,     0,    69,   189,    70,     0,     0,    71,    15,     0,
   190,     0,   191,    72,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    16,     0,
    73,   192,     0,     0,   193,     0,     0,     0,    74,     0,
     0,     0,    75,     0,   194,   101,     0,   195,     0,     0,
   196,    18,    19,    20,   197,     0,    76,    21,   198,   199,
   200,    23,   201,   202,     0,    24,   203,   204,    25,   205,
   206,   207,   208,     0,     0,     0,     0,     0,     0,     0,
     0,   209,     0,     0,   103,  -146,    68,   210,     0,     0,
   180,   181,   182,   183,   184,   185,   186,   187,   188,    14,
     0,    69,   189,    70,     0,     0,    71,    15,     0,   190,
     0,   191,    72,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    16,     0,    73,
   192,     0,     0,   193,     0,     0,     0,    74,     0,     0,
     0,    75,     0,   194,   101,     0,   195,     0,     0,   196,
    18,    19,    20,   197,     0,    76,    21,   198,   199,   200,
    23,   201,   202,     0,    24,   203,   204,    25,   205,   206,
   207,   208,     0,     0,     0,     0,     0,     0,     0,     0,
   209,     0,     0,   103,  -147,    68,   210,     0,     0,   180,
   181,   182,   183,   184,   185,   186,   187,   188,    14,     0,
    69,   189,    70,     0,     0,    71,    15,     0,   190,     0,
   191,    72,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    16,     0,    73,   192,
     0,     0,   193,     0,     0,     0,    74,     0,     0,     0,
    75,     0,   194,   101,     0,   195,     0,     0,   196,    18,
    19,    20,   197,     0,    76,    21,   198,   199,   200,    23,
   201,   202,     0,    24,   203,   204,    25,   205,   206,   207,
   208,     0,     0,     0,     0,     0,     0,     0,     0,   209,
     0,     0,   103,  -145,    68,   210,     0,     0,   180,   181,
   182,   183,   184,   185,   186,   187,    10,    14,     0,    69,
     0,    70,     0,     0,    71,     0,     0,     0,     0,     0,
    72,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    16,     0,    73,     0,     0,
     0,     0,     0,     0,     0,    74,     0,     0,     0,    75,
     0,   194,     0,     0,   195,     0,     0,   196,    18,    19,
    20,     0,     0,    76,    21,   198,     0,    22,    23,   201,
    68,     0,    24,     0,   204,    25,     0,   206,   207,   208,
     0,     0,   100,    14,     0,    69,     0,    70,  -246,     0,
    71,    15,     0,     0,   210,     0,    72,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    16,     0,    73,     0,     0,     0,     0,     0,     0,
     0,    74,    17,     0,     0,    75,     0,     0,   101,     0,
     0,     0,     0,     0,    18,    19,    20,     0,     0,    76,
   102,     0,     0,    22,    23,    68,     0,     0,    24,     0,
    77,    25,     0,     0,     0,     0,     0,   100,    14,     0,
    69,     0,    70,     0,     0,    71,    15,   103,   104,     0,
     0,    72,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    16,     0,    73,     0,
     0,     0,     0,     0,     0,     0,    74,    17,     0,     0,
    75,     0,     0,   101,     0,     0,     0,     0,     0,    18,
    19,    20,     0,     0,    76,   102,     0,     0,    22,    23,
    68,     0,     0,    24,     0,    77,    25,     0,     0,     0,
     0,     0,    10,    14,     0,    69,     0,    70,     0,     0,
    71,    15,   103,   152,     0,     0,    72,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    16,     0,    73,     0,     0,     0,     0,     0,     0,
     0,    74,    17,     0,     0,    75,     0,     0,     0,     0,
     0,     0,     0,     0,    18,    19,    20,     0,     0,    76,
    21,    68,     0,    22,    23,     0,     0,     0,    24,     0,
    77,    25,     0,    10,    14,     0,    69,     0,    70,     0,
     0,    71,    15,     0,     0,     0,     0,    72,    78,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    16,     0,    73,     0,     0,     0,     0,     0,
     0,     0,    74,    17,     0,     0,    75,     0,     0,     0,
     0,     0,     0,     0,     0,    18,    19,    20,     0,     0,
    76,    21,     0,     0,    22,    23,     0,     0,     0,    24,
     0,    77,    25,     0,   180,   181,   182,   183,   184,   185,
   186,   187,   188,     0,     0,    69,   189,    70,     0,   139,
    71,     0,     0,   190,     0,   191,    72,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    73,   192,     0,     0,   193,     0,     0,
     0,    74,     0,     0,     0,    75,     0,   194,   101,     0,
   195,     0,     0,   196,     0,     0,     0,   197,     0,    76,
     0,   198,   199,   327,     0,   201,   202,     0,     0,   203,
   204,     0,   205,   206,   207,   208,     0,     0,     0,     0,
     0,     0,     0,     0,   209,     0,     0,   103,     0,     0,
   210,   180,   181,   182,   183,   184,   185,   186,   187,   444,
     0,     0,    69,   189,    70,     0,     0,    71,     0,     0,
   190,     0,   191,    72,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    73,   192,     0,     0,   445,     0,     0,     0,    74,     0,
     0,     0,    75,     0,   194,   101,     0,   195,     0,     0,
   196,     0,     0,     0,   197,     0,    76,     0,   198,   199,
   327,     0,   201,   202,     0,     0,   203,   204,     0,   446,
   206,   207,   208,     0,     0,     0,     0,     0,     0,     0,
     0,   209,     0,     0,   103,     0,     0,   210,   180,   181,
   182,   183,   184,   185,   186,   187,    10,     0,     0,    69,
     0,    70,     0,     0,    71,     0,     0,     0,     0,     0,
    72,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    73,     0,     0,
     0,     0,     0,     0,     0,    74,     0,    68,     0,    75,
     0,   194,     0,     0,   195,     0,     0,   196,     0,   100,
    14,     0,    69,    76,    70,   198,     0,    71,    46,   201,
     0,     0,     0,    72,   204,     0,     0,   206,   207,   208,
     0,     0,     0,     0,     0,     0,     0,     0,    16,     0,
    73,     0,     0,     0,   210,     0,     0,     0,    74,    47,
     0,     0,    75,     0,     0,   101,     0,     0,     0,     0,
     0,    18,    19,    20,     0,     0,    76,    21,    68,     0,
    22,    23,     0,     0,     0,    24,     0,    77,    25,     0,
    10,    14,     0,    69,     0,    70,     0,     0,    71,    46,
     0,     0,     0,     0,    72,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    16,
     0,    73,     0,     0,     0,     0,     0,     0,     0,    74,
    47,     0,     0,    75,     0,     0,     0,     0,     0,     0,
     0,     0,    18,    19,    20,     0,     0,    76,    21,    68,
     0,    22,    23,     0,     0,     0,    24,     0,    77,    25,
     0,    10,    14,     0,    69,     0,    70,     0,     0,    71,
     0,     0,     0,     0,     0,    72,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    16,     0,    73,     0,     0,     0,     0,     0,     0,     0,
    74,     0,     0,     0,    75,     0,     0,     0,     0,     0,
     0,     0,     0,    18,    19,    20,     0,     0,    76,    21,
    68,     0,    22,    23,     0,     0,     0,    24,     0,    77,
    25,     0,    10,    14,     0,    69,     0,    70,     0,     0,
    71,    46,     0,     0,     0,     0,    72,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    16,     0,    73,     0,     0,     0,     0,     0,     0,
     0,    74,     0,     0,     0,    75,     0,     0,     0,     0,
     0,     0,     0,     0,    18,    19,    20,    68,     0,    76,
    21,     0,     0,    22,    23,     0,     0,     0,    24,    10,
    14,    25,    69,     0,    70,     0,     0,    71,     0,     0,
     0,     0,     0,    72,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    16,     0,
    73,     0,     0,     0,     0,     0,     0,     0,    74,     0,
     0,     0,    75,     0,     0,     0,     0,     0,     0,     0,
     0,    18,    19,    20,     0,     0,    76,    21,     0,     0,
    22,    23,     0,     0,     0,    24,     0,     0,    25

}; }

static public final int yycheck[] = create$yycheck();
private static int[] create$yycheck() { return new int[] {
     2,
     3,   330,     4,     5,   222,   145,    40,    28,    42,   276,
   330,   438,   194,   163,   196,   191,   137,   443,    13,   454,
    52,    52,   273,    13,   317,    62,   247,    78,    60,    60,
    60,    13,   193,    13,     1,     6,    60,    66,   199,   200,
    13,   509,   552,   197,   205,   513,    13,    50,   202,    52,
    52,    54,    13,   104,    86,    86,   210,    60,    60,    91,
    91,    19,   238,    66,    19,    86,    58,    25,    39,    98,
    25,    80,    64,   105,   105,   107,   107,   109,   109,   109,
   117,    61,    52,    86,   105,   109,   107,   145,    91,    91,
    60,   212,    72,     6,   336,    98,   278,   279,   280,   281,
    61,    96,   105,    50,   107,    95,   109,   109,    50,   544,
   545,   546,    54,   145,   335,   336,    86,     4,     5,   629,
   588,    91,    95,   277,    66,   454,    39,   136,   137,   269,
    13,   561,    52,   191,   454,   105,   165,   107,    86,   109,
    60,    99,   145,   436,    99,    94,   322,   179,   179,    13,
   392,   393,   101,    78,   330,    32,    98,   105,    22,   107,
   163,    60,   165,   195,   222,    52,   327,   593,   171,    95,
   346,    91,    98,    60,   604,   145,   179,   179,   396,   104,
   238,   608,   145,    60,   216,   216,     1,   622,   191,   109,
   222,    58,   195,    95,   197,   216,    98,    64,    13,   202,
    13,    60,   356,   357,    91,   631,   105,   210,    94,   179,
   109,   269,    76,   216,   368,   544,   545,   546,   104,   222,
   462,   163,   109,   165,   544,   545,   546,    95,   191,    97,
    58,   413,   414,   415,   455,   238,    64,   269,   459,   360,
   507,   273,   273,   102,   495,   277,   216,    50,   398,   491,
   109,    94,   222,   195,    20,   395,   115,    46,   101,   222,
    63,   104,    51,    98,   322,    54,   269,    94,    95,   104,
   273,   273,   330,   276,   277,   238,    96,    43,   454,   433,
    55,   442,    57,   501,   445,   446,   318,   318,   346,   101,
   110,   111,   104,   622,    69,    94,    98,   318,    95,   269,
    97,    94,   622,   273,    41,   104,   269,    97,    41,   102,
    13,   104,   102,    13,   421,   318,   423,   424,   425,   322,
   145,   355,   101,   112,   113,   104,   457,   330,   510,   460,
    97,   127,    99,   102,   576,   104,   132,   395,   396,    95,
   582,    97,    13,   346,   203,    95,   102,    97,   318,    94,
    95,   147,   102,   356,   357,    58,   418,   419,   420,   322,
   102,    64,   104,   395,   396,   368,   191,   330,   544,   545,
   546,   547,   106,   107,   416,   417,    98,   173,   426,   427,
   176,   384,   178,   346,    49,   443,    97,    95,   606,    94,
   422,    94,   395,   396,    13,   398,   454,   222,   101,    13,
   104,   104,   556,    95,   101,   587,   438,   438,    10,    98,
    98,   443,    98,   238,    78,    97,   101,   571,   105,   422,
   100,   104,    13,    13,   105,   395,   396,   103,   101,   101,
   433,    94,   395,   396,    94,   438,   438,    94,   592,   145,
   443,   443,   101,   501,   269,   101,   622,   101,    99,    95,
    95,   454,   422,    94,   104,    88,   398,   101,    88,    97,
   115,   114,    15,   495,   495,   102,    97,   116,   438,   501,
   266,   267,    95,   443,    95,    83,   104,    95,    13,    95,
   443,    98,    22,   342,    97,   191,   544,   545,   546,   547,
    22,   454,   495,   495,    22,   102,   102,   322,   501,    98,
   101,    99,    94,   561,   507,   330,   102,   539,   539,   102,
    99,   145,    99,    28,   102,    28,   222,   103,   539,    98,
   316,   346,    91,   101,    92,   495,    93,    13,   105,   561,
   105,   501,   238,   145,    99,   593,   539,    99,   501,    95,
    95,   544,   545,   546,   547,   103,   604,    95,   606,    95,
    97,   103,   102,   556,    28,    98,    95,   191,   561,   103,
   102,   171,    95,   269,   622,   102,   102,     0,   571,   539,
   395,   396,   604,   631,   606,   102,   608,   608,   102,   191,
     0,   544,   545,   546,   547,   422,     7,   197,   222,   592,
   593,   561,   202,   389,    13,     5,   170,    16,   561,    18,
   210,   604,    21,   606,   238,   608,   608,   109,    27,   468,
   222,   105,   471,    91,   443,   559,   322,   631,   443,   622,
   150,   559,   469,   469,   330,    44,   238,   269,   631,   454,
   593,   145,   361,    52,   604,   269,   606,    56,   608,   430,
   346,   604,   336,   606,   428,   431,    14,   429,   384,   432,
   590,    70,    -1,    -1,    22,    -1,    -1,   269,    -1,   622,
    -1,    -1,    -1,    -1,    -1,    -1,   276,   277,   631,    -1,
    -1,    -1,    -1,    -1,    42,    -1,   501,   191,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,   322,   395,
   396,    -1,    -1,    -1,    -1,    -1,   330,    65,    66,    67,
    -1,    -1,    -1,    71,    -1,    -1,    74,    75,   222,    -1,
   322,    79,   346,    -1,    82,    -1,    -1,    -1,   330,   544,
   545,   546,   547,    -1,   238,    14,    -1,    95,    -1,    -1,
    -1,    -1,    -1,    22,   346,    -1,   561,   443,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   356,   357,   454,    -1,
    -1,    -1,    -1,    42,    -1,   269,    -1,    -1,   368,    -1,
    -1,   395,   396,    -1,    53,    -1,    -1,    -1,   593,    -1,
    -1,    -1,    -1,    -1,   384,    -1,    65,    66,    67,   604,
    -1,   606,    71,   395,   396,    74,    75,    -1,    -1,    -1,
    79,    -1,    -1,    82,    -1,   501,    -1,   622,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   631,    -1,   322,   443,
    -1,    -1,    -1,    -1,    -1,    -1,   330,    -1,    -1,   194,
   454,   196,    -1,   433,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   443,   346,    -1,    -1,    -1,    -1,    -1,   544,   545,
   546,   547,   454,    29,    30,    31,    -1,    33,    34,    35,
    36,    37,    38,    39,    40,   561,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,    29,    30,
    31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
    -1,   395,   396,    -1,    -1,    -1,    -1,   593,    -1,   501,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   507,   604,    -1,
   606,    -1,    -1,   278,   279,   280,   281,    -1,    94,    -1,
   544,   545,   546,   547,   100,   101,   622,    -1,   104,    -1,
   194,    -1,   196,    -1,    -1,   631,    -1,   561,    -1,   443,
    85,    -1,   544,   545,   546,   547,    -1,    -1,    -1,   100,
   454,    -1,    -1,    -1,    -1,    -1,   556,    -1,    -1,   561,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   593,
    -1,   571,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   604,    -1,   606,   128,    -1,    -1,    -1,   132,    -1,    -1,
    -1,   593,   592,    -1,    -1,    -1,    -1,   501,   622,    -1,
    -1,    -1,   604,    -1,   606,    -1,    -1,   631,    -1,    -1,
    -1,    -1,    -1,    -1,   278,   279,   280,   281,    -1,    -1,
   622,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   631,
    -1,    -1,    -1,   178,    -1,    -1,    -1,    -1,    -1,    -1,
   544,   545,   546,   547,    -1,    -1,    -1,    -1,   413,   414,
   415,   416,   417,   418,   419,   420,   421,   561,   423,   424,
   425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
   215,    29,    30,    31,    -1,    33,    34,    35,    36,    37,
    38,    39,    40,    -1,    -1,    -1,    -1,    -1,    -1,   593,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   604,    -1,   606,    29,    30,    31,    -1,    33,    34,    35,
    36,    37,    38,    39,    40,    -1,    -1,    -1,   622,    -1,
    -1,    -1,   267,    -1,    -1,    -1,    -1,   631,    -1,   274,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,
    -1,    -1,   100,    -1,   509,   510,    -1,    -1,   513,   413,
   414,   415,   416,   417,   418,   419,   420,   421,    -1,   423,
   424,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
    -1,    -1,    -1,    -1,   100,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,
   335,   336,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     1,    -1,    -1,    -1,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    -1,    -1,    16,    -1,    18,    -1,    -1,
    21,    -1,   587,   588,    -1,   590,    27,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,   509,   510,    -1,    -1,   513,
    -1,    52,    -1,    -1,    -1,    56,    -1,    58,    -1,    -1,
    61,   406,   407,    64,    -1,    -1,    -1,    -1,    -1,    70,
    -1,    72,    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,
    81,    -1,    -1,    84,    85,    86,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
   101,    -1,    -1,    -1,    -1,   106,   107,   108,   109,    -1,
   455,    -1,    -1,    -1,   459,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   587,   588,     1,   590,    -1,    -1,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    -1,    -1,
    16,    -1,    18,    -1,    -1,    21,    -1,    -1,    -1,    -1,
    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,
    56,    -1,    58,    -1,    -1,    61,    -1,    -1,    64,    -1,
    -1,    -1,    -1,    -1,    70,    -1,    72,    -1,    -1,    -1,
    76,    -1,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,
    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,   105,
   106,   107,   108,   109,     1,    -1,    -1,    -1,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    -1,    -1,    16,
    -1,    18,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,
    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,
    -1,    58,    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,
    -1,    -1,    -1,    70,    -1,    72,    -1,    -1,    -1,    76,
    -1,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,   106,
   107,   108,   109,     1,    -1,    -1,    -1,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    -1,    -1,    16,    -1,
    18,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    27,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,
    58,    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    72,    -1,    -1,    -1,    76,    -1,
    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,   106,   107,
   108,   109,     1,    -1,    -1,    -1,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    -1,    -1,    16,    -1,    18,
    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,    27,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,    58,
    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,    -1,    -1,
    -1,    70,    -1,    72,    -1,    -1,    -1,    76,    -1,    -1,
    -1,    -1,    81,    -1,    -1,    84,    85,    86,    -1,    -1,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    -1,
    -1,    16,   101,    18,    -1,    -1,    21,   106,   107,   108,
   109,    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,
    -1,    56,    -1,    58,    -1,    -1,    61,    -1,    -1,    64,
    -1,    -1,    -1,    -1,    -1,    70,    -1,    72,    -1,    -1,
    -1,    76,    -1,    -1,    -1,    -1,    81,    -1,    -1,    84,
    85,    86,    -1,    -1,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    98,    99,    16,   101,    18,    -1,    -1,
    21,   106,   107,   108,   109,    -1,    27,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    52,    -1,    -1,    -1,    56,    -1,    58,    -1,    -1,
    61,    -1,    -1,    64,    -1,    -1,    -1,    -1,    -1,    70,
    -1,    72,    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,
    81,    -1,    -1,    84,    85,    86,    -1,    -1,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    98,    -1,    16,
   101,    18,    -1,    -1,    21,   106,   107,   108,   109,    -1,
    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,
    -1,    58,    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,
    -1,    -1,    -1,    70,    -1,    72,    -1,    -1,    -1,    76,
    -1,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,
    -1,    -1,    -1,    -1,   101,    -1,    -1,    -1,    -1,   106,
   107,   108,   109,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    -1,    -1,    16,    -1,    18,    -1,    -1,    21,
    -1,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    52,    -1,    -1,    -1,    56,    -1,    58,    -1,    -1,    61,
    -1,    -1,    64,    -1,    -1,    -1,    -1,    -1,    70,    -1,
    72,    -1,    -1,    -1,    76,    -1,    -1,    -1,    -1,    81,
    -1,    -1,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   101,
   102,    -1,    -1,    -1,   106,   107,   108,   109,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    -1,    -1,    16,
    -1,    18,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,
    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,
    -1,    58,    -1,    -1,    61,    -1,    -1,    64,    -1,    -1,
    -1,    -1,    -1,    70,    -1,    72,    -1,    -1,    -1,    76,
    -1,    -1,    -1,    -1,    81,    -1,    -1,    84,    85,    86,
    -1,    -1,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    -1,    -1,    16,   101,    18,    -1,    -1,    21,   106,
   107,   108,   109,    -1,    27,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,    -1,     1,    -1,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    56,    -1,    -1,    13,    14,    61,    16,
    -1,    18,    -1,    -1,    21,    -1,    -1,    70,    -1,    72,
    27,    -1,    -1,    76,    -1,    -1,    -1,    -1,    81,    -1,
    -1,    84,    85,    86,    -1,    42,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,   101,    56,
    -1,    -1,    -1,    -1,    -1,   108,   109,    -1,    65,    66,
    67,    -1,    -1,    70,    71,    -1,    -1,    74,    75,    -1,
    -1,    -1,    79,     1,    -1,    82,    -1,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    -1,    16,    17,
    18,    19,    -1,    21,    22,   102,    24,    25,    26,    27,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    -1,    44,    45,    -1,    -1,
    48,    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,
    58,    59,    -1,    61,    -1,    -1,    64,    65,    66,    67,
    68,    -1,    70,    71,    72,    73,    74,    75,    76,    77,
    -1,    79,    80,    81,    82,    83,    84,    85,    86,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,
    98,    99,     1,   101,    -1,    -1,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    -1,    16,    17,    18,
    19,    -1,    21,    22,    -1,    24,    25,    26,    27,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    -1,    44,    45,    -1,    -1,    48,
    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,    58,
    59,    -1,    61,    -1,    -1,    64,    65,    66,    67,    68,
    -1,    70,    71,    72,    73,    74,    75,    76,    77,    -1,
    79,    80,    81,    82,    83,    84,    85,    86,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,    98,
    99,     1,   101,    -1,    -1,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    -1,    16,    17,    18,    19,
    -1,    21,    22,    -1,    24,    25,    26,    27,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    -1,    44,    45,    -1,    -1,    48,    -1,
    -1,    -1,    52,    -1,    -1,    -1,    56,    -1,    58,    59,
    -1,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
    70,    71,    72,    73,    74,    75,    76,    77,    -1,    79,
    80,    81,    82,    83,    84,    85,    86,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,    98,    99,
     1,   101,    -1,    -1,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    -1,    16,    17,    18,    -1,    -1,
    21,    22,    -1,    24,    -1,    26,    27,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    -1,    44,    45,    -1,    -1,    48,    -1,    -1,
    -1,    52,    -1,    -1,    -1,    56,    -1,    58,    59,    -1,
    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
    71,    72,    73,    74,    75,    76,    77,    -1,    79,    80,
    81,    82,    83,    84,    85,    86,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    -1,    -1,    98,    99,     1,
   101,    -1,    -1,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    -1,    16,    17,    18,    -1,    -1,    21,
    22,    -1,    24,    -1,    26,    27,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    -1,    44,    45,    -1,    -1,    48,    -1,    -1,    -1,
    52,    -1,    -1,    -1,    56,    -1,    58,    59,    -1,    61,
    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
    72,    73,    74,    75,    76,    77,    -1,    79,    80,    81,
    82,    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    95,    -1,    -1,    98,    99,     1,   101,
    -1,    -1,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    -1,    16,    17,    18,    -1,    -1,    21,    22,
    -1,    24,    -1,    26,    27,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    -1,    44,    45,    -1,    -1,    48,    -1,    -1,    -1,    52,
    -1,    -1,    -1,    56,    -1,    58,    59,    -1,    61,    -1,
    -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
    73,    74,    75,    76,    77,    -1,    79,    80,    81,    82,
    83,    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    95,    -1,    -1,    98,    99,     1,   101,    -1,
    -1,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    -1,    16,    17,    18,    -1,    -1,    21,    22,    -1,
    24,    -1,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
    44,    45,    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,
    -1,    -1,    56,    -1,    58,    59,    -1,    61,    -1,    -1,
    64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
    74,    75,    76,    77,    -1,    79,    80,    81,    82,    83,
    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    95,    -1,    -1,    98,    99,     1,   101,    -1,    -1,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    -1,    16,    17,    18,    -1,    -1,    21,    22,    -1,    24,
    -1,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,
    45,    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,    -1,
    -1,    56,    -1,    58,    59,    -1,    61,    -1,    -1,    64,
    65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
    75,    76,    77,    -1,    79,    80,    81,    82,    83,    84,
    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    95,    -1,    -1,    98,    99,     1,   101,    -1,    -1,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    -1,
    16,    17,    18,    -1,    -1,    21,    22,    -1,    24,    -1,
    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    45,
    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,    -1,    -1,
    56,    -1,    58,    59,    -1,    61,    -1,    -1,    64,    65,
    66,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
    76,    77,    -1,    79,    80,    81,    82,    83,    84,    85,
    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    95,
    -1,    -1,    98,    99,     1,   101,    -1,    -1,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    -1,    16,
    -1,    18,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,
    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    52,    -1,    -1,    -1,    56,
    -1,    58,    -1,    -1,    61,    -1,    -1,    64,    65,    66,
    67,    -1,    -1,    70,    71,    72,    -1,    74,    75,    76,
     1,    -1,    79,    -1,    81,    82,    -1,    84,    85,    86,
    -1,    -1,    13,    14,    -1,    16,    -1,    18,    95,    -1,
    21,    22,    -1,    -1,   101,    -1,    27,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    52,    53,    -1,    -1,    56,    -1,    -1,    59,    -1,
    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,    70,
    71,    -1,    -1,    74,    75,     1,    -1,    -1,    79,    -1,
    81,    82,    -1,    -1,    -1,    -1,    -1,    13,    14,    -1,
    16,    -1,    18,    -1,    -1,    21,    22,    98,    99,    -1,
    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    52,    53,    -1,    -1,
    56,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,    65,
    66,    67,    -1,    -1,    70,    71,    -1,    -1,    74,    75,
     1,    -1,    -1,    79,    -1,    81,    82,    -1,    -1,    -1,
    -1,    -1,    13,    14,    -1,    16,    -1,    18,    -1,    -1,
    21,    22,    98,    99,    -1,    -1,    27,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,    70,
    71,     1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,
    81,    82,    -1,    13,    14,    -1,    16,    -1,    18,    -1,
    -1,    21,    22,    -1,    -1,    -1,    -1,    27,    99,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    -1,    44,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    52,    53,    -1,    -1,    56,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    65,    66,    67,    -1,    -1,
    70,    71,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,
    -1,    81,    82,    -1,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    -1,    -1,    16,    17,    18,    -1,    99,
    21,    -1,    -1,    24,    -1,    26,    27,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    45,    -1,    -1,    48,    -1,    -1,
    -1,    52,    -1,    -1,    -1,    56,    -1,    58,    59,    -1,
    61,    -1,    -1,    64,    -1,    -1,    -1,    68,    -1,    70,
    -1,    72,    73,    74,    -1,    76,    77,    -1,    -1,    80,
    81,    -1,    83,    84,    85,    86,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    95,    -1,    -1,    98,    -1,    -1,
   101,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    -1,    -1,    16,    17,    18,    -1,    -1,    21,    -1,    -1,
    24,    -1,    26,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    44,    45,    -1,    -1,    48,    -1,    -1,    -1,    52,    -1,
    -1,    -1,    56,    -1,    58,    59,    -1,    61,    -1,    -1,
    64,    -1,    -1,    -1,    68,    -1,    70,    -1,    72,    73,
    74,    -1,    76,    77,    -1,    -1,    80,    81,    -1,    83,
    84,    85,    86,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    95,    -1,    -1,    98,    -1,    -1,   101,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    -1,    -1,    16,
    -1,    18,    -1,    -1,    21,    -1,    -1,    -1,    -1,    -1,
    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    52,    -1,     1,    -1,    56,
    -1,    58,    -1,    -1,    61,    -1,    -1,    64,    -1,    13,
    14,    -1,    16,    70,    18,    72,    -1,    21,    22,    76,
    -1,    -1,    -1,    27,    81,    -1,    -1,    84,    85,    86,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
    44,    -1,    -1,    -1,   101,    -1,    -1,    -1,    52,    53,
    -1,    -1,    56,    -1,    -1,    59,    -1,    -1,    -1,    -1,
    -1,    65,    66,    67,    -1,    -1,    70,    71,     1,    -1,
    74,    75,    -1,    -1,    -1,    79,    -1,    81,    82,    -1,
    13,    14,    -1,    16,    -1,    18,    -1,    -1,    21,    22,
    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,
    53,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    65,    66,    67,    -1,    -1,    70,    71,     1,
    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    81,    82,
    -1,    13,    14,    -1,    16,    -1,    18,    -1,    -1,    21,
    -1,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    65,    66,    67,    -1,    -1,    70,    71,
     1,    -1,    74,    75,    -1,    -1,    -1,    79,    -1,    81,
    82,    -1,    13,    14,    -1,    16,    -1,    18,    -1,    -1,
    21,    22,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    52,    -1,    -1,    -1,    56,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    65,    66,    67,     1,    -1,    70,
    71,    -1,    -1,    74,    75,    -1,    -1,    -1,    79,    13,
    14,    82,    16,    -1,    18,    -1,    -1,    21,    -1,    -1,
    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    52,    -1,
    -1,    -1,    56,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    65,    66,    67,    -1,    -1,    70,    71,    -1,    -1,
    74,    75,    -1,    -1,    -1,    79,    -1,    -1,    82

}; }



// SUFFIX



YYCompilationUnit compUnit;

/* Error handling */

public void parseError(String msg) throws ParseException {
    String desc;
    if (yychar == YYEOF) {
	desc = "unexpected end of file";
    } else {
	desc = "parse error: '" + yytext() + "'";
    }
    if (msg != null && msg != "parse error") desc += "; " + msg;
    reportError(tokencxt, desc);
}

public static void reportError(ILocationContext cxt, String msg) throws CompileException {
    reportError(cxt, msg, true);
}

public static void reportError(ILocationContext cxt, String msg, boolean errthrow)
        throws CompileException {
    YYLocation lbeg = cxt.lbeg();
    JanetSourceReader ibuf = cxt.ibuf();
    String orig = ibuf.getOriginAsString();
    String line = ibuf.getLine(lbeg);

    System.err.println(orig + ":" + (lbeg.lineno+1) + ": " + msg);
    if (line != null && !line.equals("")) {
	System.err.println(line);

	String marker = "";
	for (int i=0; i<lbeg.charno; i++) {
	    char c = line.charAt(i);
	    marker += (Character.isWhitespace(c) ? c : ' ');
	}
	marker += "^";
	System.err.println(marker);
    }
    if(errthrow) throw new CompileException(msg);
}

public static void reportWarning(ILocationContext cxt, String msg) {
    try {
	reportError(cxt, "warning: " + msg, false);
    } catch (CompileException e) {}
}

/* */

/* Parse context */

public class Context implements IMutableContext {

    IScope currScope;
    VariableStack variables = new VariableStack();

    public final YYLocation lbeg() { return Parser.this.lbeg(); }
    public final YYLocation lend() { return Parser.this.lend(); }
    public final JanetSourceReader ibuf() { return yylex.ibuf(); }

    public final void reportError(String msg) throws CompileException {
	Parser.this.reportError(this, msg, true);
    }

    public final ClassManager getClassManager() { return compMgr.getClassManager(); }
    public final YYCompilationUnit getCompilationUnit() { return compUnit; }
    public final IScope getScope() { return currScope; }
    public final VariableStack getVariables() { return variables; }

    public void pushScope(IScope unit) {
	//System.out.println("pushing " + unit.getClass().getName());
	currScope = unit;
    }

    public void addVariable(YYVariableDeclarator var) throws CompileException {
	variables.push(var);
    }

    public void addVariables(YYVariableDeclaratorList vars) throws CompileException {
	if (vars == null) return;
	YYVariableDeclarator var;
        Iterator i = vars.iterator();
        while (i.hasNext()) {
            variables.push((YYVariableDeclarator)i.next());
        }
    }

    public IScope popScope() {
	variables.pop(currScope);	/* popping variables */
	IScope unit = currScope;
	currScope = currScope.getEnclosingScope();
	//System.out.println("popping " + unit.getClass().getName());
	return unit;
    }

}

Context cxt = new Context();

ILocationContext tokencxt = new ILocationContext() {
	public final YYLocation lbeg() { return yylex.tokenloc(); }
	public final YYLocation lend() { return Parser.this.lend(); }
	public final JanetSourceReader ibuf() { return yylex.ibuf(); }
	public final void reportError(String msg) throws CompileException {
	    Parser.this.reportError(this, msg, true);
	}
    };

// redirection to cxt
void pushScope(IScope unit) { cxt.pushScope(unit); }
IScope popScope() { return cxt.popScope(); }
IScope peekScope() { return cxt.getScope(); }
void addVariable(YYVariableDeclarator var) throws CompileException { cxt.addVariable(var); }
void addVariables(YYVariableDeclaratorList vars) throws CompileException { cxt.addVariables(vars); }
/* Native language support */

public void setNativeLanguage(String lang) throws LexException {
    yylex.setNativeLanguage(lang);
}

public String getNativeLanguage() { return yylex.getNativeLanguage(); }

/* Class stack */
/*
java.util.Stack class_stack = new java.util.Stack();

public void pushClass(YYClass cls) {
    class_stack.push(cls);
}

public YYClass popClass() {
    return (YYClass)class_stack.pop();
}

public YYClass peekClass() {
    if (!class_stack.empty()) {
	return (YYClass)class_stack.peek();
    } else {
	return null;
    }
}
*/


static final String[] yytname = TokenTypes.yytname;

}; /*class*/
