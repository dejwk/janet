/* -*-Java-*- */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

/* Important information:
 * THIS JAVA SOURCE FILE HAS BEEN AUTOMATICALLY GENERATED by the public domain
 * JB tool (see README.html for details) from template based on JB.
 */

package pl.edu.agh.icsr.janet;

public
abstract
class TokenTypes {

public static final int EOF = 0;

public static final int tokenmin = 257;
public static final int tokenmax = 347;

public static final int YYNONE = -1;
public static final int YYEOF = EOF;

public static final int LEX_ERROR = 257;
public static final int EPSILON = 258;
public static final int INTEGER_LITERAL = 259;
public static final int LONG_LITERAL = 260;
public static final int FLOAT_LITERAL = 261;
public static final int DOUBLE_LITERAL = 262;
public static final int BOOLEAN_LITERAL = 263;
public static final int STRING_LITERAL = 264;
public static final int CHARACTER_LITERAL = 265;
public static final int NULL_LITERAL = 266;
public static final int IDENTIFIER = 267;
public static final int ABSTRACT = 268;
public static final int ANDAND = 269;
public static final int BOOLEAN = 270;
public static final int BREAK = 271;
public static final int BYTE = 272;
public static final int CASE = 273;
public static final int CATCH = 274;
public static final int CHAR = 275;
public static final int CLASS = 276;
public static final int CONST = 277;
public static final int CONTINUE = 278;
public static final int DEFAULT = 279;
public static final int DO = 280;
public static final int DOUBLE = 281;
public static final int ELSE = 282;
public static final int EQADD = 283;
public static final int EQAND = 284;
public static final int EQDIV = 285;
public static final int EQEQ = 286;
public static final int EQLOGRSHIFT = 287;
public static final int EQLSHIFT = 288;
public static final int EQMOD = 289;
public static final int EQMUL = 290;
public static final int EQOR = 291;
public static final int EQRSHIFT = 292;
public static final int EQSUB = 293;
public static final int EQXOR = 294;
public static final int EXTENDS = 295;
public static final int FINAL = 296;
public static final int FINALLY = 297;
public static final int FLOAT = 298;
public static final int FOR = 299;
public static final int GE = 300;
public static final int GOTO = 301;
public static final int IF = 302;
public static final int IMPLEMENTS = 303;
public static final int IMPORT = 304;
public static final int INSTANCEOF = 305;
public static final int INT = 306;
public static final int INTERFACE = 307;
public static final int LE = 308;
public static final int LOGRSHIFT = 309;
public static final int LONG = 310;
public static final int LSHIFT = 311;
public static final int MINUSMINUS = 312;
public static final int NATIVE = 313;
public static final int NE = 314;
public static final int NEW = 315;
public static final int OROR = 316;
public static final int PACKAGE = 317;
public static final int PLUSPLUS = 318;
public static final int PRIVATE = 319;
public static final int PROTECTED = 320;
public static final int PUBLIC = 321;
public static final int RETURN = 322;
public static final int RSHIFT = 323;
public static final int SHORT = 324;
public static final int STATIC = 325;
public static final int SUPER = 326;
public static final int SWITCH = 327;
public static final int SYNCHRONIZED = 328;
public static final int STRICTFP = 329;
public static final int THIS = 330;
public static final int THROW = 331;
public static final int THROWS = 332;
public static final int TRANSIENT = 333;
public static final int TRY = 334;
public static final int VOID = 335;
public static final int VOLATILE = 336;
public static final int WHILE = 337;
public static final int NH_EXPRESSION = 338;
public static final int NH_STRING = 339;
public static final int NH_UNICODE_STRING = 340;
public static final int NH_ARRAY_PTR = 341;
public static final int NATIVE_STATEMENTS = 342;
public static final int NATIVE_STATEMENTS_WITH_JAVA_TAIL = 343;
public static final int NATIVE_BLOCK = 344;
public static final int NATIVE_EXPRESSION = 345;
public static final int NATIVE_STRING = 346;
public static final int NATIVE_UNICODE_STRING = 347;


public static final String yytname[] = yytnameTableCreator();

private static final String[] yytnameTableCreator() {
  final String yytname[] = {
   "$","error","$undefined.","LEX_ERROR",
"EPSILON","INTEGER_LITERAL","LONG_LITERAL","FLOAT_LITERAL","DOUBLE_LITERAL",
"BOOLEAN_LITERAL","STRING_LITERAL","CHARACTER_LITERAL","NULL_LITERAL","IDENTIFIER",
"ABSTRACT","ANDAND","BOOLEAN","BREAK","BYTE","CASE","CATCH","CHAR","CLASS","CONST",
"CONTINUE","DEFAULT","DO","DOUBLE","ELSE","EQADD","EQAND","EQDIV","EQEQ","EQLOGRSHIFT",
"EQLSHIFT","EQMOD","EQMUL","EQOR","EQRSHIFT","EQSUB","EQXOR","EXTENDS","FINAL",
"FINALLY","FLOAT","FOR","GE","GOTO","IF","IMPLEMENTS","IMPORT","INSTANCEOF",
"INT","INTERFACE","LE","LOGRSHIFT","LONG","LSHIFT","MINUSMINUS","NATIVE","NE",
"NEW","OROR","PACKAGE","PLUSPLUS","PRIVATE","PROTECTED","PUBLIC","RETURN","RSHIFT",
"SHORT","STATIC","SUPER","SWITCH","SYNCHRONIZED","STRICTFP","THIS","THROW","THROWS",
"TRANSIENT","TRY","VOID","VOLATILE","WHILE","NH_EXPRESSION","NH_STRING","NH_UNICODE_STRING",
"NH_ARRAY_PTR","NATIVE_STATEMENTS","NATIVE_STATEMENTS_WITH_JAVA_TAIL","NATIVE_BLOCK",
"NATIVE_EXPRESSION","NATIVE_STRING","NATIVE_UNICODE_STRING","'.'","';'","'*'",
"','","'{'","'}'","'='","'('","')'","':'","'['","']'","'+'","'-'","'~'","'!'",
"'/'","'%'","'<'","'>'","'&'","'^'","'|'","'?'","Goal","@1","Literal","Void",
"Type","PrimitiveType","ReferenceType","ClassOrInterfaceType","ClassType","InterfaceType",
"ArrayType","Name","SimpleName","CompilationUnit","@2","ImportDeclarations",
"PackageDeclaration","SingleTypeImportDeclaration","TypeImportOnDemandDeclaration",
"TypeDeclaration","Modifiers","Modifier","NativeModifier","ModifiersWithNative",
"ClassDeclaration","@3","ClassHeader","ClassHeaderHead","Super","Interfaces",
"InterfaceTypeList","ClassBody","ClassBodyDeclarations","ClassBodyDeclaration",
"StaticNativeStatement","@4","@5","ClassMemberDeclaration","FieldDeclaration",
"VariableDeclarators","VariableDeclarator","VariableDeclaratorId","VariableInitializer",
"MethodDeclaration","MethodHeader","MethodDeclarator","@6","FormalParameterList_opt",
"FormalParameterList","FormalParameter","Throws_opt","ClassTypeList","MethodBody",
"NativeMethodDeclaration","NativeMethodHeader","NativeMethodDeclarator","@7",
"NativeMethodBody","NativeStatement","@8","StaticInitializer","ConstructorDeclaration",
"ConstructorHeader","ConstructorDeclarator","@9","ConstructorBody","@10","ConstructorBodyStatements",
"ExplicitConstructorInvocation","InterfaceDeclaration","InterfaceHeader","InterfaceHeaderHead",
"ExtendsInterfaces","InterfaceBody","InterfaceMemberDeclarations","InterfaceMemberDeclaration",
"ConstantDeclaration","AbstractMethodDeclaration","ArrayInitializer","VariableInitializers",
"Block","@11","BlockStatements_opt","BlockStatements","BlockStatement","LocalVariableDeclarationStatement",
"LocalVariableDeclaration","Statement","StatementNoShortIf","StatementWithoutTrailingSubstatement",
"EmptyStatement","LabeledStatement","LabeledStatementNoShortIf","ExpressionStatement",
"StatementExpression","IfThenStatement","IfThenElseStatement","IfThenElseStatementNoShortIf",
"SwitchStatement","SwitchBlock","SwitchBlockStatementGroups","SwitchBlockStatementGroup",
"SwitchLabels","SwitchLabel","WhileStatement","WhileStatementNoShortIf","DoStatement",
"ForStatement","ForStatementNoShortIf","ForHeader","@12","ForInit_opt","ForExpression_opt",
"ForUpdate_opt","StatementExpressionList","BreakStatement","ContinueStatement",
"ReturnStatement","ThrowStatement","SynchronizedStatement","TryStatement","Catches",
"CatchClause","CatchClauseHead","@13","Finally","NativeBlock","@14","@15","NativeStatements_opt",
"Primary","BracedExpression","PrimaryNoNewArray","NativeExpression","@16","@17",
"NativeString","@18","@19","@20","@21","ClassLiteral","ClassInstanceCreationExpression",
"@22","@23","ArgumentList","Arguments","ArrayCreationExpression","DimExprs",
"DimExpr","Dims","FieldAccess","MethodInvocation","ArrayAccess","PostfixExpression",
"PostIncrementExpression","PostDecrementExpression","UnaryExpression","PreIncrementExpression",
"PreDecrementExpression","UnaryExpressionNotPlusMinus","CastExpression","MultiplicativeExpression",
"AdditiveExpression","ShiftExpression","RelationalExpression","EqualityExpression",
"AndExpression","ExclusiveOrExpression","InclusiveOrExpression","ConditionalAndExpression",
"ConditionalOrExpression","ConditionalExpression","AssignmentExpression","Assignment",
"LeftHandSide","AssignmentOperator","Expression","ConstantExpression", null

  };
  return yytname;
}



};
