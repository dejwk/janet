/* -*-Java-*- */

/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is the Java Language Extensions (JANET) package.
 *
 * The Initial Developer of the Original Code is Dawid Kurzyniec.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s): Dawid Kurzyniec <dawidk@icsr.agh.edu.pl>
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/* Important information:
 * THIS JAVA SOURCE FILE HAS BEEN AUTOMATICALLY GENERATED by the public domain
 * JB tool (see README.html for details) from template based on JB.
 */

package pl.edu.agh.icsr.janet;

public
abstract
class TokenTypes {

public static final int EOF = 0;

public static final int tokenmin = 258;
public static final int tokenmax = 348;

public static final int YYNONE = -1;
public static final int YYEOF = EOF;

static public final int LEX_ERROR = 258;
static public final int EPSILON = 259;
static public final int INTEGER_LITERAL = 260;
static public final int LONG_LITERAL = 261;
static public final int FLOAT_LITERAL = 262;
static public final int DOUBLE_LITERAL = 263;
static public final int BOOLEAN_LITERAL = 264;
static public final int STRING_LITERAL = 265;
static public final int CHARACTER_LITERAL = 266;
static public final int NULL_LITERAL = 267;
static public final int IDENTIFIER = 268;
static public final int ABSTRACT = 269;
static public final int ANDAND = 270;
static public final int BOOLEAN = 271;
static public final int BREAK = 272;
static public final int BYTE = 273;
static public final int CASE = 274;
static public final int CATCH = 275;
static public final int CHAR = 276;
static public final int CLASS = 277;
static public final int CONST = 278;
static public final int CONTINUE = 279;
static public final int DEFAULT = 280;
static public final int DO = 281;
static public final int DOUBLE = 282;
static public final int ELSE = 283;
static public final int EQADD = 284;
static public final int EQAND = 285;
static public final int EQDIV = 286;
static public final int EQEQ = 287;
static public final int EQLOGRSHIFT = 288;
static public final int EQLSHIFT = 289;
static public final int EQMOD = 290;
static public final int EQMUL = 291;
static public final int EQOR = 292;
static public final int EQRSHIFT = 293;
static public final int EQSUB = 294;
static public final int EQXOR = 295;
static public final int EXTENDS = 296;
static public final int FINAL = 297;
static public final int FINALLY = 298;
static public final int FLOAT = 299;
static public final int FOR = 300;
static public final int GE = 301;
static public final int GOTO = 302;
static public final int IF = 303;
static public final int IMPLEMENTS = 304;
static public final int IMPORT = 305;
static public final int INSTANCEOF = 306;
static public final int INT = 307;
static public final int INTERFACE = 308;
static public final int LE = 309;
static public final int LOGRSHIFT = 310;
static public final int LONG = 311;
static public final int LSHIFT = 312;
static public final int MINUSMINUS = 313;
static public final int NATIVE = 314;
static public final int NE = 315;
static public final int NEW = 316;
static public final int OROR = 317;
static public final int PACKAGE = 318;
static public final int PLUSPLUS = 319;
static public final int PRIVATE = 320;
static public final int PROTECTED = 321;
static public final int PUBLIC = 322;
static public final int RETURN = 323;
static public final int RSHIFT = 324;
static public final int SHORT = 325;
static public final int STATIC = 326;
static public final int SUPER = 327;
static public final int SWITCH = 328;
static public final int SYNCHRONIZED = 329;
static public final int STRICTFP = 330;
static public final int THIS = 331;
static public final int THROW = 332;
static public final int THROWS = 333;
static public final int TRANSIENT = 334;
static public final int TRY = 335;
static public final int VOID = 336;
static public final int VOLATILE = 337;
static public final int WHILE = 338;
static public final int NH_EXPRESSION = 339;
static public final int NH_STRING = 340;
static public final int NH_UNICODE_STRING = 341;
static public final int NH_ARRAY_PTR = 342;
static public final int NATIVE_STATEMENTS = 343;
static public final int NATIVE_STATEMENTS_WITH_JAVA_TAIL = 344;
static public final int NATIVE_BLOCK = 345;
static public final int NATIVE_EXPRESSION = 346;
static public final int NATIVE_STRING = 347;
static public final int NATIVE_UNICODE_STRING = 348;


static public final String yytname[] = create$yytname();
private static String[] create$yytname() { return new String[] {
   "$","error","$undefined.","LEX_ERROR",
"EPSILON","INTEGER_LITERAL","LONG_LITERAL","FLOAT_LITERAL","DOUBLE_LITERAL",
"BOOLEAN_LITERAL","STRING_LITERAL","CHARACTER_LITERAL","NULL_LITERAL","IDENTIFIER",
"ABSTRACT","ANDAND","BOOLEAN","BREAK","BYTE","CASE","CATCH","CHAR","CLASS","CONST",
"CONTINUE","DEFAULT","DO","DOUBLE","ELSE","EQADD","EQAND","EQDIV","EQEQ","EQLOGRSHIFT",
"EQLSHIFT","EQMOD","EQMUL","EQOR","EQRSHIFT","EQSUB","EQXOR","EXTENDS","FINAL",
"FINALLY","FLOAT","FOR","GE","GOTO","IF","IMPLEMENTS","IMPORT","INSTANCEOF",
"INT","INTERFACE","LE","LOGRSHIFT","LONG","LSHIFT","MINUSMINUS","NATIVE","NE",
"NEW","OROR","PACKAGE","PLUSPLUS","PRIVATE","PROTECTED","PUBLIC","RETURN","RSHIFT",
"SHORT","STATIC","SUPER","SWITCH","SYNCHRONIZED","STRICTFP","THIS","THROW","THROWS",
"TRANSIENT","TRY","VOID","VOLATILE","WHILE","NH_EXPRESSION","NH_STRING","NH_UNICODE_STRING",
"NH_ARRAY_PTR","NATIVE_STATEMENTS","NATIVE_STATEMENTS_WITH_JAVA_TAIL","NATIVE_BLOCK",
"NATIVE_EXPRESSION","NATIVE_STRING","NATIVE_UNICODE_STRING","'.'","';'","'*'",
"','","'{'","'}'","'='","'('","')'","':'","'['","']'","'+'","'-'","'~'","'!'",
"'/'","'%'","'<'","'>'","'&'","'^'","'|'","'?'","Goal","@1","Literal","Void",
"Type","PrimitiveType","ReferenceType","ClassOrInterfaceType","ClassType","InterfaceType",
"ArrayType","Name","SimpleName","CompilationUnit","@2","ImportDeclarations",
"PackageDeclaration","SingleTypeImportDeclaration","TypeImportOnDemandDeclaration",
"TypeDeclaration","Modifiers","Modifier","NativeModifier","ModifiersWithNative",
"ClassDeclaration","@3","ClassHeader","ClassHeaderHead","Super","Interfaces",
"InterfaceTypeList","ClassBody","ClassBodyDeclarations","ClassBodyDeclaration",
"StaticNativeStatement","@4","@5","ClassMemberDeclaration","FieldDeclaration",
"VariableDeclarators","VariableDeclarator","VariableDeclaratorId","VariableInitializer",
"MethodDeclaration","MethodHeader","MethodDeclarator","@6","FormalParameterList_opt",
"FormalParameterList","FormalParameter","Throws_opt","ClassTypeList","MethodBody",
"NativeMethodDeclaration","NativeMethodHeader","NativeMethodDeclarator","@7",
"NativeMethodBody","NativeStatement","@8","StaticInitializer","ConstructorDeclaration",
"ConstructorHeader","ConstructorDeclarator","@9","ConstructorBody","@10","ConstructorBodyStatements",
"ExplicitConstructorInvocation","InterfaceDeclaration","InterfaceHeader","InterfaceHeaderHead",
"ExtendsInterfaces","InterfaceBody","InterfaceMemberDeclarations","InterfaceMemberDeclaration",
"ConstantDeclaration","AbstractMethodDeclaration","ArrayInitializer","VariableInitializers",
"Block","@11","BlockStatements_opt","BlockStatements","BlockStatement","LocalVariableDeclarationStatement",
"LocalVariableDeclaration","Statement","StatementNoShortIf","StatementWithoutTrailingSubstatement",
"EmptyStatement","LabeledStatement","LabeledStatementNoShortIf","ExpressionStatement",
"StatementExpression","IfThenStatement","IfThenElseStatement","IfThenElseStatementNoShortIf",
"SwitchStatement","SwitchBlock","SwitchBlockStatementGroups","SwitchBlockStatementGroup",
"SwitchLabels","SwitchLabel","WhileStatement","WhileStatementNoShortIf","DoStatement",
"ForStatement","ForStatementNoShortIf","ForHeader","@12","ForInit_opt","ForExpression_opt",
"ForUpdate_opt","StatementExpressionList","BreakStatement","ContinueStatement",
"ReturnStatement","ThrowStatement","SynchronizedStatement","TryStatement","Catches",
"CatchClause","CatchClauseHead","@13","Finally","NativeBlock","@14","@15","NativeStatements_opt",
"Primary","BracedExpression","PrimaryNoNewArray","NativeExpression","@16","@17",
"NativeString","@18","@19","@20","@21","ClassLiteral","ClassInstanceCreationExpression",
"@22","@23","ArgumentList","Arguments","ArrayCreationExpression","DimExprs",
"DimExpr","Dims","FieldAccess","MethodInvocation","ArrayAccess","PostfixExpression",
"PostIncrementExpression","PostDecrementExpression","UnaryExpression","PreIncrementExpression",
"PreDecrementExpression","UnaryExpressionNotPlusMinus","CastExpression","MultiplicativeExpression",
"AdditiveExpression","ShiftExpression","RelationalExpression","EqualityExpression",
"AndExpression","ExclusiveOrExpression","InclusiveOrExpression","ConditionalAndExpression",
"ConditionalOrExpression","ConditionalExpression","AssignmentExpression","Assignment",
"LeftHandSide","AssignmentOperator","Expression","ConstantExpression", null

}; }



};
